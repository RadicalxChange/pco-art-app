// Generated by @wagmi/cli@1.1.0 on 7/29/2024 at 6:38:22 AM
import {
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
  useNetwork,
  Address,
} from 'wagmi'
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// erc20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20ABI = [
  {
    type: 'event',
    inputs: [
      { name: 'owner', type: 'address', indexed: true },
      { name: 'spender', type: 'address', indexed: true },
      { name: 'value', type: 'uint256', indexed: false },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    inputs: [
      { name: 'from', type: 'address', indexed: true },
      { name: 'to', type: 'address', indexed: true },
      { name: 'value', type: 'uint256', indexed: false },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', type: 'address' },
      { name: 'spender', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', type: 'address' },
      { name: 'amount', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', type: 'address' },
      { name: 'amount', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sender', type: 'address' },
      { name: 'recipient', type: 'address' },
      { name: 'amount', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ethX
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x59988e47A3503AaFaA0368b9deF095c818Fdca01)
 */
export const ethXABI = [
  {
    type: 'event',
    inputs: [
      { name: 'owner', type: 'address', indexed: true },
      { name: 'spender', type: 'address', indexed: true },
      { name: 'value', type: 'uint256', indexed: false },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    inputs: [
      { name: 'from', type: 'address', indexed: true },
      { name: 'to', type: 'address', indexed: true },
      { name: 'value', type: 'uint256', indexed: false },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', type: 'address' },
      { name: 'spender', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', type: 'address' },
      { name: 'amount', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', type: 'address' },
      { name: 'amount', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sender', type: 'address' },
      { name: 'recipient', type: 'address' },
      { name: 'amount', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', type: 'bool' }],
  },
] as const

/**
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x59988e47A3503AaFaA0368b9deF095c818Fdca01)
 */
export const ethXAddress = {
  100: '0x59988e47A3503AaFaA0368b9deF095c818Fdca01',
  11155420: '0x0043d7c85C8b96a49A72A92C0B48CdC4720437d7',
} as const

/**
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x59988e47A3503AaFaA0368b9deF095c818Fdca01)
 */
export const ethXConfig = { address: ethXAddress, abi: ethXABI } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SingleCutDiamond
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const singleCutDiamondABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: 'facetInits',
        internalType: 'struct IDiamond.FacetInit[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'initTarget', internalType: 'address', type: 'address' },
          { name: 'initData', internalType: 'bytes', type: 'bytes' },
          { name: 'selectors', internalType: 'bytes4[]', type: 'bytes4[]' },
        ],
      },
    ],
  },
  {
    type: 'error',
    inputs: [],
    name: 'DiamondWritable__InvalidInitializationParameters',
  },
  {
    type: 'error',
    inputs: [],
    name: 'DiamondWritable__RemoveTargetNotZeroAddress',
  },
  {
    type: 'error',
    inputs: [],
    name: 'DiamondWritable__ReplaceTargetIsIdentical',
  },
  { type: 'error', inputs: [], name: 'DiamondWritable__SelectorAlreadyAdded' },
  { type: 'error', inputs: [], name: 'DiamondWritable__SelectorIsImmutable' },
  { type: 'error', inputs: [], name: 'DiamondWritable__SelectorNotFound' },
  { type: 'error', inputs: [], name: 'DiamondWritable__SelectorNotSpecified' },
  { type: 'error', inputs: [], name: 'DiamondWritable__TargetHasNoCode' },
  { type: 'error', inputs: [], name: 'ERC165Base__InvalidInterfaceId' },
  { type: 'error', inputs: [], name: 'Proxy__ImplementationIsNotContract' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'facetCuts',
        internalType: 'struct IDiamondWritableInternal.FacetCut[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          {
            name: 'action',
            internalType: 'enum IDiamondWritableInternal.FacetCutAction',
            type: 'uint8',
          },
          { name: 'selectors', internalType: 'bytes4[]', type: 'bytes4[]' },
        ],
        indexed: false,
      },
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      { name: 'data', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'DiamondCut',
  },
  { stateMutability: 'payable', type: 'fallback' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'selector', internalType: 'bytes4', type: 'bytes4' }],
    name: 'facetAddress',
    outputs: [{ name: 'facet', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'facetAddresses',
    outputs: [
      { name: 'addresses', internalType: 'address[]', type: 'address[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'facet', internalType: 'address', type: 'address' }],
    name: 'facetFunctionSelectors',
    outputs: [
      { name: 'selectors', internalType: 'bytes4[]', type: 'bytes4[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'facets',
    outputs: [
      {
        name: 'diamondFacets',
        internalType: 'struct IDiamondReadable.Facet[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'selectors', internalType: 'bytes4[]', type: 'bytes4[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  { stateMutability: 'payable', type: 'receive' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BeaconDiamond
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const beaconDiamondABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: '_beacon',
        internalType: 'contract IDiamondReadable',
        type: 'address',
      },
    ],
  },
  { type: 'error', inputs: [], name: 'BeaconDiamond__NoFacetForSignature' },
  { type: 'error', inputs: [], name: 'Proxy__ImplementationIsNotContract' },
  { stateMutability: 'payable', type: 'fallback' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AllowlistFacet
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xe8393C4ea1Bd9D5fB81E17dA4D035D3Db714Ef96)
 */
export const allowlistFacetABI = [
  { type: 'error', inputs: [], name: 'ERC165Base__InvalidInterfaceId' },
  { type: 'error', inputs: [], name: 'UintUtils__InsufficientHexLength' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '_allowAny', internalType: 'bool', type: 'bool', indexed: true },
    ],
    name: 'AllowAnyUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_address',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Allowlisted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_addresses',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'BatchAllowlisted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_addresses',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'BatchUnallowlisted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'previousAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'newAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'RoleAdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleRevoked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_address',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Unallowlisted',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_address', internalType: 'address', type: 'address' },
      { name: '_allowAny', internalType: 'bool', type: 'bool' },
    ],
    name: 'addToAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_address', internalType: 'address', type: 'address' }],
    name: 'addToAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_addresses', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'batchAddToAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_addresses', internalType: 'address[]', type: 'address[]' },
      { name: '_allowAny', internalType: 'bool', type: 'bool' },
    ],
    name: 'batchAddToAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_addresses', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'batchRemoveFromAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_addresses', internalType: 'address[]', type: 'address[]' },
      { name: '_allowAny', internalType: 'bool', type: 'bool' },
    ],
    name: 'batchRemoveFromAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_removeAddresses',
        internalType: 'address[]',
        type: 'address[]',
      },
      { name: '_addAddresses', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'batchUpdateAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_removeAddresses',
        internalType: 'address[]',
        type: 'address[]',
      },
      { name: '_addAddresses', internalType: 'address[]', type: 'address[]' },
      { name: '_allowAny', internalType: 'bool', type: 'bool' },
    ],
    name: 'batchUpdateAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAllowAny',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAllowlist',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_owner', internalType: 'address', type: 'address' },
      { name: 'allowAny', internalType: 'bool', type: 'bool' },
      { name: '_addresses', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'initializeAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'allowAny', internalType: 'bool', type: 'bool' },
      { name: '_addresses', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'initializeAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_address', internalType: 'address', type: 'address' }],
    name: 'isAllowed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_address', internalType: 'address', type: 'address' }],
    name: 'removeFromAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_address', internalType: 'address', type: 'address' },
      { name: '_allowAny', internalType: 'bool', type: 'bool' },
    ],
    name: 'removeFromAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_allowAny', internalType: 'bool', type: 'bool' }],
    name: 'setAllowAny',
    outputs: [],
  },
] as const

/**
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xe8393C4ea1Bd9D5fB81E17dA4D035D3Db714Ef96)
 */
export const allowlistFacetAddress = {
  100: '0xe8393C4ea1Bd9D5fB81E17dA4D035D3Db714Ef96',
  11155420: '0xf7800284309faA8BF0D4b1fa10B0192c2a1336ff',
} as const

/**
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xe8393C4ea1Bd9D5fB81E17dA4D035D3Db714Ef96)
 */
export const allowlistFacetConfig = {
  address: allowlistFacetAddress,
  abi: allowlistFacetABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// EnglishPeriodicAuctionFacet
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xeA45b8aE461c840c1B2965ffeDA5C2a11594E1c1)
 */
export const englishPeriodicAuctionFacetABI = [
  { type: 'error', inputs: [], name: 'ERC165Base__InvalidInterfaceId' },
  { type: 'error', inputs: [], name: 'UintUtils__InsufficientHexLength' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'round',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'winningBidder',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'bidAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'AuctionClosed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'auctionLengthSeconds',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'AuctionLengthSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'bidExtensionSeconds',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'BidExtensionSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'bidExtensionWindowLengthSeconds',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'BidExtensionWindowLengthSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'round',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'bidder',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'bidAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'BidPlaced',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'initialPeriodStartTime',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'InitialPeriodStartTimeSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'minBidIncrement',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MinBidIncrementSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'repossessor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'RepossessorSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'previousAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'newAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'RoleAdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleRevoked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'startingBid',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'StartingBidSet',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'auctionEndTime',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'auctionLengthSeconds',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'auctionStartTime',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'bidder', internalType: 'address', type: 'address' }],
    name: 'availableCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'bidExtensionSeconds',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'bidExtensionWindowLengthSeconds',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'bidder', internalType: 'address', type: 'address' },
    ],
    name: 'bidOf',
    outputs: [
      {
        name: '',
        internalType: 'struct IEnglishPeriodicAuctionInternal.Bid',
        type: 'tuple',
        components: [
          { name: 'bidder', internalType: 'address', type: 'address' },
          { name: 'bidAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'feeAmount', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralAmount',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'round', internalType: 'uint256', type: 'uint256' },
      { name: 'bidder', internalType: 'address', type: 'address' },
    ],
    name: 'bidOf',
    outputs: [
      {
        name: '',
        internalType: 'struct IEnglishPeriodicAuctionInternal.Bid',
        type: 'tuple',
        components: [
          { name: 'bidder', internalType: 'address', type: 'address' },
          { name: 'bidAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'feeAmount', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralAmount',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'bidAmount', internalType: 'uint256', type: 'uint256' }],
    name: 'calculateFeeFromBid',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'cancelAllBidsAndWithdrawCollateral',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'round', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'cancelBid',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'round', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'cancelBidAndWithdrawCollateral',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'closeAuction',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'currentAuctionRound',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'round', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'highestBid',
    outputs: [
      {
        name: '',
        internalType: 'struct IEnglishPeriodicAuctionInternal.Bid',
        type: 'tuple',
        components: [
          { name: 'bidder', internalType: 'address', type: 'address' },
          { name: 'bidAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'feeAmount', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralAmount',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'highestBid',
    outputs: [
      {
        name: '',
        internalType: 'struct IEnglishPeriodicAuctionInternal.Bid',
        type: 'tuple',
        components: [
          { name: 'bidder', internalType: 'address', type: 'address' },
          { name: 'bidAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'feeAmount', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralAmount',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'initialBidder',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'initialPeriodStartTime',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'repossessor_', internalType: 'address', type: 'address' },
      { name: 'initialBidder_', internalType: 'address', type: 'address' },
      {
        name: 'initialPeriodStartTime_',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: 'initialPeriodStartTimeOffset_',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'startingBid_', internalType: 'uint256', type: 'uint256' },
      {
        name: 'auctionLengthSeconds_',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'minBidIncrement_', internalType: 'uint256', type: 'uint256' },
      {
        name: 'bidExtensionWindowLengthSeconds_',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: 'bidExtensionSeconds_',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'initializeAuction',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner_', internalType: 'address', type: 'address' },
      { name: 'repossessor_', internalType: 'address', type: 'address' },
      { name: 'initialBidder_', internalType: 'address', type: 'address' },
      {
        name: 'initialPeriodStartTime_',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: 'initialPeriodStartTimeOffset_',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'startingBid_', internalType: 'uint256', type: 'uint256' },
      {
        name: 'auctionLengthSeconds_',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'minBidIncrement_', internalType: 'uint256', type: 'uint256' },
      {
        name: 'bidExtensionWindowLengthSeconds_',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: 'bidExtensionSeconds_',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'initializeAuction',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'isAuctionPeriod',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'isReadyForTransfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'bidder', internalType: 'address', type: 'address' },
    ],
    name: 'lockedCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'minBidIncrement',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'bidAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'placeBid',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'repossessor',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'auctionLengthSeconds_',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'setAuctionLengthSeconds',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'repossessor_', internalType: 'address', type: 'address' },
      {
        name: 'auctionLengthSeconds_',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'minBidIncrement_', internalType: 'uint256', type: 'uint256' },
      {
        name: 'bidExtensionWindowLengthSeconds_',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: 'bidExtensionSeconds_',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'startingBid_', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setAuctionParameters',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'bidExtensionSeconds_',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'setBidExtensionSeconds',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'bidExtensionWindowLengthSeconds_',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'setBidExtensionWindowLengthSeconds',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'minBidIncrement_', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMinBidIncrement',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'repossessor_', internalType: 'address', type: 'address' },
    ],
    name: 'setRepossessor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'startingBid_', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setStartingBid',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'startingBid',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'withdrawCollateral',
    outputs: [],
  },
] as const

/**
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xeA45b8aE461c840c1B2965ffeDA5C2a11594E1c1)
 */
export const englishPeriodicAuctionFacetAddress = {
  100: '0xeA45b8aE461c840c1B2965ffeDA5C2a11594E1c1',
  11155420: '0xD0c22495c5C39faf0061d92Aa1D467303E715147',
} as const

/**
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xeA45b8aE461c840c1B2965ffeDA5C2a11594E1c1)
 */
export const englishPeriodicAuctionFacetConfig = {
  address: englishPeriodicAuctionFacetAddress,
  abi: englishPeriodicAuctionFacetABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IDABeneficiaryFacet
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x59aEeFC8421D59f260a5E5b959BFcc86B59C8415)
 */
export const idaBeneficiaryFacetABI = [
  { type: 'error', inputs: [], name: 'ERC165Base__InvalidInterfaceId' },
  { type: 'error', inputs: [], name: 'UintUtils__InsufficientHexLength' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'subscriber',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'units',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
    ],
    name: 'BeneficiaryUnitsUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Distributed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'previousAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'newAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'RoleAdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleRevoked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'token',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'TokenSet',
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [],
    name: 'distribute',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_token', internalType: 'contract ISETH', type: 'address' },
      {
        name: '_beneficiaries',
        internalType: 'struct IIDABeneficiaryInternal.Beneficiary[]',
        type: 'tuple[]',
        components: [
          { name: 'subscriber', internalType: 'address', type: 'address' },
          { name: 'units', internalType: 'uint128', type: 'uint128' },
        ],
      },
    ],
    name: 'initializeIDABeneficiary',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_owner', internalType: 'address', type: 'address' },
      { name: '_token', internalType: 'contract ISETH', type: 'address' },
      {
        name: '_beneficiaries',
        internalType: 'struct IIDABeneficiaryInternal.Beneficiary[]',
        type: 'tuple[]',
        components: [
          { name: 'subscriber', internalType: 'address', type: 'address' },
          { name: 'units', internalType: 'uint128', type: 'uint128' },
        ],
      },
    ],
    name: 'initializeIDABeneficiary',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_beneficiaries',
        internalType: 'struct IIDABeneficiaryInternal.Beneficiary[]',
        type: 'tuple[]',
        components: [
          { name: 'subscriber', internalType: 'address', type: 'address' },
          { name: 'units', internalType: 'uint128', type: 'uint128' },
        ],
      },
    ],
    name: 'updateBeneficiaryUnits',
    outputs: [],
  },
] as const

/**
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x59aEeFC8421D59f260a5E5b959BFcc86B59C8415)
 */
export const idaBeneficiaryFacetAddress = {
  100: '0x59aEeFC8421D59f260a5E5b959BFcc86B59C8415',
  11155420: '0x01D300492Ed14BF0965ceD7Ad5de1F48Bc5DC17A',
} as const

/**
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x59aEeFC8421D59f260a5E5b959BFcc86B59C8415)
 */
export const idaBeneficiaryFacetConfig = {
  address: idaBeneficiaryFacetAddress,
  abi: idaBeneficiaryFacetABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// NativeStewardLicenseFacet
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3A62C85a8629f81124E2dBA3FaBE63880533D5D7)
 */
export const nativeStewardLicenseFacetABI = [
  { type: 'error', inputs: [], name: 'AddressUtils__NotContract' },
  { type: 'error', inputs: [], name: 'ERC165Base__InvalidInterfaceId' },
  { type: 'error', inputs: [], name: 'ERC721Base__BalanceQueryZeroAddress' },
  {
    type: 'error',
    inputs: [],
    name: 'ERC721Base__ERC721ReceiverNotImplemented',
  },
  { type: 'error', inputs: [], name: 'ERC721Base__InvalidOwner' },
  { type: 'error', inputs: [], name: 'ERC721Base__MintToZeroAddress' },
  { type: 'error', inputs: [], name: 'ERC721Base__NonExistentToken' },
  { type: 'error', inputs: [], name: 'ERC721Base__NotOwnerOrApproved' },
  { type: 'error', inputs: [], name: 'ERC721Base__NotTokenOwner' },
  { type: 'error', inputs: [], name: 'ERC721Base__SelfApproval' },
  { type: 'error', inputs: [], name: 'ERC721Base__TokenAlreadyMinted' },
  { type: 'error', inputs: [], name: 'ERC721Base__TransferToZeroAddress' },
  { type: 'error', inputs: [], name: 'ERC721Metadata__NonExistentToken' },
  { type: 'error', inputs: [], name: 'EnumerableMap__IndexOutOfBounds' },
  { type: 'error', inputs: [], name: 'EnumerableMap__NonExistentKey' },
  { type: 'error', inputs: [], name: 'EnumerableSet__IndexOutOfBounds' },
  { type: 'error', inputs: [], name: 'UintUtils__InsufficientHexLength' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'previousAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'newAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'RoleAdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleRevoked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenURI', internalType: 'string', type: 'string' },
      {
        name: 'tokenInitialPeriodStartTime',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'addTokenToCollection',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenURIs', internalType: 'string[]', type: 'string[]' },
      {
        name: 'tokenInitialPeriodStartTimes',
        internalType: 'uint256[]',
        type: 'uint256[]',
      },
      { name: 'shouldMint', internalType: 'bool', type: 'bool' },
    ],
    name: 'addTokensToCollection',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address[]', type: 'address[]' },
      { name: 'tokenURIs', internalType: 'string[]', type: 'string[]' },
      {
        name: 'tokenInitialPeriodStartTimes',
        internalType: 'uint256[]',
        type: 'uint256[]',
      },
    ],
    name: 'addTokensToCollection',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'amount', internalType: 'uint32', type: 'uint32' },
      {
        name: 'initialPeriodStartTime',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: 'initialPeriodStartTimeOffset',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'baseURI', internalType: 'string', type: 'string' },
      { name: 'shouldMint', internalType: 'bool', type: 'bool' },
    ],
    name: 'addTokensWithBaseURIToCollection',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'exists',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'minter_', internalType: 'address', type: 'address' },
      {
        name: 'addToCollectionMinter_',
        internalType: 'address',
        type: 'address',
      },
      { name: 'steward_', internalType: 'address', type: 'address' },
      { name: 'maxTokenCount_', internalType: 'uint256', type: 'uint256' },
      { name: 'shouldMint', internalType: 'bool', type: 'bool' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'baseURI', internalType: 'string', type: 'string' },
    ],
    name: 'initializeStewardLicense',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'maxTokenCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mintToken',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'minter',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'status', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tokenOfOwnerByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'triggerTransfer',
    outputs: [],
  },
] as const

/**
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3A62C85a8629f81124E2dBA3FaBE63880533D5D7)
 */
export const nativeStewardLicenseFacetAddress = {
  100: '0x3A62C85a8629f81124E2dBA3FaBE63880533D5D7',
  11155420: '0x679C23c0E16DCDf2111256689078Ec50121f2A0F',
} as const

/**
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3A62C85a8629f81124E2dBA3FaBE63880533D5D7)
 */
export const nativeStewardLicenseFacetConfig = {
  address: nativeStewardLicenseFacetAddress,
  abi: nativeStewardLicenseFacetABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PeriodicPCOParamsFacet
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xFfbd1FF3cEc7B5Ae502f1E62c7E1291C3110Da8C)
 */
export const periodicPcoParamsFacetABI = [
  { type: 'error', inputs: [], name: 'ERC165Base__InvalidInterfaceId' },
  { type: 'error', inputs: [], name: 'UintUtils__InsufficientHexLength' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feeDenominator',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'FeeDenominatorSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feeNumerator',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'FeeNumeratorSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'licensePeriod',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'LicensePeriodSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'previousAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'newAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'RoleAdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleRevoked',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'feeDenominator',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'feeNumerator',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner_', internalType: 'address', type: 'address' },
      { name: 'licensePeriod_', internalType: 'uint256', type: 'uint256' },
      { name: 'feeNumerator_', internalType: 'uint256', type: 'uint256' },
      { name: 'feeDenominator_', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'initializePCOParams',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'licensePeriod_', internalType: 'uint256', type: 'uint256' },
      { name: 'feeNumerator_', internalType: 'uint256', type: 'uint256' },
      { name: 'feeDenominator_', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'initializePCOParams',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'licensePeriod',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feeDenominator_', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setFeeDenominator',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feeNumerator_', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setFeeNumerator',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'licensePeriod_', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setLicensePeriod',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'licensePeriod_', internalType: 'uint256', type: 'uint256' },
      { name: 'feeNumerator_', internalType: 'uint256', type: 'uint256' },
      { name: 'feeDenominator_', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setPCOParameters',
    outputs: [],
  },
] as const

/**
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xFfbd1FF3cEc7B5Ae502f1E62c7E1291C3110Da8C)
 */
export const periodicPcoParamsFacetAddress = {
  100: '0xFfbd1FF3cEc7B5Ae502f1E62c7E1291C3110Da8C',
  11155420: '0x53e0115b48E25FCd18a756Fe4FAf3d083e91eF33',
} as const

/**
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xFfbd1FF3cEc7B5Ae502f1E62c7E1291C3110Da8C)
 */
export const periodicPcoParamsFacetConfig = {
  address: periodicPcoParamsFacetAddress,
  abi: periodicPcoParamsFacetABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// WrappedERC721StewardLicenseFacet
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3e5D445B6C0F095121EBc91D55C386f195Ff1Af4)
 */
export const wrappedErc721StewardLicenseFacetABI = [
  { type: 'error', inputs: [], name: 'AddressUtils__NotContract' },
  { type: 'error', inputs: [], name: 'ERC165Base__InvalidInterfaceId' },
  { type: 'error', inputs: [], name: 'ERC721Base__BalanceQueryZeroAddress' },
  {
    type: 'error',
    inputs: [],
    name: 'ERC721Base__ERC721ReceiverNotImplemented',
  },
  { type: 'error', inputs: [], name: 'ERC721Base__InvalidOwner' },
  { type: 'error', inputs: [], name: 'ERC721Base__MintToZeroAddress' },
  { type: 'error', inputs: [], name: 'ERC721Base__NonExistentToken' },
  { type: 'error', inputs: [], name: 'ERC721Base__NotOwnerOrApproved' },
  { type: 'error', inputs: [], name: 'ERC721Base__NotTokenOwner' },
  { type: 'error', inputs: [], name: 'ERC721Base__SelfApproval' },
  { type: 'error', inputs: [], name: 'ERC721Base__TokenAlreadyMinted' },
  { type: 'error', inputs: [], name: 'ERC721Base__TransferToZeroAddress' },
  { type: 'error', inputs: [], name: 'ERC721Metadata__NonExistentToken' },
  { type: 'error', inputs: [], name: 'EnumerableMap__IndexOutOfBounds' },
  { type: 'error', inputs: [], name: 'EnumerableMap__NonExistentKey' },
  { type: 'error', inputs: [], name: 'EnumerableSet__IndexOutOfBounds' },
  { type: 'error', inputs: [], name: 'UintUtils__InsufficientHexLength' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'previousAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'newAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'RoleAdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleRevoked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenURI', internalType: 'string', type: 'string' },
      {
        name: 'tokenInitialPeriodStartTime',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'addTokenToCollection',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenURIs', internalType: 'string[]', type: 'string[]' },
      {
        name: 'tokenInitialPeriodStartTimes',
        internalType: 'uint256[]',
        type: 'uint256[]',
      },
      { name: 'shouldMint', internalType: 'bool', type: 'bool' },
    ],
    name: 'addTokensToCollection',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address[]', type: 'address[]' },
      { name: 'tokenURIs', internalType: 'string[]', type: 'string[]' },
      {
        name: 'tokenInitialPeriodStartTimes',
        internalType: 'uint256[]',
        type: 'uint256[]',
      },
    ],
    name: 'addTokensToCollection',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'amount', internalType: 'uint32', type: 'uint32' },
      {
        name: 'initialPeriodStartTime',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: 'initialPeriodStartTimeOffset',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'baseURI', internalType: 'string', type: 'string' },
      { name: 'shouldMint', internalType: 'bool', type: 'bool' },
    ],
    name: 'addTokensWithBaseURIToCollection',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'exists',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenAddress', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'minter_', internalType: 'address', type: 'address' },
      {
        name: 'addToCollectionMinter_',
        internalType: 'address',
        type: 'address',
      },
      { name: 'steward_', internalType: 'address', type: 'address' },
      { name: 'maxTokenCount_', internalType: 'uint256', type: 'uint256' },
      { name: 'shouldMint', internalType: 'bool', type: 'bool' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'tokenURI', internalType: 'string', type: 'string' },
    ],
    name: 'initializeWrappedStewardLicense',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'maxTokenCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mintToken',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'minter',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC721Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'status', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tokenOfOwnerByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'triggerTransfer',
    outputs: [],
  },
] as const

/**
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3e5D445B6C0F095121EBc91D55C386f195Ff1Af4)
 */
export const wrappedErc721StewardLicenseFacetAddress = {
  100: '0x3e5D445B6C0F095121EBc91D55C386f195Ff1Af4',
  11155420: '0x8f0fF28Ce206C12248bBa64D7f72Fc6959a2717e',
} as const

/**
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3e5D445B6C0F095121EBc91D55C386f195Ff1Af4)
 */
export const wrappedErc721StewardLicenseFacetConfig = {
  address: wrappedErc721StewardLicenseFacetAddress,
  abi: wrappedErc721StewardLicenseFacetABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// WrappedERC1155StewardLicenseFacet
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc749Ac2EA598D55D43A2FfEcB1D0753D7a9Ec560)
 */
export const wrappedErc1155StewardLicenseFacetABI = [
  { type: 'error', inputs: [], name: 'AddressUtils__NotContract' },
  { type: 'error', inputs: [], name: 'ERC165Base__InvalidInterfaceId' },
  { type: 'error', inputs: [], name: 'ERC721Base__BalanceQueryZeroAddress' },
  {
    type: 'error',
    inputs: [],
    name: 'ERC721Base__ERC721ReceiverNotImplemented',
  },
  { type: 'error', inputs: [], name: 'ERC721Base__InvalidOwner' },
  { type: 'error', inputs: [], name: 'ERC721Base__MintToZeroAddress' },
  { type: 'error', inputs: [], name: 'ERC721Base__NonExistentToken' },
  { type: 'error', inputs: [], name: 'ERC721Base__NotOwnerOrApproved' },
  { type: 'error', inputs: [], name: 'ERC721Base__NotTokenOwner' },
  { type: 'error', inputs: [], name: 'ERC721Base__SelfApproval' },
  { type: 'error', inputs: [], name: 'ERC721Base__TokenAlreadyMinted' },
  { type: 'error', inputs: [], name: 'ERC721Base__TransferToZeroAddress' },
  { type: 'error', inputs: [], name: 'ERC721Metadata__NonExistentToken' },
  { type: 'error', inputs: [], name: 'EnumerableMap__IndexOutOfBounds' },
  { type: 'error', inputs: [], name: 'EnumerableMap__NonExistentKey' },
  { type: 'error', inputs: [], name: 'EnumerableSet__IndexOutOfBounds' },
  { type: 'error', inputs: [], name: 'UintUtils__InsufficientHexLength' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'previousAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'newAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'RoleAdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleRevoked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenURI', internalType: 'string', type: 'string' },
      {
        name: 'tokenInitialPeriodStartTime',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'addTokenToCollection',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenURIs', internalType: 'string[]', type: 'string[]' },
      {
        name: 'tokenInitialPeriodStartTimes',
        internalType: 'uint256[]',
        type: 'uint256[]',
      },
      { name: 'shouldMint', internalType: 'bool', type: 'bool' },
    ],
    name: 'addTokensToCollection',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address[]', type: 'address[]' },
      { name: 'tokenURIs', internalType: 'string[]', type: 'string[]' },
      {
        name: 'tokenInitialPeriodStartTimes',
        internalType: 'uint256[]',
        type: 'uint256[]',
      },
    ],
    name: 'addTokensToCollection',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'amount', internalType: 'uint32', type: 'uint32' },
      {
        name: 'initialPeriodStartTime',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: 'initialPeriodStartTimeOffset',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'baseURI', internalType: 'string', type: 'string' },
      { name: 'shouldMint', internalType: 'bool', type: 'bool' },
    ],
    name: 'addTokensWithBaseURIToCollection',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'exists',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenAddress', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'minter_', internalType: 'address', type: 'address' },
      {
        name: 'addToCollectionMinter_',
        internalType: 'address',
        type: 'address',
      },
      { name: 'steward_', internalType: 'address', type: 'address' },
      { name: 'maxTokenCount_', internalType: 'uint256', type: 'uint256' },
      { name: 'shouldMint', internalType: 'bool', type: 'bool' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'tokenURI', internalType: 'string', type: 'string' },
    ],
    name: 'initializeWrappedStewardLicense',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'maxTokenCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mintToken',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'minter',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155BatchReceived',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'status', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tokenOfOwnerByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'triggerTransfer',
    outputs: [],
  },
] as const

/**
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc749Ac2EA598D55D43A2FfEcB1D0753D7a9Ec560)
 */
export const wrappedErc1155StewardLicenseFacetAddress = {
  100: '0xc749Ac2EA598D55D43A2FfEcB1D0753D7a9Ec560',
  11155420: '0x2B24b289dD3A8FD13a2E88d09E92a8a027f96E20',
} as const

/**
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc749Ac2EA598D55D43A2FfEcB1D0753D7a9Ec560)
 */
export const wrappedErc1155StewardLicenseFacetConfig = {
  address: wrappedErc1155StewardLicenseFacetAddress,
  abi: wrappedErc1155StewardLicenseFacetABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AccessControlFacet
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc90eDF9848f8dcf557e83Bc2020B6F7d286321B5)
 */
export const accessControlFacetABI = [
  { type: 'error', inputs: [], name: 'EnumerableSet__IndexOutOfBounds' },
  { type: 'error', inputs: [], name: 'UintUtils__InsufficientHexLength' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'previousAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'newAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'RoleAdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleRevoked',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getRoleMember',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleMemberCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'admin', internalType: 'address', type: 'address' }],
    name: 'initializeAccessControl',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
] as const

/**
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc90eDF9848f8dcf557e83Bc2020B6F7d286321B5)
 */
export const accessControlFacetAddress = {
  100: '0xc90eDF9848f8dcf557e83Bc2020B6F7d286321B5',
  11155420: '0xd4EEeDa989CcbE378A1c2863BF6C8395428C2bf4',
} as const

/**
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc90eDF9848f8dcf557e83Bc2020B6F7d286321B5)
 */
export const accessControlFacetConfig = {
  address: accessControlFacetAddress,
  abi: accessControlFacetABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SingleCutDiamondFactory
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x44FC178BA2361b25f3C6D6FDcAc20F80d0961FB0)
 */
export const singleCutDiamondFactoryABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'diamondAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'DiamondCreated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'facetInits',
        internalType: 'struct IDiamond.FacetInit[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'initTarget', internalType: 'address', type: 'address' },
          { name: 'initData', internalType: 'bytes', type: 'bytes' },
          { name: 'selectors', internalType: 'bytes4[]', type: 'bytes4[]' },
        ],
      },
    ],
    name: 'createDiamond',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
] as const

/**
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x44FC178BA2361b25f3C6D6FDcAc20F80d0961FB0)
 */
export const singleCutDiamondFactoryAddress = {
  100: '0x44FC178BA2361b25f3C6D6FDcAc20F80d0961FB0',
  11155420: '0x5B02B3249D2a135A9Caa6E5E9a911CD5F91057E8',
} as const

/**
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x44FC178BA2361b25f3C6D6FDcAc20F80d0961FB0)
 */
export const singleCutDiamondFactoryConfig = {
  address: singleCutDiamondFactoryAddress,
  abi: singleCutDiamondFactoryABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// OwnableDiamondFactoryABI
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xd75292Ce17Ed419C6231FBc73E54356F30803e5F)
 */
export const ownableDiamondFactoryAbiABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'diamondAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'DiamondCreated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'facetInits',
        internalType: 'struct IDiamond.FacetInit[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'initTarget', internalType: 'address', type: 'address' },
          { name: 'initData', internalType: 'bytes', type: 'bytes' },
          { name: 'selectors', internalType: 'bytes4[]', type: 'bytes4[]' },
        ],
      },
    ],
    name: 'createDiamond',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
] as const

/**
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xd75292Ce17Ed419C6231FBc73E54356F30803e5F)
 */
export const ownableDiamondFactoryAbiAddress = {
  100: '0xd75292Ce17Ed419C6231FBc73E54356F30803e5F',
  11155420: '0x5e713Bf2B84303f004464CC624FCF713cB0c0131',
} as const

/**
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xd75292Ce17Ed419C6231FBc73E54356F30803e5F)
 */
export const ownableDiamondFactoryAbiConfig = {
  address: ownableDiamondFactoryAbiAddress,
  abi: ownableDiamondFactoryAbiABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: erc20ABI, ...config } as UseContractReadConfig<
    typeof erc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20Allowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20BalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20Decimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"name"`.
 */
export function useErc20Name<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20Symbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20TotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Write<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20ABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof erc20ABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof erc20ABI, TFunctionName, TMode>({
    abi: erc20ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20Approve<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20ABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof erc20ABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof erc20ABI, 'approve', TMode>({
    abi: erc20ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20Transfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20ABI,
          'transfer'
        >['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof erc20ABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<typeof erc20ABI, 'transfer', TMode>({
    abi: erc20ABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20TransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20ABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof erc20ABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof erc20ABI, 'transferFrom', TMode>({
    abi: erc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function usePrepareErc20Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20Transfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ethXABI}__.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x59988e47A3503AaFaA0368b9deF095c818Fdca01)
 */
export function useEthXRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ethXABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ethXABI, TFunctionName, TSelectData>,
    'abi' | 'address'
  > & { chainId?: keyof typeof ethXAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: ethXABI,
    address: ethXAddress[chainId as keyof typeof ethXAddress],
    ...config,
  } as UseContractReadConfig<typeof ethXABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ethXABI}__ and `functionName` set to `"allowance"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x59988e47A3503AaFaA0368b9deF095c818Fdca01)
 */
export function useEthXAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof ethXABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ethXABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof ethXAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: ethXABI,
    address: ethXAddress[chainId as keyof typeof ethXAddress],
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof ethXABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ethXABI}__ and `functionName` set to `"balanceOf"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x59988e47A3503AaFaA0368b9deF095c818Fdca01)
 */
export function useEthXBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof ethXABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ethXABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof ethXAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: ethXABI,
    address: ethXAddress[chainId as keyof typeof ethXAddress],
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof ethXABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ethXABI}__ and `functionName` set to `"decimals"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x59988e47A3503AaFaA0368b9deF095c818Fdca01)
 */
export function useEthXDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof ethXABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ethXABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof ethXAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: ethXABI,
    address: ethXAddress[chainId as keyof typeof ethXAddress],
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<typeof ethXABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ethXABI}__ and `functionName` set to `"name"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x59988e47A3503AaFaA0368b9deF095c818Fdca01)
 */
export function useEthXName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof ethXABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ethXABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof ethXAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: ethXABI,
    address: ethXAddress[chainId as keyof typeof ethXAddress],
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof ethXABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ethXABI}__ and `functionName` set to `"symbol"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x59988e47A3503AaFaA0368b9deF095c818Fdca01)
 */
export function useEthXSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof ethXABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ethXABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof ethXAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: ethXABI,
    address: ethXAddress[chainId as keyof typeof ethXAddress],
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof ethXABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ethXABI}__ and `functionName` set to `"totalSupply"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x59988e47A3503AaFaA0368b9deF095c818Fdca01)
 */
export function useEthXTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof ethXABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ethXABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof ethXAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: ethXABI,
    address: ethXAddress[chainId as keyof typeof ethXAddress],
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof ethXABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ethXABI}__.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x59988e47A3503AaFaA0368b9deF095c818Fdca01)
 */
export function useEthXWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof ethXAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ethXABI, string>['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<typeof ethXABI, TFunctionName, TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof ethXABI, TFunctionName, TMode>({
    abi: ethXABI,
    address: ethXAddress[chainId as keyof typeof ethXAddress],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ethXABI}__ and `functionName` set to `"approve"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x59988e47A3503AaFaA0368b9deF095c818Fdca01)
 */
export function useEthXApprove<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof ethXAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ethXABI, 'approve'>['request']['abi'],
        'approve',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'approve' }
    : UseContractWriteConfig<typeof ethXABI, 'approve', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'approve'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof ethXABI, 'approve', TMode>({
    abi: ethXABI,
    address: ethXAddress[chainId as keyof typeof ethXAddress],
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ethXABI}__ and `functionName` set to `"transfer"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x59988e47A3503AaFaA0368b9deF095c818Fdca01)
 */
export function useEthXTransfer<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof ethXAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ethXABI,
          'transfer'
        >['request']['abi'],
        'transfer',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'transfer' }
    : UseContractWriteConfig<typeof ethXABI, 'transfer', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'transfer'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof ethXABI, 'transfer', TMode>({
    abi: ethXABI,
    address: ethXAddress[chainId as keyof typeof ethXAddress],
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ethXABI}__ and `functionName` set to `"transferFrom"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x59988e47A3503AaFaA0368b9deF095c818Fdca01)
 */
export function useEthXTransferFrom<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof ethXAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ethXABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'transferFrom'
      }
    : UseContractWriteConfig<typeof ethXABI, 'transferFrom', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'transferFrom'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof ethXABI, 'transferFrom', TMode>({
    abi: ethXABI,
    address: ethXAddress[chainId as keyof typeof ethXAddress],
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ethXABI}__.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x59988e47A3503AaFaA0368b9deF095c818Fdca01)
 */
export function usePrepareEthXWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ethXABI, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof ethXAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: ethXABI,
    address: ethXAddress[chainId as keyof typeof ethXAddress],
    ...config,
  } as UsePrepareContractWriteConfig<typeof ethXABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ethXABI}__ and `functionName` set to `"approve"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x59988e47A3503AaFaA0368b9deF095c818Fdca01)
 */
export function usePrepareEthXApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ethXABI, 'approve'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof ethXAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: ethXABI,
    address: ethXAddress[chainId as keyof typeof ethXAddress],
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ethXABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ethXABI}__ and `functionName` set to `"transfer"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x59988e47A3503AaFaA0368b9deF095c818Fdca01)
 */
export function usePrepareEthXTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ethXABI, 'transfer'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof ethXAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: ethXABI,
    address: ethXAddress[chainId as keyof typeof ethXAddress],
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ethXABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ethXABI}__ and `functionName` set to `"transferFrom"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x59988e47A3503AaFaA0368b9deF095c818Fdca01)
 */
export function usePrepareEthXTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ethXABI, 'transferFrom'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof ethXAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: ethXABI,
    address: ethXAddress[chainId as keyof typeof ethXAddress],
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ethXABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ethXABI}__.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x59988e47A3503AaFaA0368b9deF095c818Fdca01)
 */
export function useEthXEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ethXABI, TEventName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof ethXAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: ethXABI,
    address: ethXAddress[chainId as keyof typeof ethXAddress],
    ...config,
  } as UseContractEventConfig<typeof ethXABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ethXABI}__ and `eventName` set to `"Approval"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x59988e47A3503AaFaA0368b9deF095c818Fdca01)
 */
export function useEthXApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ethXABI, 'Approval'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof ethXAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: ethXABI,
    address: ethXAddress[chainId as keyof typeof ethXAddress],
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof ethXABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ethXABI}__ and `eventName` set to `"Transfer"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x59988e47A3503AaFaA0368b9deF095c818Fdca01)
 */
export function useEthXTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ethXABI, 'Transfer'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof ethXAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: ethXABI,
    address: ethXAddress[chainId as keyof typeof ethXAddress],
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof ethXABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link singleCutDiamondABI}__.
 */
export function useSingleCutDiamondRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof singleCutDiamondABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof singleCutDiamondABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: singleCutDiamondABI,
    ...config,
  } as UseContractReadConfig<
    typeof singleCutDiamondABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link singleCutDiamondABI}__ and `functionName` set to `"facetAddress"`.
 */
export function useSingleCutDiamondFacetAddress<
  TFunctionName extends 'facetAddress',
  TSelectData = ReadContractResult<typeof singleCutDiamondABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof singleCutDiamondABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: singleCutDiamondABI,
    functionName: 'facetAddress',
    ...config,
  } as UseContractReadConfig<
    typeof singleCutDiamondABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link singleCutDiamondABI}__ and `functionName` set to `"facetAddresses"`.
 */
export function useSingleCutDiamondFacetAddresses<
  TFunctionName extends 'facetAddresses',
  TSelectData = ReadContractResult<typeof singleCutDiamondABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof singleCutDiamondABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: singleCutDiamondABI,
    functionName: 'facetAddresses',
    ...config,
  } as UseContractReadConfig<
    typeof singleCutDiamondABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link singleCutDiamondABI}__ and `functionName` set to `"facetFunctionSelectors"`.
 */
export function useSingleCutDiamondFacetFunctionSelectors<
  TFunctionName extends 'facetFunctionSelectors',
  TSelectData = ReadContractResult<typeof singleCutDiamondABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof singleCutDiamondABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: singleCutDiamondABI,
    functionName: 'facetFunctionSelectors',
    ...config,
  } as UseContractReadConfig<
    typeof singleCutDiamondABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link singleCutDiamondABI}__ and `functionName` set to `"facets"`.
 */
export function useSingleCutDiamondFacets<
  TFunctionName extends 'facets',
  TSelectData = ReadContractResult<typeof singleCutDiamondABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof singleCutDiamondABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: singleCutDiamondABI,
    functionName: 'facets',
    ...config,
  } as UseContractReadConfig<
    typeof singleCutDiamondABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link singleCutDiamondABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useSingleCutDiamondSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof singleCutDiamondABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof singleCutDiamondABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: singleCutDiamondABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof singleCutDiamondABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link singleCutDiamondABI}__.
 */
export function useSingleCutDiamondEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof singleCutDiamondABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: singleCutDiamondABI,
    ...config,
  } as UseContractEventConfig<typeof singleCutDiamondABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link singleCutDiamondABI}__ and `eventName` set to `"DiamondCut"`.
 */
export function useSingleCutDiamondDiamondCutEvent(
  config: Omit<
    UseContractEventConfig<typeof singleCutDiamondABI, 'DiamondCut'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: singleCutDiamondABI,
    eventName: 'DiamondCut',
    ...config,
  } as UseContractEventConfig<typeof singleCutDiamondABI, 'DiamondCut'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link allowlistFacetABI}__.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xe8393C4ea1Bd9D5fB81E17dA4D035D3Db714Ef96)
 */
export function useAllowlistFacetRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof allowlistFacetABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof allowlistFacetABI, TFunctionName, TSelectData>,
    'abi' | 'address'
  > & { chainId?: keyof typeof allowlistFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: allowlistFacetABI,
    address:
      allowlistFacetAddress[chainId as keyof typeof allowlistFacetAddress],
    ...config,
  } as UseContractReadConfig<
    typeof allowlistFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link allowlistFacetABI}__ and `functionName` set to `"getAllowAny"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xe8393C4ea1Bd9D5fB81E17dA4D035D3Db714Ef96)
 */
export function useAllowlistFacetGetAllowAny<
  TFunctionName extends 'getAllowAny',
  TSelectData = ReadContractResult<typeof allowlistFacetABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof allowlistFacetABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof allowlistFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: allowlistFacetABI,
    address:
      allowlistFacetAddress[chainId as keyof typeof allowlistFacetAddress],
    functionName: 'getAllowAny',
    ...config,
  } as UseContractReadConfig<
    typeof allowlistFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link allowlistFacetABI}__ and `functionName` set to `"getAllowlist"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xe8393C4ea1Bd9D5fB81E17dA4D035D3Db714Ef96)
 */
export function useAllowlistFacetGetAllowlist<
  TFunctionName extends 'getAllowlist',
  TSelectData = ReadContractResult<typeof allowlistFacetABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof allowlistFacetABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof allowlistFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: allowlistFacetABI,
    address:
      allowlistFacetAddress[chainId as keyof typeof allowlistFacetAddress],
    functionName: 'getAllowlist',
    ...config,
  } as UseContractReadConfig<
    typeof allowlistFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link allowlistFacetABI}__ and `functionName` set to `"isAllowed"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xe8393C4ea1Bd9D5fB81E17dA4D035D3Db714Ef96)
 */
export function useAllowlistFacetIsAllowed<
  TFunctionName extends 'isAllowed',
  TSelectData = ReadContractResult<typeof allowlistFacetABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof allowlistFacetABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof allowlistFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: allowlistFacetABI,
    address:
      allowlistFacetAddress[chainId as keyof typeof allowlistFacetAddress],
    functionName: 'isAllowed',
    ...config,
  } as UseContractReadConfig<
    typeof allowlistFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link allowlistFacetABI}__.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xe8393C4ea1Bd9D5fB81E17dA4D035D3Db714Ef96)
 */
export function useAllowlistFacetWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof allowlistFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof allowlistFacetABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<typeof allowlistFacetABI, TFunctionName, TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof allowlistFacetABI, TFunctionName, TMode>({
    abi: allowlistFacetABI,
    address:
      allowlistFacetAddress[chainId as keyof typeof allowlistFacetAddress],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link allowlistFacetABI}__ and `functionName` set to `"addToAllowlist"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xe8393C4ea1Bd9D5fB81E17dA4D035D3Db714Ef96)
 */
export function useAllowlistFacetAddToAllowlist<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof allowlistFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof allowlistFacetABI,
          'addToAllowlist'
        >['request']['abi'],
        'addToAllowlist',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'addToAllowlist'
      }
    : UseContractWriteConfig<
        typeof allowlistFacetABI,
        'addToAllowlist',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'addToAllowlist'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof allowlistFacetABI, 'addToAllowlist', TMode>({
    abi: allowlistFacetABI,
    address:
      allowlistFacetAddress[chainId as keyof typeof allowlistFacetAddress],
    functionName: 'addToAllowlist',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link allowlistFacetABI}__ and `functionName` set to `"batchAddToAllowlist"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xe8393C4ea1Bd9D5fB81E17dA4D035D3Db714Ef96)
 */
export function useAllowlistFacetBatchAddToAllowlist<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof allowlistFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof allowlistFacetABI,
          'batchAddToAllowlist'
        >['request']['abi'],
        'batchAddToAllowlist',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'batchAddToAllowlist'
      }
    : UseContractWriteConfig<
        typeof allowlistFacetABI,
        'batchAddToAllowlist',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'batchAddToAllowlist'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof allowlistFacetABI,
    'batchAddToAllowlist',
    TMode
  >({
    abi: allowlistFacetABI,
    address:
      allowlistFacetAddress[chainId as keyof typeof allowlistFacetAddress],
    functionName: 'batchAddToAllowlist',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link allowlistFacetABI}__ and `functionName` set to `"batchRemoveFromAllowlist"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xe8393C4ea1Bd9D5fB81E17dA4D035D3Db714Ef96)
 */
export function useAllowlistFacetBatchRemoveFromAllowlist<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof allowlistFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof allowlistFacetABI,
          'batchRemoveFromAllowlist'
        >['request']['abi'],
        'batchRemoveFromAllowlist',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'batchRemoveFromAllowlist'
      }
    : UseContractWriteConfig<
        typeof allowlistFacetABI,
        'batchRemoveFromAllowlist',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'batchRemoveFromAllowlist'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof allowlistFacetABI,
    'batchRemoveFromAllowlist',
    TMode
  >({
    abi: allowlistFacetABI,
    address:
      allowlistFacetAddress[chainId as keyof typeof allowlistFacetAddress],
    functionName: 'batchRemoveFromAllowlist',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link allowlistFacetABI}__ and `functionName` set to `"batchUpdateAllowlist"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xe8393C4ea1Bd9D5fB81E17dA4D035D3Db714Ef96)
 */
export function useAllowlistFacetBatchUpdateAllowlist<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof allowlistFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof allowlistFacetABI,
          'batchUpdateAllowlist'
        >['request']['abi'],
        'batchUpdateAllowlist',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'batchUpdateAllowlist'
      }
    : UseContractWriteConfig<
        typeof allowlistFacetABI,
        'batchUpdateAllowlist',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'batchUpdateAllowlist'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof allowlistFacetABI,
    'batchUpdateAllowlist',
    TMode
  >({
    abi: allowlistFacetABI,
    address:
      allowlistFacetAddress[chainId as keyof typeof allowlistFacetAddress],
    functionName: 'batchUpdateAllowlist',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link allowlistFacetABI}__ and `functionName` set to `"initializeAllowlist"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xe8393C4ea1Bd9D5fB81E17dA4D035D3Db714Ef96)
 */
export function useAllowlistFacetInitializeAllowlist<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof allowlistFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof allowlistFacetABI,
          'initializeAllowlist'
        >['request']['abi'],
        'initializeAllowlist',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'initializeAllowlist'
      }
    : UseContractWriteConfig<
        typeof allowlistFacetABI,
        'initializeAllowlist',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'initializeAllowlist'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof allowlistFacetABI,
    'initializeAllowlist',
    TMode
  >({
    abi: allowlistFacetABI,
    address:
      allowlistFacetAddress[chainId as keyof typeof allowlistFacetAddress],
    functionName: 'initializeAllowlist',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link allowlistFacetABI}__ and `functionName` set to `"removeFromAllowlist"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xe8393C4ea1Bd9D5fB81E17dA4D035D3Db714Ef96)
 */
export function useAllowlistFacetRemoveFromAllowlist<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof allowlistFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof allowlistFacetABI,
          'removeFromAllowlist'
        >['request']['abi'],
        'removeFromAllowlist',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'removeFromAllowlist'
      }
    : UseContractWriteConfig<
        typeof allowlistFacetABI,
        'removeFromAllowlist',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'removeFromAllowlist'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof allowlistFacetABI,
    'removeFromAllowlist',
    TMode
  >({
    abi: allowlistFacetABI,
    address:
      allowlistFacetAddress[chainId as keyof typeof allowlistFacetAddress],
    functionName: 'removeFromAllowlist',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link allowlistFacetABI}__ and `functionName` set to `"setAllowAny"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xe8393C4ea1Bd9D5fB81E17dA4D035D3Db714Ef96)
 */
export function useAllowlistFacetSetAllowAny<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof allowlistFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof allowlistFacetABI,
          'setAllowAny'
        >['request']['abi'],
        'setAllowAny',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'setAllowAny'
      }
    : UseContractWriteConfig<typeof allowlistFacetABI, 'setAllowAny', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setAllowAny'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof allowlistFacetABI, 'setAllowAny', TMode>({
    abi: allowlistFacetABI,
    address:
      allowlistFacetAddress[chainId as keyof typeof allowlistFacetAddress],
    functionName: 'setAllowAny',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link allowlistFacetABI}__.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xe8393C4ea1Bd9D5fB81E17dA4D035D3Db714Ef96)
 */
export function usePrepareAllowlistFacetWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof allowlistFacetABI, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof allowlistFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: allowlistFacetABI,
    address:
      allowlistFacetAddress[chainId as keyof typeof allowlistFacetAddress],
    ...config,
  } as UsePrepareContractWriteConfig<typeof allowlistFacetABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link allowlistFacetABI}__ and `functionName` set to `"addToAllowlist"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xe8393C4ea1Bd9D5fB81E17dA4D035D3Db714Ef96)
 */
export function usePrepareAllowlistFacetAddToAllowlist(
  config: Omit<
    UsePrepareContractWriteConfig<typeof allowlistFacetABI, 'addToAllowlist'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof allowlistFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: allowlistFacetABI,
    address:
      allowlistFacetAddress[chainId as keyof typeof allowlistFacetAddress],
    functionName: 'addToAllowlist',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof allowlistFacetABI,
    'addToAllowlist'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link allowlistFacetABI}__ and `functionName` set to `"batchAddToAllowlist"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xe8393C4ea1Bd9D5fB81E17dA4D035D3Db714Ef96)
 */
export function usePrepareAllowlistFacetBatchAddToAllowlist(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof allowlistFacetABI,
      'batchAddToAllowlist'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof allowlistFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: allowlistFacetABI,
    address:
      allowlistFacetAddress[chainId as keyof typeof allowlistFacetAddress],
    functionName: 'batchAddToAllowlist',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof allowlistFacetABI,
    'batchAddToAllowlist'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link allowlistFacetABI}__ and `functionName` set to `"batchRemoveFromAllowlist"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xe8393C4ea1Bd9D5fB81E17dA4D035D3Db714Ef96)
 */
export function usePrepareAllowlistFacetBatchRemoveFromAllowlist(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof allowlistFacetABI,
      'batchRemoveFromAllowlist'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof allowlistFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: allowlistFacetABI,
    address:
      allowlistFacetAddress[chainId as keyof typeof allowlistFacetAddress],
    functionName: 'batchRemoveFromAllowlist',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof allowlistFacetABI,
    'batchRemoveFromAllowlist'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link allowlistFacetABI}__ and `functionName` set to `"batchUpdateAllowlist"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xe8393C4ea1Bd9D5fB81E17dA4D035D3Db714Ef96)
 */
export function usePrepareAllowlistFacetBatchUpdateAllowlist(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof allowlistFacetABI,
      'batchUpdateAllowlist'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof allowlistFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: allowlistFacetABI,
    address:
      allowlistFacetAddress[chainId as keyof typeof allowlistFacetAddress],
    functionName: 'batchUpdateAllowlist',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof allowlistFacetABI,
    'batchUpdateAllowlist'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link allowlistFacetABI}__ and `functionName` set to `"initializeAllowlist"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xe8393C4ea1Bd9D5fB81E17dA4D035D3Db714Ef96)
 */
export function usePrepareAllowlistFacetInitializeAllowlist(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof allowlistFacetABI,
      'initializeAllowlist'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof allowlistFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: allowlistFacetABI,
    address:
      allowlistFacetAddress[chainId as keyof typeof allowlistFacetAddress],
    functionName: 'initializeAllowlist',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof allowlistFacetABI,
    'initializeAllowlist'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link allowlistFacetABI}__ and `functionName` set to `"removeFromAllowlist"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xe8393C4ea1Bd9D5fB81E17dA4D035D3Db714Ef96)
 */
export function usePrepareAllowlistFacetRemoveFromAllowlist(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof allowlistFacetABI,
      'removeFromAllowlist'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof allowlistFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: allowlistFacetABI,
    address:
      allowlistFacetAddress[chainId as keyof typeof allowlistFacetAddress],
    functionName: 'removeFromAllowlist',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof allowlistFacetABI,
    'removeFromAllowlist'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link allowlistFacetABI}__ and `functionName` set to `"setAllowAny"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xe8393C4ea1Bd9D5fB81E17dA4D035D3Db714Ef96)
 */
export function usePrepareAllowlistFacetSetAllowAny(
  config: Omit<
    UsePrepareContractWriteConfig<typeof allowlistFacetABI, 'setAllowAny'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof allowlistFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: allowlistFacetABI,
    address:
      allowlistFacetAddress[chainId as keyof typeof allowlistFacetAddress],
    functionName: 'setAllowAny',
    ...config,
  } as UsePrepareContractWriteConfig<typeof allowlistFacetABI, 'setAllowAny'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link allowlistFacetABI}__.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xe8393C4ea1Bd9D5fB81E17dA4D035D3Db714Ef96)
 */
export function useAllowlistFacetEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof allowlistFacetABI, TEventName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof allowlistFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: allowlistFacetABI,
    address:
      allowlistFacetAddress[chainId as keyof typeof allowlistFacetAddress],
    ...config,
  } as UseContractEventConfig<typeof allowlistFacetABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link allowlistFacetABI}__ and `eventName` set to `"AllowAnyUpdated"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xe8393C4ea1Bd9D5fB81E17dA4D035D3Db714Ef96)
 */
export function useAllowlistFacetAllowAnyUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof allowlistFacetABI, 'AllowAnyUpdated'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof allowlistFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: allowlistFacetABI,
    address:
      allowlistFacetAddress[chainId as keyof typeof allowlistFacetAddress],
    eventName: 'AllowAnyUpdated',
    ...config,
  } as UseContractEventConfig<typeof allowlistFacetABI, 'AllowAnyUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link allowlistFacetABI}__ and `eventName` set to `"Allowlisted"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xe8393C4ea1Bd9D5fB81E17dA4D035D3Db714Ef96)
 */
export function useAllowlistFacetAllowlistedEvent(
  config: Omit<
    UseContractEventConfig<typeof allowlistFacetABI, 'Allowlisted'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof allowlistFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: allowlistFacetABI,
    address:
      allowlistFacetAddress[chainId as keyof typeof allowlistFacetAddress],
    eventName: 'Allowlisted',
    ...config,
  } as UseContractEventConfig<typeof allowlistFacetABI, 'Allowlisted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link allowlistFacetABI}__ and `eventName` set to `"BatchAllowlisted"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xe8393C4ea1Bd9D5fB81E17dA4D035D3Db714Ef96)
 */
export function useAllowlistFacetBatchAllowlistedEvent(
  config: Omit<
    UseContractEventConfig<typeof allowlistFacetABI, 'BatchAllowlisted'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof allowlistFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: allowlistFacetABI,
    address:
      allowlistFacetAddress[chainId as keyof typeof allowlistFacetAddress],
    eventName: 'BatchAllowlisted',
    ...config,
  } as UseContractEventConfig<typeof allowlistFacetABI, 'BatchAllowlisted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link allowlistFacetABI}__ and `eventName` set to `"BatchUnallowlisted"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xe8393C4ea1Bd9D5fB81E17dA4D035D3Db714Ef96)
 */
export function useAllowlistFacetBatchUnallowlistedEvent(
  config: Omit<
    UseContractEventConfig<typeof allowlistFacetABI, 'BatchUnallowlisted'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof allowlistFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: allowlistFacetABI,
    address:
      allowlistFacetAddress[chainId as keyof typeof allowlistFacetAddress],
    eventName: 'BatchUnallowlisted',
    ...config,
  } as UseContractEventConfig<typeof allowlistFacetABI, 'BatchUnallowlisted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link allowlistFacetABI}__ and `eventName` set to `"RoleAdminChanged"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xe8393C4ea1Bd9D5fB81E17dA4D035D3Db714Ef96)
 */
export function useAllowlistFacetRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof allowlistFacetABI, 'RoleAdminChanged'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof allowlistFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: allowlistFacetABI,
    address:
      allowlistFacetAddress[chainId as keyof typeof allowlistFacetAddress],
    eventName: 'RoleAdminChanged',
    ...config,
  } as UseContractEventConfig<typeof allowlistFacetABI, 'RoleAdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link allowlistFacetABI}__ and `eventName` set to `"RoleGranted"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xe8393C4ea1Bd9D5fB81E17dA4D035D3Db714Ef96)
 */
export function useAllowlistFacetRoleGrantedEvent(
  config: Omit<
    UseContractEventConfig<typeof allowlistFacetABI, 'RoleGranted'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof allowlistFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: allowlistFacetABI,
    address:
      allowlistFacetAddress[chainId as keyof typeof allowlistFacetAddress],
    eventName: 'RoleGranted',
    ...config,
  } as UseContractEventConfig<typeof allowlistFacetABI, 'RoleGranted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link allowlistFacetABI}__ and `eventName` set to `"RoleRevoked"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xe8393C4ea1Bd9D5fB81E17dA4D035D3Db714Ef96)
 */
export function useAllowlistFacetRoleRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof allowlistFacetABI, 'RoleRevoked'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof allowlistFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: allowlistFacetABI,
    address:
      allowlistFacetAddress[chainId as keyof typeof allowlistFacetAddress],
    eventName: 'RoleRevoked',
    ...config,
  } as UseContractEventConfig<typeof allowlistFacetABI, 'RoleRevoked'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link allowlistFacetABI}__ and `eventName` set to `"Unallowlisted"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xe8393C4ea1Bd9D5fB81E17dA4D035D3Db714Ef96)
 */
export function useAllowlistFacetUnallowlistedEvent(
  config: Omit<
    UseContractEventConfig<typeof allowlistFacetABI, 'Unallowlisted'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof allowlistFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: allowlistFacetABI,
    address:
      allowlistFacetAddress[chainId as keyof typeof allowlistFacetAddress],
    eventName: 'Unallowlisted',
    ...config,
  } as UseContractEventConfig<typeof allowlistFacetABI, 'Unallowlisted'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link englishPeriodicAuctionFacetABI}__.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xeA45b8aE461c840c1B2965ffeDA5C2a11594E1c1)
 */
export function useEnglishPeriodicAuctionFacetRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof englishPeriodicAuctionFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof englishPeriodicAuctionFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address'
  > & { chainId?: keyof typeof englishPeriodicAuctionFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: englishPeriodicAuctionFacetABI,
    address:
      englishPeriodicAuctionFacetAddress[
        chainId as keyof typeof englishPeriodicAuctionFacetAddress
      ],
    ...config,
  } as UseContractReadConfig<
    typeof englishPeriodicAuctionFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link englishPeriodicAuctionFacetABI}__ and `functionName` set to `"auctionEndTime"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xeA45b8aE461c840c1B2965ffeDA5C2a11594E1c1)
 */
export function useEnglishPeriodicAuctionFacetAuctionEndTime<
  TFunctionName extends 'auctionEndTime',
  TSelectData = ReadContractResult<
    typeof englishPeriodicAuctionFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof englishPeriodicAuctionFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof englishPeriodicAuctionFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: englishPeriodicAuctionFacetABI,
    address:
      englishPeriodicAuctionFacetAddress[
        chainId as keyof typeof englishPeriodicAuctionFacetAddress
      ],
    functionName: 'auctionEndTime',
    ...config,
  } as UseContractReadConfig<
    typeof englishPeriodicAuctionFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link englishPeriodicAuctionFacetABI}__ and `functionName` set to `"auctionLengthSeconds"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xeA45b8aE461c840c1B2965ffeDA5C2a11594E1c1)
 */
export function useEnglishPeriodicAuctionFacetAuctionLengthSeconds<
  TFunctionName extends 'auctionLengthSeconds',
  TSelectData = ReadContractResult<
    typeof englishPeriodicAuctionFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof englishPeriodicAuctionFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof englishPeriodicAuctionFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: englishPeriodicAuctionFacetABI,
    address:
      englishPeriodicAuctionFacetAddress[
        chainId as keyof typeof englishPeriodicAuctionFacetAddress
      ],
    functionName: 'auctionLengthSeconds',
    ...config,
  } as UseContractReadConfig<
    typeof englishPeriodicAuctionFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link englishPeriodicAuctionFacetABI}__ and `functionName` set to `"auctionStartTime"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xeA45b8aE461c840c1B2965ffeDA5C2a11594E1c1)
 */
export function useEnglishPeriodicAuctionFacetAuctionStartTime<
  TFunctionName extends 'auctionStartTime',
  TSelectData = ReadContractResult<
    typeof englishPeriodicAuctionFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof englishPeriodicAuctionFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof englishPeriodicAuctionFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: englishPeriodicAuctionFacetABI,
    address:
      englishPeriodicAuctionFacetAddress[
        chainId as keyof typeof englishPeriodicAuctionFacetAddress
      ],
    functionName: 'auctionStartTime',
    ...config,
  } as UseContractReadConfig<
    typeof englishPeriodicAuctionFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link englishPeriodicAuctionFacetABI}__ and `functionName` set to `"availableCollateral"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xeA45b8aE461c840c1B2965ffeDA5C2a11594E1c1)
 */
export function useEnglishPeriodicAuctionFacetAvailableCollateral<
  TFunctionName extends 'availableCollateral',
  TSelectData = ReadContractResult<
    typeof englishPeriodicAuctionFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof englishPeriodicAuctionFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof englishPeriodicAuctionFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: englishPeriodicAuctionFacetABI,
    address:
      englishPeriodicAuctionFacetAddress[
        chainId as keyof typeof englishPeriodicAuctionFacetAddress
      ],
    functionName: 'availableCollateral',
    ...config,
  } as UseContractReadConfig<
    typeof englishPeriodicAuctionFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link englishPeriodicAuctionFacetABI}__ and `functionName` set to `"bidExtensionSeconds"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xeA45b8aE461c840c1B2965ffeDA5C2a11594E1c1)
 */
export function useEnglishPeriodicAuctionFacetBidExtensionSeconds<
  TFunctionName extends 'bidExtensionSeconds',
  TSelectData = ReadContractResult<
    typeof englishPeriodicAuctionFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof englishPeriodicAuctionFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof englishPeriodicAuctionFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: englishPeriodicAuctionFacetABI,
    address:
      englishPeriodicAuctionFacetAddress[
        chainId as keyof typeof englishPeriodicAuctionFacetAddress
      ],
    functionName: 'bidExtensionSeconds',
    ...config,
  } as UseContractReadConfig<
    typeof englishPeriodicAuctionFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link englishPeriodicAuctionFacetABI}__ and `functionName` set to `"bidExtensionWindowLengthSeconds"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xeA45b8aE461c840c1B2965ffeDA5C2a11594E1c1)
 */
export function useEnglishPeriodicAuctionFacetBidExtensionWindowLengthSeconds<
  TFunctionName extends 'bidExtensionWindowLengthSeconds',
  TSelectData = ReadContractResult<
    typeof englishPeriodicAuctionFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof englishPeriodicAuctionFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof englishPeriodicAuctionFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: englishPeriodicAuctionFacetABI,
    address:
      englishPeriodicAuctionFacetAddress[
        chainId as keyof typeof englishPeriodicAuctionFacetAddress
      ],
    functionName: 'bidExtensionWindowLengthSeconds',
    ...config,
  } as UseContractReadConfig<
    typeof englishPeriodicAuctionFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link englishPeriodicAuctionFacetABI}__ and `functionName` set to `"bidOf"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xeA45b8aE461c840c1B2965ffeDA5C2a11594E1c1)
 */
export function useEnglishPeriodicAuctionFacetBidOf<
  TFunctionName extends 'bidOf',
  TSelectData = ReadContractResult<
    typeof englishPeriodicAuctionFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof englishPeriodicAuctionFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof englishPeriodicAuctionFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: englishPeriodicAuctionFacetABI,
    address:
      englishPeriodicAuctionFacetAddress[
        chainId as keyof typeof englishPeriodicAuctionFacetAddress
      ],
    functionName: 'bidOf',
    ...config,
  } as UseContractReadConfig<
    typeof englishPeriodicAuctionFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link englishPeriodicAuctionFacetABI}__ and `functionName` set to `"calculateFeeFromBid"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xeA45b8aE461c840c1B2965ffeDA5C2a11594E1c1)
 */
export function useEnglishPeriodicAuctionFacetCalculateFeeFromBid<
  TFunctionName extends 'calculateFeeFromBid',
  TSelectData = ReadContractResult<
    typeof englishPeriodicAuctionFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof englishPeriodicAuctionFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof englishPeriodicAuctionFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: englishPeriodicAuctionFacetABI,
    address:
      englishPeriodicAuctionFacetAddress[
        chainId as keyof typeof englishPeriodicAuctionFacetAddress
      ],
    functionName: 'calculateFeeFromBid',
    ...config,
  } as UseContractReadConfig<
    typeof englishPeriodicAuctionFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link englishPeriodicAuctionFacetABI}__ and `functionName` set to `"currentAuctionRound"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xeA45b8aE461c840c1B2965ffeDA5C2a11594E1c1)
 */
export function useEnglishPeriodicAuctionFacetCurrentAuctionRound<
  TFunctionName extends 'currentAuctionRound',
  TSelectData = ReadContractResult<
    typeof englishPeriodicAuctionFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof englishPeriodicAuctionFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof englishPeriodicAuctionFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: englishPeriodicAuctionFacetABI,
    address:
      englishPeriodicAuctionFacetAddress[
        chainId as keyof typeof englishPeriodicAuctionFacetAddress
      ],
    functionName: 'currentAuctionRound',
    ...config,
  } as UseContractReadConfig<
    typeof englishPeriodicAuctionFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link englishPeriodicAuctionFacetABI}__ and `functionName` set to `"highestBid"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xeA45b8aE461c840c1B2965ffeDA5C2a11594E1c1)
 */
export function useEnglishPeriodicAuctionFacetHighestBid<
  TFunctionName extends 'highestBid',
  TSelectData = ReadContractResult<
    typeof englishPeriodicAuctionFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof englishPeriodicAuctionFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof englishPeriodicAuctionFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: englishPeriodicAuctionFacetABI,
    address:
      englishPeriodicAuctionFacetAddress[
        chainId as keyof typeof englishPeriodicAuctionFacetAddress
      ],
    functionName: 'highestBid',
    ...config,
  } as UseContractReadConfig<
    typeof englishPeriodicAuctionFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link englishPeriodicAuctionFacetABI}__ and `functionName` set to `"initialBidder"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xeA45b8aE461c840c1B2965ffeDA5C2a11594E1c1)
 */
export function useEnglishPeriodicAuctionFacetInitialBidder<
  TFunctionName extends 'initialBidder',
  TSelectData = ReadContractResult<
    typeof englishPeriodicAuctionFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof englishPeriodicAuctionFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof englishPeriodicAuctionFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: englishPeriodicAuctionFacetABI,
    address:
      englishPeriodicAuctionFacetAddress[
        chainId as keyof typeof englishPeriodicAuctionFacetAddress
      ],
    functionName: 'initialBidder',
    ...config,
  } as UseContractReadConfig<
    typeof englishPeriodicAuctionFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link englishPeriodicAuctionFacetABI}__ and `functionName` set to `"initialPeriodStartTime"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xeA45b8aE461c840c1B2965ffeDA5C2a11594E1c1)
 */
export function useEnglishPeriodicAuctionFacetInitialPeriodStartTime<
  TFunctionName extends 'initialPeriodStartTime',
  TSelectData = ReadContractResult<
    typeof englishPeriodicAuctionFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof englishPeriodicAuctionFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof englishPeriodicAuctionFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: englishPeriodicAuctionFacetABI,
    address:
      englishPeriodicAuctionFacetAddress[
        chainId as keyof typeof englishPeriodicAuctionFacetAddress
      ],
    functionName: 'initialPeriodStartTime',
    ...config,
  } as UseContractReadConfig<
    typeof englishPeriodicAuctionFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link englishPeriodicAuctionFacetABI}__ and `functionName` set to `"isAuctionPeriod"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xeA45b8aE461c840c1B2965ffeDA5C2a11594E1c1)
 */
export function useEnglishPeriodicAuctionFacetIsAuctionPeriod<
  TFunctionName extends 'isAuctionPeriod',
  TSelectData = ReadContractResult<
    typeof englishPeriodicAuctionFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof englishPeriodicAuctionFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof englishPeriodicAuctionFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: englishPeriodicAuctionFacetABI,
    address:
      englishPeriodicAuctionFacetAddress[
        chainId as keyof typeof englishPeriodicAuctionFacetAddress
      ],
    functionName: 'isAuctionPeriod',
    ...config,
  } as UseContractReadConfig<
    typeof englishPeriodicAuctionFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link englishPeriodicAuctionFacetABI}__ and `functionName` set to `"isReadyForTransfer"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xeA45b8aE461c840c1B2965ffeDA5C2a11594E1c1)
 */
export function useEnglishPeriodicAuctionFacetIsReadyForTransfer<
  TFunctionName extends 'isReadyForTransfer',
  TSelectData = ReadContractResult<
    typeof englishPeriodicAuctionFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof englishPeriodicAuctionFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof englishPeriodicAuctionFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: englishPeriodicAuctionFacetABI,
    address:
      englishPeriodicAuctionFacetAddress[
        chainId as keyof typeof englishPeriodicAuctionFacetAddress
      ],
    functionName: 'isReadyForTransfer',
    ...config,
  } as UseContractReadConfig<
    typeof englishPeriodicAuctionFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link englishPeriodicAuctionFacetABI}__ and `functionName` set to `"lockedCollateral"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xeA45b8aE461c840c1B2965ffeDA5C2a11594E1c1)
 */
export function useEnglishPeriodicAuctionFacetLockedCollateral<
  TFunctionName extends 'lockedCollateral',
  TSelectData = ReadContractResult<
    typeof englishPeriodicAuctionFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof englishPeriodicAuctionFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof englishPeriodicAuctionFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: englishPeriodicAuctionFacetABI,
    address:
      englishPeriodicAuctionFacetAddress[
        chainId as keyof typeof englishPeriodicAuctionFacetAddress
      ],
    functionName: 'lockedCollateral',
    ...config,
  } as UseContractReadConfig<
    typeof englishPeriodicAuctionFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link englishPeriodicAuctionFacetABI}__ and `functionName` set to `"minBidIncrement"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xeA45b8aE461c840c1B2965ffeDA5C2a11594E1c1)
 */
export function useEnglishPeriodicAuctionFacetMinBidIncrement<
  TFunctionName extends 'minBidIncrement',
  TSelectData = ReadContractResult<
    typeof englishPeriodicAuctionFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof englishPeriodicAuctionFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof englishPeriodicAuctionFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: englishPeriodicAuctionFacetABI,
    address:
      englishPeriodicAuctionFacetAddress[
        chainId as keyof typeof englishPeriodicAuctionFacetAddress
      ],
    functionName: 'minBidIncrement',
    ...config,
  } as UseContractReadConfig<
    typeof englishPeriodicAuctionFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link englishPeriodicAuctionFacetABI}__ and `functionName` set to `"repossessor"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xeA45b8aE461c840c1B2965ffeDA5C2a11594E1c1)
 */
export function useEnglishPeriodicAuctionFacetRepossessor<
  TFunctionName extends 'repossessor',
  TSelectData = ReadContractResult<
    typeof englishPeriodicAuctionFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof englishPeriodicAuctionFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof englishPeriodicAuctionFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: englishPeriodicAuctionFacetABI,
    address:
      englishPeriodicAuctionFacetAddress[
        chainId as keyof typeof englishPeriodicAuctionFacetAddress
      ],
    functionName: 'repossessor',
    ...config,
  } as UseContractReadConfig<
    typeof englishPeriodicAuctionFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link englishPeriodicAuctionFacetABI}__ and `functionName` set to `"startingBid"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xeA45b8aE461c840c1B2965ffeDA5C2a11594E1c1)
 */
export function useEnglishPeriodicAuctionFacetStartingBid<
  TFunctionName extends 'startingBid',
  TSelectData = ReadContractResult<
    typeof englishPeriodicAuctionFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof englishPeriodicAuctionFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof englishPeriodicAuctionFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: englishPeriodicAuctionFacetABI,
    address:
      englishPeriodicAuctionFacetAddress[
        chainId as keyof typeof englishPeriodicAuctionFacetAddress
      ],
    functionName: 'startingBid',
    ...config,
  } as UseContractReadConfig<
    typeof englishPeriodicAuctionFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link englishPeriodicAuctionFacetABI}__.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xeA45b8aE461c840c1B2965ffeDA5C2a11594E1c1)
 */
export function useEnglishPeriodicAuctionFacetWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof englishPeriodicAuctionFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof englishPeriodicAuctionFacetABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<
        typeof englishPeriodicAuctionFacetABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof englishPeriodicAuctionFacetABI,
    TFunctionName,
    TMode
  >({
    abi: englishPeriodicAuctionFacetABI,
    address:
      englishPeriodicAuctionFacetAddress[
        chainId as keyof typeof englishPeriodicAuctionFacetAddress
      ],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link englishPeriodicAuctionFacetABI}__ and `functionName` set to `"cancelAllBidsAndWithdrawCollateral"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xeA45b8aE461c840c1B2965ffeDA5C2a11594E1c1)
 */
export function useEnglishPeriodicAuctionFacetCancelAllBidsAndWithdrawCollateral<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof englishPeriodicAuctionFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof englishPeriodicAuctionFacetABI,
          'cancelAllBidsAndWithdrawCollateral'
        >['request']['abi'],
        'cancelAllBidsAndWithdrawCollateral',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'cancelAllBidsAndWithdrawCollateral'
      }
    : UseContractWriteConfig<
        typeof englishPeriodicAuctionFacetABI,
        'cancelAllBidsAndWithdrawCollateral',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'cancelAllBidsAndWithdrawCollateral'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof englishPeriodicAuctionFacetABI,
    'cancelAllBidsAndWithdrawCollateral',
    TMode
  >({
    abi: englishPeriodicAuctionFacetABI,
    address:
      englishPeriodicAuctionFacetAddress[
        chainId as keyof typeof englishPeriodicAuctionFacetAddress
      ],
    functionName: 'cancelAllBidsAndWithdrawCollateral',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link englishPeriodicAuctionFacetABI}__ and `functionName` set to `"cancelBid"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xeA45b8aE461c840c1B2965ffeDA5C2a11594E1c1)
 */
export function useEnglishPeriodicAuctionFacetCancelBid<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof englishPeriodicAuctionFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof englishPeriodicAuctionFacetABI,
          'cancelBid'
        >['request']['abi'],
        'cancelBid',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'cancelBid' }
    : UseContractWriteConfig<
        typeof englishPeriodicAuctionFacetABI,
        'cancelBid',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'cancelBid'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof englishPeriodicAuctionFacetABI,
    'cancelBid',
    TMode
  >({
    abi: englishPeriodicAuctionFacetABI,
    address:
      englishPeriodicAuctionFacetAddress[
        chainId as keyof typeof englishPeriodicAuctionFacetAddress
      ],
    functionName: 'cancelBid',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link englishPeriodicAuctionFacetABI}__ and `functionName` set to `"cancelBidAndWithdrawCollateral"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xeA45b8aE461c840c1B2965ffeDA5C2a11594E1c1)
 */
export function useEnglishPeriodicAuctionFacetCancelBidAndWithdrawCollateral<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof englishPeriodicAuctionFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof englishPeriodicAuctionFacetABI,
          'cancelBidAndWithdrawCollateral'
        >['request']['abi'],
        'cancelBidAndWithdrawCollateral',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'cancelBidAndWithdrawCollateral'
      }
    : UseContractWriteConfig<
        typeof englishPeriodicAuctionFacetABI,
        'cancelBidAndWithdrawCollateral',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'cancelBidAndWithdrawCollateral'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof englishPeriodicAuctionFacetABI,
    'cancelBidAndWithdrawCollateral',
    TMode
  >({
    abi: englishPeriodicAuctionFacetABI,
    address:
      englishPeriodicAuctionFacetAddress[
        chainId as keyof typeof englishPeriodicAuctionFacetAddress
      ],
    functionName: 'cancelBidAndWithdrawCollateral',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link englishPeriodicAuctionFacetABI}__ and `functionName` set to `"closeAuction"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xeA45b8aE461c840c1B2965ffeDA5C2a11594E1c1)
 */
export function useEnglishPeriodicAuctionFacetCloseAuction<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof englishPeriodicAuctionFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof englishPeriodicAuctionFacetABI,
          'closeAuction'
        >['request']['abi'],
        'closeAuction',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'closeAuction'
      }
    : UseContractWriteConfig<
        typeof englishPeriodicAuctionFacetABI,
        'closeAuction',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'closeAuction'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof englishPeriodicAuctionFacetABI,
    'closeAuction',
    TMode
  >({
    abi: englishPeriodicAuctionFacetABI,
    address:
      englishPeriodicAuctionFacetAddress[
        chainId as keyof typeof englishPeriodicAuctionFacetAddress
      ],
    functionName: 'closeAuction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link englishPeriodicAuctionFacetABI}__ and `functionName` set to `"initializeAuction"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xeA45b8aE461c840c1B2965ffeDA5C2a11594E1c1)
 */
export function useEnglishPeriodicAuctionFacetInitializeAuction<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof englishPeriodicAuctionFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof englishPeriodicAuctionFacetABI,
          'initializeAuction'
        >['request']['abi'],
        'initializeAuction',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'initializeAuction'
      }
    : UseContractWriteConfig<
        typeof englishPeriodicAuctionFacetABI,
        'initializeAuction',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'initializeAuction'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof englishPeriodicAuctionFacetABI,
    'initializeAuction',
    TMode
  >({
    abi: englishPeriodicAuctionFacetABI,
    address:
      englishPeriodicAuctionFacetAddress[
        chainId as keyof typeof englishPeriodicAuctionFacetAddress
      ],
    functionName: 'initializeAuction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link englishPeriodicAuctionFacetABI}__ and `functionName` set to `"placeBid"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xeA45b8aE461c840c1B2965ffeDA5C2a11594E1c1)
 */
export function useEnglishPeriodicAuctionFacetPlaceBid<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof englishPeriodicAuctionFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof englishPeriodicAuctionFacetABI,
          'placeBid'
        >['request']['abi'],
        'placeBid',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'placeBid' }
    : UseContractWriteConfig<
        typeof englishPeriodicAuctionFacetABI,
        'placeBid',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'placeBid'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof englishPeriodicAuctionFacetABI,
    'placeBid',
    TMode
  >({
    abi: englishPeriodicAuctionFacetABI,
    address:
      englishPeriodicAuctionFacetAddress[
        chainId as keyof typeof englishPeriodicAuctionFacetAddress
      ],
    functionName: 'placeBid',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link englishPeriodicAuctionFacetABI}__ and `functionName` set to `"setAuctionLengthSeconds"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xeA45b8aE461c840c1B2965ffeDA5C2a11594E1c1)
 */
export function useEnglishPeriodicAuctionFacetSetAuctionLengthSeconds<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof englishPeriodicAuctionFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof englishPeriodicAuctionFacetABI,
          'setAuctionLengthSeconds'
        >['request']['abi'],
        'setAuctionLengthSeconds',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'setAuctionLengthSeconds'
      }
    : UseContractWriteConfig<
        typeof englishPeriodicAuctionFacetABI,
        'setAuctionLengthSeconds',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setAuctionLengthSeconds'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof englishPeriodicAuctionFacetABI,
    'setAuctionLengthSeconds',
    TMode
  >({
    abi: englishPeriodicAuctionFacetABI,
    address:
      englishPeriodicAuctionFacetAddress[
        chainId as keyof typeof englishPeriodicAuctionFacetAddress
      ],
    functionName: 'setAuctionLengthSeconds',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link englishPeriodicAuctionFacetABI}__ and `functionName` set to `"setAuctionParameters"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xeA45b8aE461c840c1B2965ffeDA5C2a11594E1c1)
 */
export function useEnglishPeriodicAuctionFacetSetAuctionParameters<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof englishPeriodicAuctionFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof englishPeriodicAuctionFacetABI,
          'setAuctionParameters'
        >['request']['abi'],
        'setAuctionParameters',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'setAuctionParameters'
      }
    : UseContractWriteConfig<
        typeof englishPeriodicAuctionFacetABI,
        'setAuctionParameters',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setAuctionParameters'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof englishPeriodicAuctionFacetABI,
    'setAuctionParameters',
    TMode
  >({
    abi: englishPeriodicAuctionFacetABI,
    address:
      englishPeriodicAuctionFacetAddress[
        chainId as keyof typeof englishPeriodicAuctionFacetAddress
      ],
    functionName: 'setAuctionParameters',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link englishPeriodicAuctionFacetABI}__ and `functionName` set to `"setBidExtensionSeconds"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xeA45b8aE461c840c1B2965ffeDA5C2a11594E1c1)
 */
export function useEnglishPeriodicAuctionFacetSetBidExtensionSeconds<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof englishPeriodicAuctionFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof englishPeriodicAuctionFacetABI,
          'setBidExtensionSeconds'
        >['request']['abi'],
        'setBidExtensionSeconds',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'setBidExtensionSeconds'
      }
    : UseContractWriteConfig<
        typeof englishPeriodicAuctionFacetABI,
        'setBidExtensionSeconds',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setBidExtensionSeconds'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof englishPeriodicAuctionFacetABI,
    'setBidExtensionSeconds',
    TMode
  >({
    abi: englishPeriodicAuctionFacetABI,
    address:
      englishPeriodicAuctionFacetAddress[
        chainId as keyof typeof englishPeriodicAuctionFacetAddress
      ],
    functionName: 'setBidExtensionSeconds',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link englishPeriodicAuctionFacetABI}__ and `functionName` set to `"setBidExtensionWindowLengthSeconds"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xeA45b8aE461c840c1B2965ffeDA5C2a11594E1c1)
 */
export function useEnglishPeriodicAuctionFacetSetBidExtensionWindowLengthSeconds<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof englishPeriodicAuctionFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof englishPeriodicAuctionFacetABI,
          'setBidExtensionWindowLengthSeconds'
        >['request']['abi'],
        'setBidExtensionWindowLengthSeconds',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'setBidExtensionWindowLengthSeconds'
      }
    : UseContractWriteConfig<
        typeof englishPeriodicAuctionFacetABI,
        'setBidExtensionWindowLengthSeconds',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setBidExtensionWindowLengthSeconds'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof englishPeriodicAuctionFacetABI,
    'setBidExtensionWindowLengthSeconds',
    TMode
  >({
    abi: englishPeriodicAuctionFacetABI,
    address:
      englishPeriodicAuctionFacetAddress[
        chainId as keyof typeof englishPeriodicAuctionFacetAddress
      ],
    functionName: 'setBidExtensionWindowLengthSeconds',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link englishPeriodicAuctionFacetABI}__ and `functionName` set to `"setMinBidIncrement"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xeA45b8aE461c840c1B2965ffeDA5C2a11594E1c1)
 */
export function useEnglishPeriodicAuctionFacetSetMinBidIncrement<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof englishPeriodicAuctionFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof englishPeriodicAuctionFacetABI,
          'setMinBidIncrement'
        >['request']['abi'],
        'setMinBidIncrement',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'setMinBidIncrement'
      }
    : UseContractWriteConfig<
        typeof englishPeriodicAuctionFacetABI,
        'setMinBidIncrement',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setMinBidIncrement'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof englishPeriodicAuctionFacetABI,
    'setMinBidIncrement',
    TMode
  >({
    abi: englishPeriodicAuctionFacetABI,
    address:
      englishPeriodicAuctionFacetAddress[
        chainId as keyof typeof englishPeriodicAuctionFacetAddress
      ],
    functionName: 'setMinBidIncrement',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link englishPeriodicAuctionFacetABI}__ and `functionName` set to `"setRepossessor"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xeA45b8aE461c840c1B2965ffeDA5C2a11594E1c1)
 */
export function useEnglishPeriodicAuctionFacetSetRepossessor<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof englishPeriodicAuctionFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof englishPeriodicAuctionFacetABI,
          'setRepossessor'
        >['request']['abi'],
        'setRepossessor',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'setRepossessor'
      }
    : UseContractWriteConfig<
        typeof englishPeriodicAuctionFacetABI,
        'setRepossessor',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setRepossessor'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof englishPeriodicAuctionFacetABI,
    'setRepossessor',
    TMode
  >({
    abi: englishPeriodicAuctionFacetABI,
    address:
      englishPeriodicAuctionFacetAddress[
        chainId as keyof typeof englishPeriodicAuctionFacetAddress
      ],
    functionName: 'setRepossessor',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link englishPeriodicAuctionFacetABI}__ and `functionName` set to `"setStartingBid"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xeA45b8aE461c840c1B2965ffeDA5C2a11594E1c1)
 */
export function useEnglishPeriodicAuctionFacetSetStartingBid<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof englishPeriodicAuctionFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof englishPeriodicAuctionFacetABI,
          'setStartingBid'
        >['request']['abi'],
        'setStartingBid',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'setStartingBid'
      }
    : UseContractWriteConfig<
        typeof englishPeriodicAuctionFacetABI,
        'setStartingBid',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setStartingBid'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof englishPeriodicAuctionFacetABI,
    'setStartingBid',
    TMode
  >({
    abi: englishPeriodicAuctionFacetABI,
    address:
      englishPeriodicAuctionFacetAddress[
        chainId as keyof typeof englishPeriodicAuctionFacetAddress
      ],
    functionName: 'setStartingBid',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link englishPeriodicAuctionFacetABI}__ and `functionName` set to `"withdrawCollateral"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xeA45b8aE461c840c1B2965ffeDA5C2a11594E1c1)
 */
export function useEnglishPeriodicAuctionFacetWithdrawCollateral<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof englishPeriodicAuctionFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof englishPeriodicAuctionFacetABI,
          'withdrawCollateral'
        >['request']['abi'],
        'withdrawCollateral',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'withdrawCollateral'
      }
    : UseContractWriteConfig<
        typeof englishPeriodicAuctionFacetABI,
        'withdrawCollateral',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'withdrawCollateral'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof englishPeriodicAuctionFacetABI,
    'withdrawCollateral',
    TMode
  >({
    abi: englishPeriodicAuctionFacetABI,
    address:
      englishPeriodicAuctionFacetAddress[
        chainId as keyof typeof englishPeriodicAuctionFacetAddress
      ],
    functionName: 'withdrawCollateral',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link englishPeriodicAuctionFacetABI}__.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xeA45b8aE461c840c1B2965ffeDA5C2a11594E1c1)
 */
export function usePrepareEnglishPeriodicAuctionFacetWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof englishPeriodicAuctionFacetABI,
      TFunctionName
    >,
    'abi' | 'address'
  > & { chainId?: keyof typeof englishPeriodicAuctionFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: englishPeriodicAuctionFacetABI,
    address:
      englishPeriodicAuctionFacetAddress[
        chainId as keyof typeof englishPeriodicAuctionFacetAddress
      ],
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof englishPeriodicAuctionFacetABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link englishPeriodicAuctionFacetABI}__ and `functionName` set to `"cancelAllBidsAndWithdrawCollateral"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xeA45b8aE461c840c1B2965ffeDA5C2a11594E1c1)
 */
export function usePrepareEnglishPeriodicAuctionFacetCancelAllBidsAndWithdrawCollateral(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof englishPeriodicAuctionFacetABI,
      'cancelAllBidsAndWithdrawCollateral'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof englishPeriodicAuctionFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: englishPeriodicAuctionFacetABI,
    address:
      englishPeriodicAuctionFacetAddress[
        chainId as keyof typeof englishPeriodicAuctionFacetAddress
      ],
    functionName: 'cancelAllBidsAndWithdrawCollateral',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof englishPeriodicAuctionFacetABI,
    'cancelAllBidsAndWithdrawCollateral'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link englishPeriodicAuctionFacetABI}__ and `functionName` set to `"cancelBid"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xeA45b8aE461c840c1B2965ffeDA5C2a11594E1c1)
 */
export function usePrepareEnglishPeriodicAuctionFacetCancelBid(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof englishPeriodicAuctionFacetABI,
      'cancelBid'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof englishPeriodicAuctionFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: englishPeriodicAuctionFacetABI,
    address:
      englishPeriodicAuctionFacetAddress[
        chainId as keyof typeof englishPeriodicAuctionFacetAddress
      ],
    functionName: 'cancelBid',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof englishPeriodicAuctionFacetABI,
    'cancelBid'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link englishPeriodicAuctionFacetABI}__ and `functionName` set to `"cancelBidAndWithdrawCollateral"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xeA45b8aE461c840c1B2965ffeDA5C2a11594E1c1)
 */
export function usePrepareEnglishPeriodicAuctionFacetCancelBidAndWithdrawCollateral(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof englishPeriodicAuctionFacetABI,
      'cancelBidAndWithdrawCollateral'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof englishPeriodicAuctionFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: englishPeriodicAuctionFacetABI,
    address:
      englishPeriodicAuctionFacetAddress[
        chainId as keyof typeof englishPeriodicAuctionFacetAddress
      ],
    functionName: 'cancelBidAndWithdrawCollateral',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof englishPeriodicAuctionFacetABI,
    'cancelBidAndWithdrawCollateral'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link englishPeriodicAuctionFacetABI}__ and `functionName` set to `"closeAuction"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xeA45b8aE461c840c1B2965ffeDA5C2a11594E1c1)
 */
export function usePrepareEnglishPeriodicAuctionFacetCloseAuction(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof englishPeriodicAuctionFacetABI,
      'closeAuction'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof englishPeriodicAuctionFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: englishPeriodicAuctionFacetABI,
    address:
      englishPeriodicAuctionFacetAddress[
        chainId as keyof typeof englishPeriodicAuctionFacetAddress
      ],
    functionName: 'closeAuction',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof englishPeriodicAuctionFacetABI,
    'closeAuction'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link englishPeriodicAuctionFacetABI}__ and `functionName` set to `"initializeAuction"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xeA45b8aE461c840c1B2965ffeDA5C2a11594E1c1)
 */
export function usePrepareEnglishPeriodicAuctionFacetInitializeAuction(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof englishPeriodicAuctionFacetABI,
      'initializeAuction'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof englishPeriodicAuctionFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: englishPeriodicAuctionFacetABI,
    address:
      englishPeriodicAuctionFacetAddress[
        chainId as keyof typeof englishPeriodicAuctionFacetAddress
      ],
    functionName: 'initializeAuction',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof englishPeriodicAuctionFacetABI,
    'initializeAuction'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link englishPeriodicAuctionFacetABI}__ and `functionName` set to `"placeBid"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xeA45b8aE461c840c1B2965ffeDA5C2a11594E1c1)
 */
export function usePrepareEnglishPeriodicAuctionFacetPlaceBid(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof englishPeriodicAuctionFacetABI,
      'placeBid'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof englishPeriodicAuctionFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: englishPeriodicAuctionFacetABI,
    address:
      englishPeriodicAuctionFacetAddress[
        chainId as keyof typeof englishPeriodicAuctionFacetAddress
      ],
    functionName: 'placeBid',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof englishPeriodicAuctionFacetABI,
    'placeBid'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link englishPeriodicAuctionFacetABI}__ and `functionName` set to `"setAuctionLengthSeconds"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xeA45b8aE461c840c1B2965ffeDA5C2a11594E1c1)
 */
export function usePrepareEnglishPeriodicAuctionFacetSetAuctionLengthSeconds(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof englishPeriodicAuctionFacetABI,
      'setAuctionLengthSeconds'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof englishPeriodicAuctionFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: englishPeriodicAuctionFacetABI,
    address:
      englishPeriodicAuctionFacetAddress[
        chainId as keyof typeof englishPeriodicAuctionFacetAddress
      ],
    functionName: 'setAuctionLengthSeconds',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof englishPeriodicAuctionFacetABI,
    'setAuctionLengthSeconds'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link englishPeriodicAuctionFacetABI}__ and `functionName` set to `"setAuctionParameters"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xeA45b8aE461c840c1B2965ffeDA5C2a11594E1c1)
 */
export function usePrepareEnglishPeriodicAuctionFacetSetAuctionParameters(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof englishPeriodicAuctionFacetABI,
      'setAuctionParameters'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof englishPeriodicAuctionFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: englishPeriodicAuctionFacetABI,
    address:
      englishPeriodicAuctionFacetAddress[
        chainId as keyof typeof englishPeriodicAuctionFacetAddress
      ],
    functionName: 'setAuctionParameters',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof englishPeriodicAuctionFacetABI,
    'setAuctionParameters'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link englishPeriodicAuctionFacetABI}__ and `functionName` set to `"setBidExtensionSeconds"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xeA45b8aE461c840c1B2965ffeDA5C2a11594E1c1)
 */
export function usePrepareEnglishPeriodicAuctionFacetSetBidExtensionSeconds(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof englishPeriodicAuctionFacetABI,
      'setBidExtensionSeconds'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof englishPeriodicAuctionFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: englishPeriodicAuctionFacetABI,
    address:
      englishPeriodicAuctionFacetAddress[
        chainId as keyof typeof englishPeriodicAuctionFacetAddress
      ],
    functionName: 'setBidExtensionSeconds',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof englishPeriodicAuctionFacetABI,
    'setBidExtensionSeconds'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link englishPeriodicAuctionFacetABI}__ and `functionName` set to `"setBidExtensionWindowLengthSeconds"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xeA45b8aE461c840c1B2965ffeDA5C2a11594E1c1)
 */
export function usePrepareEnglishPeriodicAuctionFacetSetBidExtensionWindowLengthSeconds(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof englishPeriodicAuctionFacetABI,
      'setBidExtensionWindowLengthSeconds'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof englishPeriodicAuctionFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: englishPeriodicAuctionFacetABI,
    address:
      englishPeriodicAuctionFacetAddress[
        chainId as keyof typeof englishPeriodicAuctionFacetAddress
      ],
    functionName: 'setBidExtensionWindowLengthSeconds',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof englishPeriodicAuctionFacetABI,
    'setBidExtensionWindowLengthSeconds'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link englishPeriodicAuctionFacetABI}__ and `functionName` set to `"setMinBidIncrement"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xeA45b8aE461c840c1B2965ffeDA5C2a11594E1c1)
 */
export function usePrepareEnglishPeriodicAuctionFacetSetMinBidIncrement(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof englishPeriodicAuctionFacetABI,
      'setMinBidIncrement'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof englishPeriodicAuctionFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: englishPeriodicAuctionFacetABI,
    address:
      englishPeriodicAuctionFacetAddress[
        chainId as keyof typeof englishPeriodicAuctionFacetAddress
      ],
    functionName: 'setMinBidIncrement',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof englishPeriodicAuctionFacetABI,
    'setMinBidIncrement'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link englishPeriodicAuctionFacetABI}__ and `functionName` set to `"setRepossessor"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xeA45b8aE461c840c1B2965ffeDA5C2a11594E1c1)
 */
export function usePrepareEnglishPeriodicAuctionFacetSetRepossessor(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof englishPeriodicAuctionFacetABI,
      'setRepossessor'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof englishPeriodicAuctionFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: englishPeriodicAuctionFacetABI,
    address:
      englishPeriodicAuctionFacetAddress[
        chainId as keyof typeof englishPeriodicAuctionFacetAddress
      ],
    functionName: 'setRepossessor',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof englishPeriodicAuctionFacetABI,
    'setRepossessor'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link englishPeriodicAuctionFacetABI}__ and `functionName` set to `"setStartingBid"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xeA45b8aE461c840c1B2965ffeDA5C2a11594E1c1)
 */
export function usePrepareEnglishPeriodicAuctionFacetSetStartingBid(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof englishPeriodicAuctionFacetABI,
      'setStartingBid'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof englishPeriodicAuctionFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: englishPeriodicAuctionFacetABI,
    address:
      englishPeriodicAuctionFacetAddress[
        chainId as keyof typeof englishPeriodicAuctionFacetAddress
      ],
    functionName: 'setStartingBid',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof englishPeriodicAuctionFacetABI,
    'setStartingBid'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link englishPeriodicAuctionFacetABI}__ and `functionName` set to `"withdrawCollateral"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xeA45b8aE461c840c1B2965ffeDA5C2a11594E1c1)
 */
export function usePrepareEnglishPeriodicAuctionFacetWithdrawCollateral(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof englishPeriodicAuctionFacetABI,
      'withdrawCollateral'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof englishPeriodicAuctionFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: englishPeriodicAuctionFacetABI,
    address:
      englishPeriodicAuctionFacetAddress[
        chainId as keyof typeof englishPeriodicAuctionFacetAddress
      ],
    functionName: 'withdrawCollateral',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof englishPeriodicAuctionFacetABI,
    'withdrawCollateral'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link englishPeriodicAuctionFacetABI}__.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xeA45b8aE461c840c1B2965ffeDA5C2a11594E1c1)
 */
export function useEnglishPeriodicAuctionFacetEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof englishPeriodicAuctionFacetABI, TEventName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof englishPeriodicAuctionFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: englishPeriodicAuctionFacetABI,
    address:
      englishPeriodicAuctionFacetAddress[
        chainId as keyof typeof englishPeriodicAuctionFacetAddress
      ],
    ...config,
  } as UseContractEventConfig<
    typeof englishPeriodicAuctionFacetABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link englishPeriodicAuctionFacetABI}__ and `eventName` set to `"AuctionClosed"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xeA45b8aE461c840c1B2965ffeDA5C2a11594E1c1)
 */
export function useEnglishPeriodicAuctionFacetAuctionClosedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof englishPeriodicAuctionFacetABI,
      'AuctionClosed'
    >,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof englishPeriodicAuctionFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: englishPeriodicAuctionFacetABI,
    address:
      englishPeriodicAuctionFacetAddress[
        chainId as keyof typeof englishPeriodicAuctionFacetAddress
      ],
    eventName: 'AuctionClosed',
    ...config,
  } as UseContractEventConfig<
    typeof englishPeriodicAuctionFacetABI,
    'AuctionClosed'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link englishPeriodicAuctionFacetABI}__ and `eventName` set to `"AuctionLengthSet"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xeA45b8aE461c840c1B2965ffeDA5C2a11594E1c1)
 */
export function useEnglishPeriodicAuctionFacetAuctionLengthSetEvent(
  config: Omit<
    UseContractEventConfig<
      typeof englishPeriodicAuctionFacetABI,
      'AuctionLengthSet'
    >,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof englishPeriodicAuctionFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: englishPeriodicAuctionFacetABI,
    address:
      englishPeriodicAuctionFacetAddress[
        chainId as keyof typeof englishPeriodicAuctionFacetAddress
      ],
    eventName: 'AuctionLengthSet',
    ...config,
  } as UseContractEventConfig<
    typeof englishPeriodicAuctionFacetABI,
    'AuctionLengthSet'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link englishPeriodicAuctionFacetABI}__ and `eventName` set to `"BidExtensionSet"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xeA45b8aE461c840c1B2965ffeDA5C2a11594E1c1)
 */
export function useEnglishPeriodicAuctionFacetBidExtensionSetEvent(
  config: Omit<
    UseContractEventConfig<
      typeof englishPeriodicAuctionFacetABI,
      'BidExtensionSet'
    >,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof englishPeriodicAuctionFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: englishPeriodicAuctionFacetABI,
    address:
      englishPeriodicAuctionFacetAddress[
        chainId as keyof typeof englishPeriodicAuctionFacetAddress
      ],
    eventName: 'BidExtensionSet',
    ...config,
  } as UseContractEventConfig<
    typeof englishPeriodicAuctionFacetABI,
    'BidExtensionSet'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link englishPeriodicAuctionFacetABI}__ and `eventName` set to `"BidExtensionWindowLengthSet"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xeA45b8aE461c840c1B2965ffeDA5C2a11594E1c1)
 */
export function useEnglishPeriodicAuctionFacetBidExtensionWindowLengthSetEvent(
  config: Omit<
    UseContractEventConfig<
      typeof englishPeriodicAuctionFacetABI,
      'BidExtensionWindowLengthSet'
    >,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof englishPeriodicAuctionFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: englishPeriodicAuctionFacetABI,
    address:
      englishPeriodicAuctionFacetAddress[
        chainId as keyof typeof englishPeriodicAuctionFacetAddress
      ],
    eventName: 'BidExtensionWindowLengthSet',
    ...config,
  } as UseContractEventConfig<
    typeof englishPeriodicAuctionFacetABI,
    'BidExtensionWindowLengthSet'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link englishPeriodicAuctionFacetABI}__ and `eventName` set to `"BidPlaced"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xeA45b8aE461c840c1B2965ffeDA5C2a11594E1c1)
 */
export function useEnglishPeriodicAuctionFacetBidPlacedEvent(
  config: Omit<
    UseContractEventConfig<typeof englishPeriodicAuctionFacetABI, 'BidPlaced'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof englishPeriodicAuctionFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: englishPeriodicAuctionFacetABI,
    address:
      englishPeriodicAuctionFacetAddress[
        chainId as keyof typeof englishPeriodicAuctionFacetAddress
      ],
    eventName: 'BidPlaced',
    ...config,
  } as UseContractEventConfig<
    typeof englishPeriodicAuctionFacetABI,
    'BidPlaced'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link englishPeriodicAuctionFacetABI}__ and `eventName` set to `"InitialPeriodStartTimeSet"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xeA45b8aE461c840c1B2965ffeDA5C2a11594E1c1)
 */
export function useEnglishPeriodicAuctionFacetInitialPeriodStartTimeSetEvent(
  config: Omit<
    UseContractEventConfig<
      typeof englishPeriodicAuctionFacetABI,
      'InitialPeriodStartTimeSet'
    >,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof englishPeriodicAuctionFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: englishPeriodicAuctionFacetABI,
    address:
      englishPeriodicAuctionFacetAddress[
        chainId as keyof typeof englishPeriodicAuctionFacetAddress
      ],
    eventName: 'InitialPeriodStartTimeSet',
    ...config,
  } as UseContractEventConfig<
    typeof englishPeriodicAuctionFacetABI,
    'InitialPeriodStartTimeSet'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link englishPeriodicAuctionFacetABI}__ and `eventName` set to `"MinBidIncrementSet"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xeA45b8aE461c840c1B2965ffeDA5C2a11594E1c1)
 */
export function useEnglishPeriodicAuctionFacetMinBidIncrementSetEvent(
  config: Omit<
    UseContractEventConfig<
      typeof englishPeriodicAuctionFacetABI,
      'MinBidIncrementSet'
    >,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof englishPeriodicAuctionFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: englishPeriodicAuctionFacetABI,
    address:
      englishPeriodicAuctionFacetAddress[
        chainId as keyof typeof englishPeriodicAuctionFacetAddress
      ],
    eventName: 'MinBidIncrementSet',
    ...config,
  } as UseContractEventConfig<
    typeof englishPeriodicAuctionFacetABI,
    'MinBidIncrementSet'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link englishPeriodicAuctionFacetABI}__ and `eventName` set to `"RepossessorSet"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xeA45b8aE461c840c1B2965ffeDA5C2a11594E1c1)
 */
export function useEnglishPeriodicAuctionFacetRepossessorSetEvent(
  config: Omit<
    UseContractEventConfig<
      typeof englishPeriodicAuctionFacetABI,
      'RepossessorSet'
    >,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof englishPeriodicAuctionFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: englishPeriodicAuctionFacetABI,
    address:
      englishPeriodicAuctionFacetAddress[
        chainId as keyof typeof englishPeriodicAuctionFacetAddress
      ],
    eventName: 'RepossessorSet',
    ...config,
  } as UseContractEventConfig<
    typeof englishPeriodicAuctionFacetABI,
    'RepossessorSet'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link englishPeriodicAuctionFacetABI}__ and `eventName` set to `"RoleAdminChanged"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xeA45b8aE461c840c1B2965ffeDA5C2a11594E1c1)
 */
export function useEnglishPeriodicAuctionFacetRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof englishPeriodicAuctionFacetABI,
      'RoleAdminChanged'
    >,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof englishPeriodicAuctionFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: englishPeriodicAuctionFacetABI,
    address:
      englishPeriodicAuctionFacetAddress[
        chainId as keyof typeof englishPeriodicAuctionFacetAddress
      ],
    eventName: 'RoleAdminChanged',
    ...config,
  } as UseContractEventConfig<
    typeof englishPeriodicAuctionFacetABI,
    'RoleAdminChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link englishPeriodicAuctionFacetABI}__ and `eventName` set to `"RoleGranted"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xeA45b8aE461c840c1B2965ffeDA5C2a11594E1c1)
 */
export function useEnglishPeriodicAuctionFacetRoleGrantedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof englishPeriodicAuctionFacetABI,
      'RoleGranted'
    >,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof englishPeriodicAuctionFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: englishPeriodicAuctionFacetABI,
    address:
      englishPeriodicAuctionFacetAddress[
        chainId as keyof typeof englishPeriodicAuctionFacetAddress
      ],
    eventName: 'RoleGranted',
    ...config,
  } as UseContractEventConfig<
    typeof englishPeriodicAuctionFacetABI,
    'RoleGranted'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link englishPeriodicAuctionFacetABI}__ and `eventName` set to `"RoleRevoked"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xeA45b8aE461c840c1B2965ffeDA5C2a11594E1c1)
 */
export function useEnglishPeriodicAuctionFacetRoleRevokedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof englishPeriodicAuctionFacetABI,
      'RoleRevoked'
    >,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof englishPeriodicAuctionFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: englishPeriodicAuctionFacetABI,
    address:
      englishPeriodicAuctionFacetAddress[
        chainId as keyof typeof englishPeriodicAuctionFacetAddress
      ],
    eventName: 'RoleRevoked',
    ...config,
  } as UseContractEventConfig<
    typeof englishPeriodicAuctionFacetABI,
    'RoleRevoked'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link englishPeriodicAuctionFacetABI}__ and `eventName` set to `"StartingBidSet"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xeA45b8aE461c840c1B2965ffeDA5C2a11594E1c1)
 */
export function useEnglishPeriodicAuctionFacetStartingBidSetEvent(
  config: Omit<
    UseContractEventConfig<
      typeof englishPeriodicAuctionFacetABI,
      'StartingBidSet'
    >,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof englishPeriodicAuctionFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: englishPeriodicAuctionFacetABI,
    address:
      englishPeriodicAuctionFacetAddress[
        chainId as keyof typeof englishPeriodicAuctionFacetAddress
      ],
    eventName: 'StartingBidSet',
    ...config,
  } as UseContractEventConfig<
    typeof englishPeriodicAuctionFacetABI,
    'StartingBidSet'
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link idaBeneficiaryFacetABI}__.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x59aEeFC8421D59f260a5E5b959BFcc86B59C8415)
 */
export function useIdaBeneficiaryFacetWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof idaBeneficiaryFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof idaBeneficiaryFacetABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<
        typeof idaBeneficiaryFacetABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof idaBeneficiaryFacetABI, TFunctionName, TMode>({
    abi: idaBeneficiaryFacetABI,
    address:
      idaBeneficiaryFacetAddress[
        chainId as keyof typeof idaBeneficiaryFacetAddress
      ],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link idaBeneficiaryFacetABI}__ and `functionName` set to `"distribute"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x59aEeFC8421D59f260a5E5b959BFcc86B59C8415)
 */
export function useIdaBeneficiaryFacetDistribute<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof idaBeneficiaryFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof idaBeneficiaryFacetABI,
          'distribute'
        >['request']['abi'],
        'distribute',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'distribute' }
    : UseContractWriteConfig<
        typeof idaBeneficiaryFacetABI,
        'distribute',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'distribute'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof idaBeneficiaryFacetABI, 'distribute', TMode>({
    abi: idaBeneficiaryFacetABI,
    address:
      idaBeneficiaryFacetAddress[
        chainId as keyof typeof idaBeneficiaryFacetAddress
      ],
    functionName: 'distribute',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link idaBeneficiaryFacetABI}__ and `functionName` set to `"initializeIDABeneficiary"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x59aEeFC8421D59f260a5E5b959BFcc86B59C8415)
 */
export function useIdaBeneficiaryFacetInitializeIdaBeneficiary<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof idaBeneficiaryFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof idaBeneficiaryFacetABI,
          'initializeIDABeneficiary'
        >['request']['abi'],
        'initializeIDABeneficiary',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'initializeIDABeneficiary'
      }
    : UseContractWriteConfig<
        typeof idaBeneficiaryFacetABI,
        'initializeIDABeneficiary',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'initializeIDABeneficiary'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof idaBeneficiaryFacetABI,
    'initializeIDABeneficiary',
    TMode
  >({
    abi: idaBeneficiaryFacetABI,
    address:
      idaBeneficiaryFacetAddress[
        chainId as keyof typeof idaBeneficiaryFacetAddress
      ],
    functionName: 'initializeIDABeneficiary',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link idaBeneficiaryFacetABI}__ and `functionName` set to `"updateBeneficiaryUnits"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x59aEeFC8421D59f260a5E5b959BFcc86B59C8415)
 */
export function useIdaBeneficiaryFacetUpdateBeneficiaryUnits<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof idaBeneficiaryFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof idaBeneficiaryFacetABI,
          'updateBeneficiaryUnits'
        >['request']['abi'],
        'updateBeneficiaryUnits',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'updateBeneficiaryUnits'
      }
    : UseContractWriteConfig<
        typeof idaBeneficiaryFacetABI,
        'updateBeneficiaryUnits',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'updateBeneficiaryUnits'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof idaBeneficiaryFacetABI,
    'updateBeneficiaryUnits',
    TMode
  >({
    abi: idaBeneficiaryFacetABI,
    address:
      idaBeneficiaryFacetAddress[
        chainId as keyof typeof idaBeneficiaryFacetAddress
      ],
    functionName: 'updateBeneficiaryUnits',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link idaBeneficiaryFacetABI}__.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x59aEeFC8421D59f260a5E5b959BFcc86B59C8415)
 */
export function usePrepareIdaBeneficiaryFacetWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof idaBeneficiaryFacetABI, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof idaBeneficiaryFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: idaBeneficiaryFacetABI,
    address:
      idaBeneficiaryFacetAddress[
        chainId as keyof typeof idaBeneficiaryFacetAddress
      ],
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof idaBeneficiaryFacetABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link idaBeneficiaryFacetABI}__ and `functionName` set to `"distribute"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x59aEeFC8421D59f260a5E5b959BFcc86B59C8415)
 */
export function usePrepareIdaBeneficiaryFacetDistribute(
  config: Omit<
    UsePrepareContractWriteConfig<typeof idaBeneficiaryFacetABI, 'distribute'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof idaBeneficiaryFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: idaBeneficiaryFacetABI,
    address:
      idaBeneficiaryFacetAddress[
        chainId as keyof typeof idaBeneficiaryFacetAddress
      ],
    functionName: 'distribute',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof idaBeneficiaryFacetABI,
    'distribute'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link idaBeneficiaryFacetABI}__ and `functionName` set to `"initializeIDABeneficiary"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x59aEeFC8421D59f260a5E5b959BFcc86B59C8415)
 */
export function usePrepareIdaBeneficiaryFacetInitializeIdaBeneficiary(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof idaBeneficiaryFacetABI,
      'initializeIDABeneficiary'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof idaBeneficiaryFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: idaBeneficiaryFacetABI,
    address:
      idaBeneficiaryFacetAddress[
        chainId as keyof typeof idaBeneficiaryFacetAddress
      ],
    functionName: 'initializeIDABeneficiary',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof idaBeneficiaryFacetABI,
    'initializeIDABeneficiary'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link idaBeneficiaryFacetABI}__ and `functionName` set to `"updateBeneficiaryUnits"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x59aEeFC8421D59f260a5E5b959BFcc86B59C8415)
 */
export function usePrepareIdaBeneficiaryFacetUpdateBeneficiaryUnits(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof idaBeneficiaryFacetABI,
      'updateBeneficiaryUnits'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof idaBeneficiaryFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: idaBeneficiaryFacetABI,
    address:
      idaBeneficiaryFacetAddress[
        chainId as keyof typeof idaBeneficiaryFacetAddress
      ],
    functionName: 'updateBeneficiaryUnits',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof idaBeneficiaryFacetABI,
    'updateBeneficiaryUnits'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link idaBeneficiaryFacetABI}__.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x59aEeFC8421D59f260a5E5b959BFcc86B59C8415)
 */
export function useIdaBeneficiaryFacetEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof idaBeneficiaryFacetABI, TEventName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof idaBeneficiaryFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: idaBeneficiaryFacetABI,
    address:
      idaBeneficiaryFacetAddress[
        chainId as keyof typeof idaBeneficiaryFacetAddress
      ],
    ...config,
  } as UseContractEventConfig<typeof idaBeneficiaryFacetABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link idaBeneficiaryFacetABI}__ and `eventName` set to `"BeneficiaryUnitsUpdated"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x59aEeFC8421D59f260a5E5b959BFcc86B59C8415)
 */
export function useIdaBeneficiaryFacetBeneficiaryUnitsUpdatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof idaBeneficiaryFacetABI,
      'BeneficiaryUnitsUpdated'
    >,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof idaBeneficiaryFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: idaBeneficiaryFacetABI,
    address:
      idaBeneficiaryFacetAddress[
        chainId as keyof typeof idaBeneficiaryFacetAddress
      ],
    eventName: 'BeneficiaryUnitsUpdated',
    ...config,
  } as UseContractEventConfig<
    typeof idaBeneficiaryFacetABI,
    'BeneficiaryUnitsUpdated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link idaBeneficiaryFacetABI}__ and `eventName` set to `"Distributed"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x59aEeFC8421D59f260a5E5b959BFcc86B59C8415)
 */
export function useIdaBeneficiaryFacetDistributedEvent(
  config: Omit<
    UseContractEventConfig<typeof idaBeneficiaryFacetABI, 'Distributed'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof idaBeneficiaryFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: idaBeneficiaryFacetABI,
    address:
      idaBeneficiaryFacetAddress[
        chainId as keyof typeof idaBeneficiaryFacetAddress
      ],
    eventName: 'Distributed',
    ...config,
  } as UseContractEventConfig<typeof idaBeneficiaryFacetABI, 'Distributed'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link idaBeneficiaryFacetABI}__ and `eventName` set to `"RoleAdminChanged"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x59aEeFC8421D59f260a5E5b959BFcc86B59C8415)
 */
export function useIdaBeneficiaryFacetRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof idaBeneficiaryFacetABI, 'RoleAdminChanged'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof idaBeneficiaryFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: idaBeneficiaryFacetABI,
    address:
      idaBeneficiaryFacetAddress[
        chainId as keyof typeof idaBeneficiaryFacetAddress
      ],
    eventName: 'RoleAdminChanged',
    ...config,
  } as UseContractEventConfig<
    typeof idaBeneficiaryFacetABI,
    'RoleAdminChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link idaBeneficiaryFacetABI}__ and `eventName` set to `"RoleGranted"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x59aEeFC8421D59f260a5E5b959BFcc86B59C8415)
 */
export function useIdaBeneficiaryFacetRoleGrantedEvent(
  config: Omit<
    UseContractEventConfig<typeof idaBeneficiaryFacetABI, 'RoleGranted'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof idaBeneficiaryFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: idaBeneficiaryFacetABI,
    address:
      idaBeneficiaryFacetAddress[
        chainId as keyof typeof idaBeneficiaryFacetAddress
      ],
    eventName: 'RoleGranted',
    ...config,
  } as UseContractEventConfig<typeof idaBeneficiaryFacetABI, 'RoleGranted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link idaBeneficiaryFacetABI}__ and `eventName` set to `"RoleRevoked"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x59aEeFC8421D59f260a5E5b959BFcc86B59C8415)
 */
export function useIdaBeneficiaryFacetRoleRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof idaBeneficiaryFacetABI, 'RoleRevoked'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof idaBeneficiaryFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: idaBeneficiaryFacetABI,
    address:
      idaBeneficiaryFacetAddress[
        chainId as keyof typeof idaBeneficiaryFacetAddress
      ],
    eventName: 'RoleRevoked',
    ...config,
  } as UseContractEventConfig<typeof idaBeneficiaryFacetABI, 'RoleRevoked'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link idaBeneficiaryFacetABI}__ and `eventName` set to `"TokenSet"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x59aEeFC8421D59f260a5E5b959BFcc86B59C8415)
 */
export function useIdaBeneficiaryFacetTokenSetEvent(
  config: Omit<
    UseContractEventConfig<typeof idaBeneficiaryFacetABI, 'TokenSet'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof idaBeneficiaryFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: idaBeneficiaryFacetABI,
    address:
      idaBeneficiaryFacetAddress[
        chainId as keyof typeof idaBeneficiaryFacetAddress
      ],
    eventName: 'TokenSet',
    ...config,
  } as UseContractEventConfig<typeof idaBeneficiaryFacetABI, 'TokenSet'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nativeStewardLicenseFacetABI}__.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3A62C85a8629f81124E2dBA3FaBE63880533D5D7)
 */
export function useNativeStewardLicenseFacetRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof nativeStewardLicenseFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof nativeStewardLicenseFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address'
  > & { chainId?: keyof typeof nativeStewardLicenseFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: nativeStewardLicenseFacetABI,
    address:
      nativeStewardLicenseFacetAddress[
        chainId as keyof typeof nativeStewardLicenseFacetAddress
      ],
    ...config,
  } as UseContractReadConfig<
    typeof nativeStewardLicenseFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nativeStewardLicenseFacetABI}__ and `functionName` set to `"balanceOf"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3A62C85a8629f81124E2dBA3FaBE63880533D5D7)
 */
export function useNativeStewardLicenseFacetBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<
    typeof nativeStewardLicenseFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof nativeStewardLicenseFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nativeStewardLicenseFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: nativeStewardLicenseFacetABI,
    address:
      nativeStewardLicenseFacetAddress[
        chainId as keyof typeof nativeStewardLicenseFacetAddress
      ],
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof nativeStewardLicenseFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nativeStewardLicenseFacetABI}__ and `functionName` set to `"exists"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3A62C85a8629f81124E2dBA3FaBE63880533D5D7)
 */
export function useNativeStewardLicenseFacetExists<
  TFunctionName extends 'exists',
  TSelectData = ReadContractResult<
    typeof nativeStewardLicenseFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof nativeStewardLicenseFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nativeStewardLicenseFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: nativeStewardLicenseFacetABI,
    address:
      nativeStewardLicenseFacetAddress[
        chainId as keyof typeof nativeStewardLicenseFacetAddress
      ],
    functionName: 'exists',
    ...config,
  } as UseContractReadConfig<
    typeof nativeStewardLicenseFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nativeStewardLicenseFacetABI}__ and `functionName` set to `"getApproved"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3A62C85a8629f81124E2dBA3FaBE63880533D5D7)
 */
export function useNativeStewardLicenseFacetGetApproved<
  TFunctionName extends 'getApproved',
  TSelectData = ReadContractResult<
    typeof nativeStewardLicenseFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof nativeStewardLicenseFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nativeStewardLicenseFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: nativeStewardLicenseFacetABI,
    address:
      nativeStewardLicenseFacetAddress[
        chainId as keyof typeof nativeStewardLicenseFacetAddress
      ],
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<
    typeof nativeStewardLicenseFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nativeStewardLicenseFacetABI}__ and `functionName` set to `"isApprovedForAll"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3A62C85a8629f81124E2dBA3FaBE63880533D5D7)
 */
export function useNativeStewardLicenseFacetIsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<
    typeof nativeStewardLicenseFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof nativeStewardLicenseFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nativeStewardLicenseFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: nativeStewardLicenseFacetABI,
    address:
      nativeStewardLicenseFacetAddress[
        chainId as keyof typeof nativeStewardLicenseFacetAddress
      ],
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof nativeStewardLicenseFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nativeStewardLicenseFacetABI}__ and `functionName` set to `"maxTokenCount"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3A62C85a8629f81124E2dBA3FaBE63880533D5D7)
 */
export function useNativeStewardLicenseFacetMaxTokenCount<
  TFunctionName extends 'maxTokenCount',
  TSelectData = ReadContractResult<
    typeof nativeStewardLicenseFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof nativeStewardLicenseFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nativeStewardLicenseFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: nativeStewardLicenseFacetABI,
    address:
      nativeStewardLicenseFacetAddress[
        chainId as keyof typeof nativeStewardLicenseFacetAddress
      ],
    functionName: 'maxTokenCount',
    ...config,
  } as UseContractReadConfig<
    typeof nativeStewardLicenseFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nativeStewardLicenseFacetABI}__ and `functionName` set to `"minter"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3A62C85a8629f81124E2dBA3FaBE63880533D5D7)
 */
export function useNativeStewardLicenseFacetMinter<
  TFunctionName extends 'minter',
  TSelectData = ReadContractResult<
    typeof nativeStewardLicenseFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof nativeStewardLicenseFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nativeStewardLicenseFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: nativeStewardLicenseFacetABI,
    address:
      nativeStewardLicenseFacetAddress[
        chainId as keyof typeof nativeStewardLicenseFacetAddress
      ],
    functionName: 'minter',
    ...config,
  } as UseContractReadConfig<
    typeof nativeStewardLicenseFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nativeStewardLicenseFacetABI}__ and `functionName` set to `"name"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3A62C85a8629f81124E2dBA3FaBE63880533D5D7)
 */
export function useNativeStewardLicenseFacetName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<
    typeof nativeStewardLicenseFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof nativeStewardLicenseFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nativeStewardLicenseFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: nativeStewardLicenseFacetABI,
    address:
      nativeStewardLicenseFacetAddress[
        chainId as keyof typeof nativeStewardLicenseFacetAddress
      ],
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<
    typeof nativeStewardLicenseFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nativeStewardLicenseFacetABI}__ and `functionName` set to `"ownerOf"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3A62C85a8629f81124E2dBA3FaBE63880533D5D7)
 */
export function useNativeStewardLicenseFacetOwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<
    typeof nativeStewardLicenseFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof nativeStewardLicenseFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nativeStewardLicenseFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: nativeStewardLicenseFacetABI,
    address:
      nativeStewardLicenseFacetAddress[
        chainId as keyof typeof nativeStewardLicenseFacetAddress
      ],
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<
    typeof nativeStewardLicenseFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nativeStewardLicenseFacetABI}__ and `functionName` set to `"supportsInterface"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3A62C85a8629f81124E2dBA3FaBE63880533D5D7)
 */
export function useNativeStewardLicenseFacetSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<
    typeof nativeStewardLicenseFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof nativeStewardLicenseFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nativeStewardLicenseFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: nativeStewardLicenseFacetABI,
    address:
      nativeStewardLicenseFacetAddress[
        chainId as keyof typeof nativeStewardLicenseFacetAddress
      ],
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof nativeStewardLicenseFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nativeStewardLicenseFacetABI}__ and `functionName` set to `"symbol"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3A62C85a8629f81124E2dBA3FaBE63880533D5D7)
 */
export function useNativeStewardLicenseFacetSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<
    typeof nativeStewardLicenseFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof nativeStewardLicenseFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nativeStewardLicenseFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: nativeStewardLicenseFacetABI,
    address:
      nativeStewardLicenseFacetAddress[
        chainId as keyof typeof nativeStewardLicenseFacetAddress
      ],
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<
    typeof nativeStewardLicenseFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nativeStewardLicenseFacetABI}__ and `functionName` set to `"tokenByIndex"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3A62C85a8629f81124E2dBA3FaBE63880533D5D7)
 */
export function useNativeStewardLicenseFacetTokenByIndex<
  TFunctionName extends 'tokenByIndex',
  TSelectData = ReadContractResult<
    typeof nativeStewardLicenseFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof nativeStewardLicenseFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nativeStewardLicenseFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: nativeStewardLicenseFacetABI,
    address:
      nativeStewardLicenseFacetAddress[
        chainId as keyof typeof nativeStewardLicenseFacetAddress
      ],
    functionName: 'tokenByIndex',
    ...config,
  } as UseContractReadConfig<
    typeof nativeStewardLicenseFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nativeStewardLicenseFacetABI}__ and `functionName` set to `"tokenOfOwnerByIndex"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3A62C85a8629f81124E2dBA3FaBE63880533D5D7)
 */
export function useNativeStewardLicenseFacetTokenOfOwnerByIndex<
  TFunctionName extends 'tokenOfOwnerByIndex',
  TSelectData = ReadContractResult<
    typeof nativeStewardLicenseFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof nativeStewardLicenseFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nativeStewardLicenseFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: nativeStewardLicenseFacetABI,
    address:
      nativeStewardLicenseFacetAddress[
        chainId as keyof typeof nativeStewardLicenseFacetAddress
      ],
    functionName: 'tokenOfOwnerByIndex',
    ...config,
  } as UseContractReadConfig<
    typeof nativeStewardLicenseFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nativeStewardLicenseFacetABI}__ and `functionName` set to `"tokenURI"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3A62C85a8629f81124E2dBA3FaBE63880533D5D7)
 */
export function useNativeStewardLicenseFacetTokenUri<
  TFunctionName extends 'tokenURI',
  TSelectData = ReadContractResult<
    typeof nativeStewardLicenseFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof nativeStewardLicenseFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nativeStewardLicenseFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: nativeStewardLicenseFacetABI,
    address:
      nativeStewardLicenseFacetAddress[
        chainId as keyof typeof nativeStewardLicenseFacetAddress
      ],
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<
    typeof nativeStewardLicenseFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link nativeStewardLicenseFacetABI}__ and `functionName` set to `"totalSupply"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3A62C85a8629f81124E2dBA3FaBE63880533D5D7)
 */
export function useNativeStewardLicenseFacetTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<
    typeof nativeStewardLicenseFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof nativeStewardLicenseFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nativeStewardLicenseFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: nativeStewardLicenseFacetABI,
    address:
      nativeStewardLicenseFacetAddress[
        chainId as keyof typeof nativeStewardLicenseFacetAddress
      ],
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof nativeStewardLicenseFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nativeStewardLicenseFacetABI}__.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3A62C85a8629f81124E2dBA3FaBE63880533D5D7)
 */
export function useNativeStewardLicenseFacetWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof nativeStewardLicenseFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof nativeStewardLicenseFacetABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<
        typeof nativeStewardLicenseFacetABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof nativeStewardLicenseFacetABI,
    TFunctionName,
    TMode
  >({
    abi: nativeStewardLicenseFacetABI,
    address:
      nativeStewardLicenseFacetAddress[
        chainId as keyof typeof nativeStewardLicenseFacetAddress
      ],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nativeStewardLicenseFacetABI}__ and `functionName` set to `"addTokenToCollection"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3A62C85a8629f81124E2dBA3FaBE63880533D5D7)
 */
export function useNativeStewardLicenseFacetAddTokenToCollection<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof nativeStewardLicenseFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof nativeStewardLicenseFacetABI,
          'addTokenToCollection'
        >['request']['abi'],
        'addTokenToCollection',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'addTokenToCollection'
      }
    : UseContractWriteConfig<
        typeof nativeStewardLicenseFacetABI,
        'addTokenToCollection',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'addTokenToCollection'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof nativeStewardLicenseFacetABI,
    'addTokenToCollection',
    TMode
  >({
    abi: nativeStewardLicenseFacetABI,
    address:
      nativeStewardLicenseFacetAddress[
        chainId as keyof typeof nativeStewardLicenseFacetAddress
      ],
    functionName: 'addTokenToCollection',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nativeStewardLicenseFacetABI}__ and `functionName` set to `"addTokensToCollection"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3A62C85a8629f81124E2dBA3FaBE63880533D5D7)
 */
export function useNativeStewardLicenseFacetAddTokensToCollection<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof nativeStewardLicenseFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof nativeStewardLicenseFacetABI,
          'addTokensToCollection'
        >['request']['abi'],
        'addTokensToCollection',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'addTokensToCollection'
      }
    : UseContractWriteConfig<
        typeof nativeStewardLicenseFacetABI,
        'addTokensToCollection',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'addTokensToCollection'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof nativeStewardLicenseFacetABI,
    'addTokensToCollection',
    TMode
  >({
    abi: nativeStewardLicenseFacetABI,
    address:
      nativeStewardLicenseFacetAddress[
        chainId as keyof typeof nativeStewardLicenseFacetAddress
      ],
    functionName: 'addTokensToCollection',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nativeStewardLicenseFacetABI}__ and `functionName` set to `"addTokensWithBaseURIToCollection"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3A62C85a8629f81124E2dBA3FaBE63880533D5D7)
 */
export function useNativeStewardLicenseFacetAddTokensWithBaseUriToCollection<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof nativeStewardLicenseFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof nativeStewardLicenseFacetABI,
          'addTokensWithBaseURIToCollection'
        >['request']['abi'],
        'addTokensWithBaseURIToCollection',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'addTokensWithBaseURIToCollection'
      }
    : UseContractWriteConfig<
        typeof nativeStewardLicenseFacetABI,
        'addTokensWithBaseURIToCollection',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'addTokensWithBaseURIToCollection'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof nativeStewardLicenseFacetABI,
    'addTokensWithBaseURIToCollection',
    TMode
  >({
    abi: nativeStewardLicenseFacetABI,
    address:
      nativeStewardLicenseFacetAddress[
        chainId as keyof typeof nativeStewardLicenseFacetAddress
      ],
    functionName: 'addTokensWithBaseURIToCollection',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nativeStewardLicenseFacetABI}__ and `functionName` set to `"approve"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3A62C85a8629f81124E2dBA3FaBE63880533D5D7)
 */
export function useNativeStewardLicenseFacetApprove<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof nativeStewardLicenseFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof nativeStewardLicenseFacetABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'approve' }
    : UseContractWriteConfig<
        typeof nativeStewardLicenseFacetABI,
        'approve',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'approve'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof nativeStewardLicenseFacetABI,
    'approve',
    TMode
  >({
    abi: nativeStewardLicenseFacetABI,
    address:
      nativeStewardLicenseFacetAddress[
        chainId as keyof typeof nativeStewardLicenseFacetAddress
      ],
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nativeStewardLicenseFacetABI}__ and `functionName` set to `"initializeStewardLicense"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3A62C85a8629f81124E2dBA3FaBE63880533D5D7)
 */
export function useNativeStewardLicenseFacetInitializeStewardLicense<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof nativeStewardLicenseFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof nativeStewardLicenseFacetABI,
          'initializeStewardLicense'
        >['request']['abi'],
        'initializeStewardLicense',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'initializeStewardLicense'
      }
    : UseContractWriteConfig<
        typeof nativeStewardLicenseFacetABI,
        'initializeStewardLicense',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'initializeStewardLicense'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof nativeStewardLicenseFacetABI,
    'initializeStewardLicense',
    TMode
  >({
    abi: nativeStewardLicenseFacetABI,
    address:
      nativeStewardLicenseFacetAddress[
        chainId as keyof typeof nativeStewardLicenseFacetAddress
      ],
    functionName: 'initializeStewardLicense',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nativeStewardLicenseFacetABI}__ and `functionName` set to `"mintToken"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3A62C85a8629f81124E2dBA3FaBE63880533D5D7)
 */
export function useNativeStewardLicenseFacetMintToken<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof nativeStewardLicenseFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof nativeStewardLicenseFacetABI,
          'mintToken'
        >['request']['abi'],
        'mintToken',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'mintToken' }
    : UseContractWriteConfig<
        typeof nativeStewardLicenseFacetABI,
        'mintToken',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'mintToken'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof nativeStewardLicenseFacetABI,
    'mintToken',
    TMode
  >({
    abi: nativeStewardLicenseFacetABI,
    address:
      nativeStewardLicenseFacetAddress[
        chainId as keyof typeof nativeStewardLicenseFacetAddress
      ],
    functionName: 'mintToken',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nativeStewardLicenseFacetABI}__ and `functionName` set to `"safeTransferFrom"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3A62C85a8629f81124E2dBA3FaBE63880533D5D7)
 */
export function useNativeStewardLicenseFacetSafeTransferFrom<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof nativeStewardLicenseFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof nativeStewardLicenseFacetABI,
          'safeTransferFrom'
        >['request']['abi'],
        'safeTransferFrom',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'safeTransferFrom'
      }
    : UseContractWriteConfig<
        typeof nativeStewardLicenseFacetABI,
        'safeTransferFrom',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof nativeStewardLicenseFacetABI,
    'safeTransferFrom',
    TMode
  >({
    abi: nativeStewardLicenseFacetABI,
    address:
      nativeStewardLicenseFacetAddress[
        chainId as keyof typeof nativeStewardLicenseFacetAddress
      ],
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nativeStewardLicenseFacetABI}__ and `functionName` set to `"setApprovalForAll"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3A62C85a8629f81124E2dBA3FaBE63880533D5D7)
 */
export function useNativeStewardLicenseFacetSetApprovalForAll<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof nativeStewardLicenseFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof nativeStewardLicenseFacetABI,
          'setApprovalForAll'
        >['request']['abi'],
        'setApprovalForAll',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'setApprovalForAll'
      }
    : UseContractWriteConfig<
        typeof nativeStewardLicenseFacetABI,
        'setApprovalForAll',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof nativeStewardLicenseFacetABI,
    'setApprovalForAll',
    TMode
  >({
    abi: nativeStewardLicenseFacetABI,
    address:
      nativeStewardLicenseFacetAddress[
        chainId as keyof typeof nativeStewardLicenseFacetAddress
      ],
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nativeStewardLicenseFacetABI}__ and `functionName` set to `"transferFrom"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3A62C85a8629f81124E2dBA3FaBE63880533D5D7)
 */
export function useNativeStewardLicenseFacetTransferFrom<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof nativeStewardLicenseFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof nativeStewardLicenseFacetABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'transferFrom'
      }
    : UseContractWriteConfig<
        typeof nativeStewardLicenseFacetABI,
        'transferFrom',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'transferFrom'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof nativeStewardLicenseFacetABI,
    'transferFrom',
    TMode
  >({
    abi: nativeStewardLicenseFacetABI,
    address:
      nativeStewardLicenseFacetAddress[
        chainId as keyof typeof nativeStewardLicenseFacetAddress
      ],
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link nativeStewardLicenseFacetABI}__ and `functionName` set to `"triggerTransfer"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3A62C85a8629f81124E2dBA3FaBE63880533D5D7)
 */
export function useNativeStewardLicenseFacetTriggerTransfer<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof nativeStewardLicenseFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof nativeStewardLicenseFacetABI,
          'triggerTransfer'
        >['request']['abi'],
        'triggerTransfer',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'triggerTransfer'
      }
    : UseContractWriteConfig<
        typeof nativeStewardLicenseFacetABI,
        'triggerTransfer',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'triggerTransfer'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof nativeStewardLicenseFacetABI,
    'triggerTransfer',
    TMode
  >({
    abi: nativeStewardLicenseFacetABI,
    address:
      nativeStewardLicenseFacetAddress[
        chainId as keyof typeof nativeStewardLicenseFacetAddress
      ],
    functionName: 'triggerTransfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nativeStewardLicenseFacetABI}__.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3A62C85a8629f81124E2dBA3FaBE63880533D5D7)
 */
export function usePrepareNativeStewardLicenseFacetWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof nativeStewardLicenseFacetABI,
      TFunctionName
    >,
    'abi' | 'address'
  > & { chainId?: keyof typeof nativeStewardLicenseFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: nativeStewardLicenseFacetABI,
    address:
      nativeStewardLicenseFacetAddress[
        chainId as keyof typeof nativeStewardLicenseFacetAddress
      ],
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof nativeStewardLicenseFacetABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nativeStewardLicenseFacetABI}__ and `functionName` set to `"addTokenToCollection"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3A62C85a8629f81124E2dBA3FaBE63880533D5D7)
 */
export function usePrepareNativeStewardLicenseFacetAddTokenToCollection(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof nativeStewardLicenseFacetABI,
      'addTokenToCollection'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nativeStewardLicenseFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: nativeStewardLicenseFacetABI,
    address:
      nativeStewardLicenseFacetAddress[
        chainId as keyof typeof nativeStewardLicenseFacetAddress
      ],
    functionName: 'addTokenToCollection',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof nativeStewardLicenseFacetABI,
    'addTokenToCollection'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nativeStewardLicenseFacetABI}__ and `functionName` set to `"addTokensToCollection"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3A62C85a8629f81124E2dBA3FaBE63880533D5D7)
 */
export function usePrepareNativeStewardLicenseFacetAddTokensToCollection(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof nativeStewardLicenseFacetABI,
      'addTokensToCollection'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nativeStewardLicenseFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: nativeStewardLicenseFacetABI,
    address:
      nativeStewardLicenseFacetAddress[
        chainId as keyof typeof nativeStewardLicenseFacetAddress
      ],
    functionName: 'addTokensToCollection',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof nativeStewardLicenseFacetABI,
    'addTokensToCollection'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nativeStewardLicenseFacetABI}__ and `functionName` set to `"addTokensWithBaseURIToCollection"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3A62C85a8629f81124E2dBA3FaBE63880533D5D7)
 */
export function usePrepareNativeStewardLicenseFacetAddTokensWithBaseUriToCollection(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof nativeStewardLicenseFacetABI,
      'addTokensWithBaseURIToCollection'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nativeStewardLicenseFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: nativeStewardLicenseFacetABI,
    address:
      nativeStewardLicenseFacetAddress[
        chainId as keyof typeof nativeStewardLicenseFacetAddress
      ],
    functionName: 'addTokensWithBaseURIToCollection',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof nativeStewardLicenseFacetABI,
    'addTokensWithBaseURIToCollection'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nativeStewardLicenseFacetABI}__ and `functionName` set to `"approve"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3A62C85a8629f81124E2dBA3FaBE63880533D5D7)
 */
export function usePrepareNativeStewardLicenseFacetApprove(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof nativeStewardLicenseFacetABI,
      'approve'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nativeStewardLicenseFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: nativeStewardLicenseFacetABI,
    address:
      nativeStewardLicenseFacetAddress[
        chainId as keyof typeof nativeStewardLicenseFacetAddress
      ],
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof nativeStewardLicenseFacetABI,
    'approve'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nativeStewardLicenseFacetABI}__ and `functionName` set to `"initializeStewardLicense"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3A62C85a8629f81124E2dBA3FaBE63880533D5D7)
 */
export function usePrepareNativeStewardLicenseFacetInitializeStewardLicense(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof nativeStewardLicenseFacetABI,
      'initializeStewardLicense'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nativeStewardLicenseFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: nativeStewardLicenseFacetABI,
    address:
      nativeStewardLicenseFacetAddress[
        chainId as keyof typeof nativeStewardLicenseFacetAddress
      ],
    functionName: 'initializeStewardLicense',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof nativeStewardLicenseFacetABI,
    'initializeStewardLicense'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nativeStewardLicenseFacetABI}__ and `functionName` set to `"mintToken"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3A62C85a8629f81124E2dBA3FaBE63880533D5D7)
 */
export function usePrepareNativeStewardLicenseFacetMintToken(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof nativeStewardLicenseFacetABI,
      'mintToken'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nativeStewardLicenseFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: nativeStewardLicenseFacetABI,
    address:
      nativeStewardLicenseFacetAddress[
        chainId as keyof typeof nativeStewardLicenseFacetAddress
      ],
    functionName: 'mintToken',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof nativeStewardLicenseFacetABI,
    'mintToken'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nativeStewardLicenseFacetABI}__ and `functionName` set to `"safeTransferFrom"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3A62C85a8629f81124E2dBA3FaBE63880533D5D7)
 */
export function usePrepareNativeStewardLicenseFacetSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof nativeStewardLicenseFacetABI,
      'safeTransferFrom'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nativeStewardLicenseFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: nativeStewardLicenseFacetABI,
    address:
      nativeStewardLicenseFacetAddress[
        chainId as keyof typeof nativeStewardLicenseFacetAddress
      ],
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof nativeStewardLicenseFacetABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nativeStewardLicenseFacetABI}__ and `functionName` set to `"setApprovalForAll"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3A62C85a8629f81124E2dBA3FaBE63880533D5D7)
 */
export function usePrepareNativeStewardLicenseFacetSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof nativeStewardLicenseFacetABI,
      'setApprovalForAll'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nativeStewardLicenseFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: nativeStewardLicenseFacetABI,
    address:
      nativeStewardLicenseFacetAddress[
        chainId as keyof typeof nativeStewardLicenseFacetAddress
      ],
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof nativeStewardLicenseFacetABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nativeStewardLicenseFacetABI}__ and `functionName` set to `"transferFrom"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3A62C85a8629f81124E2dBA3FaBE63880533D5D7)
 */
export function usePrepareNativeStewardLicenseFacetTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof nativeStewardLicenseFacetABI,
      'transferFrom'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nativeStewardLicenseFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: nativeStewardLicenseFacetABI,
    address:
      nativeStewardLicenseFacetAddress[
        chainId as keyof typeof nativeStewardLicenseFacetAddress
      ],
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof nativeStewardLicenseFacetABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link nativeStewardLicenseFacetABI}__ and `functionName` set to `"triggerTransfer"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3A62C85a8629f81124E2dBA3FaBE63880533D5D7)
 */
export function usePrepareNativeStewardLicenseFacetTriggerTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof nativeStewardLicenseFacetABI,
      'triggerTransfer'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof nativeStewardLicenseFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: nativeStewardLicenseFacetABI,
    address:
      nativeStewardLicenseFacetAddress[
        chainId as keyof typeof nativeStewardLicenseFacetAddress
      ],
    functionName: 'triggerTransfer',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof nativeStewardLicenseFacetABI,
    'triggerTransfer'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link nativeStewardLicenseFacetABI}__.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3A62C85a8629f81124E2dBA3FaBE63880533D5D7)
 */
export function useNativeStewardLicenseFacetEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof nativeStewardLicenseFacetABI, TEventName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof nativeStewardLicenseFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: nativeStewardLicenseFacetABI,
    address:
      nativeStewardLicenseFacetAddress[
        chainId as keyof typeof nativeStewardLicenseFacetAddress
      ],
    ...config,
  } as UseContractEventConfig<typeof nativeStewardLicenseFacetABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link nativeStewardLicenseFacetABI}__ and `eventName` set to `"Approval"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3A62C85a8629f81124E2dBA3FaBE63880533D5D7)
 */
export function useNativeStewardLicenseFacetApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof nativeStewardLicenseFacetABI, 'Approval'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof nativeStewardLicenseFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: nativeStewardLicenseFacetABI,
    address:
      nativeStewardLicenseFacetAddress[
        chainId as keyof typeof nativeStewardLicenseFacetAddress
      ],
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof nativeStewardLicenseFacetABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link nativeStewardLicenseFacetABI}__ and `eventName` set to `"ApprovalForAll"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3A62C85a8629f81124E2dBA3FaBE63880533D5D7)
 */
export function useNativeStewardLicenseFacetApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<
      typeof nativeStewardLicenseFacetABI,
      'ApprovalForAll'
    >,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof nativeStewardLicenseFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: nativeStewardLicenseFacetABI,
    address:
      nativeStewardLicenseFacetAddress[
        chainId as keyof typeof nativeStewardLicenseFacetAddress
      ],
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<
    typeof nativeStewardLicenseFacetABI,
    'ApprovalForAll'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link nativeStewardLicenseFacetABI}__ and `eventName` set to `"RoleAdminChanged"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3A62C85a8629f81124E2dBA3FaBE63880533D5D7)
 */
export function useNativeStewardLicenseFacetRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof nativeStewardLicenseFacetABI,
      'RoleAdminChanged'
    >,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof nativeStewardLicenseFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: nativeStewardLicenseFacetABI,
    address:
      nativeStewardLicenseFacetAddress[
        chainId as keyof typeof nativeStewardLicenseFacetAddress
      ],
    eventName: 'RoleAdminChanged',
    ...config,
  } as UseContractEventConfig<
    typeof nativeStewardLicenseFacetABI,
    'RoleAdminChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link nativeStewardLicenseFacetABI}__ and `eventName` set to `"RoleGranted"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3A62C85a8629f81124E2dBA3FaBE63880533D5D7)
 */
export function useNativeStewardLicenseFacetRoleGrantedEvent(
  config: Omit<
    UseContractEventConfig<typeof nativeStewardLicenseFacetABI, 'RoleGranted'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof nativeStewardLicenseFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: nativeStewardLicenseFacetABI,
    address:
      nativeStewardLicenseFacetAddress[
        chainId as keyof typeof nativeStewardLicenseFacetAddress
      ],
    eventName: 'RoleGranted',
    ...config,
  } as UseContractEventConfig<
    typeof nativeStewardLicenseFacetABI,
    'RoleGranted'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link nativeStewardLicenseFacetABI}__ and `eventName` set to `"RoleRevoked"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3A62C85a8629f81124E2dBA3FaBE63880533D5D7)
 */
export function useNativeStewardLicenseFacetRoleRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof nativeStewardLicenseFacetABI, 'RoleRevoked'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof nativeStewardLicenseFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: nativeStewardLicenseFacetABI,
    address:
      nativeStewardLicenseFacetAddress[
        chainId as keyof typeof nativeStewardLicenseFacetAddress
      ],
    eventName: 'RoleRevoked',
    ...config,
  } as UseContractEventConfig<
    typeof nativeStewardLicenseFacetABI,
    'RoleRevoked'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link nativeStewardLicenseFacetABI}__ and `eventName` set to `"Transfer"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3A62C85a8629f81124E2dBA3FaBE63880533D5D7)
 */
export function useNativeStewardLicenseFacetTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof nativeStewardLicenseFacetABI, 'Transfer'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof nativeStewardLicenseFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: nativeStewardLicenseFacetABI,
    address:
      nativeStewardLicenseFacetAddress[
        chainId as keyof typeof nativeStewardLicenseFacetAddress
      ],
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof nativeStewardLicenseFacetABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link periodicPcoParamsFacetABI}__.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xFfbd1FF3cEc7B5Ae502f1E62c7E1291C3110Da8C)
 */
export function usePeriodicPcoParamsFacetRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof periodicPcoParamsFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof periodicPcoParamsFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address'
  > & { chainId?: keyof typeof periodicPcoParamsFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: periodicPcoParamsFacetABI,
    address:
      periodicPcoParamsFacetAddress[
        chainId as keyof typeof periodicPcoParamsFacetAddress
      ],
    ...config,
  } as UseContractReadConfig<
    typeof periodicPcoParamsFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link periodicPcoParamsFacetABI}__ and `functionName` set to `"feeDenominator"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xFfbd1FF3cEc7B5Ae502f1E62c7E1291C3110Da8C)
 */
export function usePeriodicPcoParamsFacetFeeDenominator<
  TFunctionName extends 'feeDenominator',
  TSelectData = ReadContractResult<
    typeof periodicPcoParamsFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof periodicPcoParamsFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof periodicPcoParamsFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: periodicPcoParamsFacetABI,
    address:
      periodicPcoParamsFacetAddress[
        chainId as keyof typeof periodicPcoParamsFacetAddress
      ],
    functionName: 'feeDenominator',
    ...config,
  } as UseContractReadConfig<
    typeof periodicPcoParamsFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link periodicPcoParamsFacetABI}__ and `functionName` set to `"feeNumerator"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xFfbd1FF3cEc7B5Ae502f1E62c7E1291C3110Da8C)
 */
export function usePeriodicPcoParamsFacetFeeNumerator<
  TFunctionName extends 'feeNumerator',
  TSelectData = ReadContractResult<
    typeof periodicPcoParamsFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof periodicPcoParamsFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof periodicPcoParamsFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: periodicPcoParamsFacetABI,
    address:
      periodicPcoParamsFacetAddress[
        chainId as keyof typeof periodicPcoParamsFacetAddress
      ],
    functionName: 'feeNumerator',
    ...config,
  } as UseContractReadConfig<
    typeof periodicPcoParamsFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link periodicPcoParamsFacetABI}__ and `functionName` set to `"licensePeriod"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xFfbd1FF3cEc7B5Ae502f1E62c7E1291C3110Da8C)
 */
export function usePeriodicPcoParamsFacetLicensePeriod<
  TFunctionName extends 'licensePeriod',
  TSelectData = ReadContractResult<
    typeof periodicPcoParamsFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof periodicPcoParamsFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof periodicPcoParamsFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: periodicPcoParamsFacetABI,
    address:
      periodicPcoParamsFacetAddress[
        chainId as keyof typeof periodicPcoParamsFacetAddress
      ],
    functionName: 'licensePeriod',
    ...config,
  } as UseContractReadConfig<
    typeof periodicPcoParamsFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link periodicPcoParamsFacetABI}__.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xFfbd1FF3cEc7B5Ae502f1E62c7E1291C3110Da8C)
 */
export function usePeriodicPcoParamsFacetWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof periodicPcoParamsFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof periodicPcoParamsFacetABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<
        typeof periodicPcoParamsFacetABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof periodicPcoParamsFacetABI,
    TFunctionName,
    TMode
  >({
    abi: periodicPcoParamsFacetABI,
    address:
      periodicPcoParamsFacetAddress[
        chainId as keyof typeof periodicPcoParamsFacetAddress
      ],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link periodicPcoParamsFacetABI}__ and `functionName` set to `"initializePCOParams"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xFfbd1FF3cEc7B5Ae502f1E62c7E1291C3110Da8C)
 */
export function usePeriodicPcoParamsFacetInitializePcoParams<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof periodicPcoParamsFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof periodicPcoParamsFacetABI,
          'initializePCOParams'
        >['request']['abi'],
        'initializePCOParams',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'initializePCOParams'
      }
    : UseContractWriteConfig<
        typeof periodicPcoParamsFacetABI,
        'initializePCOParams',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'initializePCOParams'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof periodicPcoParamsFacetABI,
    'initializePCOParams',
    TMode
  >({
    abi: periodicPcoParamsFacetABI,
    address:
      periodicPcoParamsFacetAddress[
        chainId as keyof typeof periodicPcoParamsFacetAddress
      ],
    functionName: 'initializePCOParams',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link periodicPcoParamsFacetABI}__ and `functionName` set to `"setFeeDenominator"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xFfbd1FF3cEc7B5Ae502f1E62c7E1291C3110Da8C)
 */
export function usePeriodicPcoParamsFacetSetFeeDenominator<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof periodicPcoParamsFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof periodicPcoParamsFacetABI,
          'setFeeDenominator'
        >['request']['abi'],
        'setFeeDenominator',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'setFeeDenominator'
      }
    : UseContractWriteConfig<
        typeof periodicPcoParamsFacetABI,
        'setFeeDenominator',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setFeeDenominator'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof periodicPcoParamsFacetABI,
    'setFeeDenominator',
    TMode
  >({
    abi: periodicPcoParamsFacetABI,
    address:
      periodicPcoParamsFacetAddress[
        chainId as keyof typeof periodicPcoParamsFacetAddress
      ],
    functionName: 'setFeeDenominator',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link periodicPcoParamsFacetABI}__ and `functionName` set to `"setFeeNumerator"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xFfbd1FF3cEc7B5Ae502f1E62c7E1291C3110Da8C)
 */
export function usePeriodicPcoParamsFacetSetFeeNumerator<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof periodicPcoParamsFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof periodicPcoParamsFacetABI,
          'setFeeNumerator'
        >['request']['abi'],
        'setFeeNumerator',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'setFeeNumerator'
      }
    : UseContractWriteConfig<
        typeof periodicPcoParamsFacetABI,
        'setFeeNumerator',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setFeeNumerator'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof periodicPcoParamsFacetABI,
    'setFeeNumerator',
    TMode
  >({
    abi: periodicPcoParamsFacetABI,
    address:
      periodicPcoParamsFacetAddress[
        chainId as keyof typeof periodicPcoParamsFacetAddress
      ],
    functionName: 'setFeeNumerator',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link periodicPcoParamsFacetABI}__ and `functionName` set to `"setLicensePeriod"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xFfbd1FF3cEc7B5Ae502f1E62c7E1291C3110Da8C)
 */
export function usePeriodicPcoParamsFacetSetLicensePeriod<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof periodicPcoParamsFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof periodicPcoParamsFacetABI,
          'setLicensePeriod'
        >['request']['abi'],
        'setLicensePeriod',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'setLicensePeriod'
      }
    : UseContractWriteConfig<
        typeof periodicPcoParamsFacetABI,
        'setLicensePeriod',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setLicensePeriod'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof periodicPcoParamsFacetABI,
    'setLicensePeriod',
    TMode
  >({
    abi: periodicPcoParamsFacetABI,
    address:
      periodicPcoParamsFacetAddress[
        chainId as keyof typeof periodicPcoParamsFacetAddress
      ],
    functionName: 'setLicensePeriod',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link periodicPcoParamsFacetABI}__ and `functionName` set to `"setPCOParameters"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xFfbd1FF3cEc7B5Ae502f1E62c7E1291C3110Da8C)
 */
export function usePeriodicPcoParamsFacetSetPcoParameters<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof periodicPcoParamsFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof periodicPcoParamsFacetABI,
          'setPCOParameters'
        >['request']['abi'],
        'setPCOParameters',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'setPCOParameters'
      }
    : UseContractWriteConfig<
        typeof periodicPcoParamsFacetABI,
        'setPCOParameters',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setPCOParameters'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof periodicPcoParamsFacetABI,
    'setPCOParameters',
    TMode
  >({
    abi: periodicPcoParamsFacetABI,
    address:
      periodicPcoParamsFacetAddress[
        chainId as keyof typeof periodicPcoParamsFacetAddress
      ],
    functionName: 'setPCOParameters',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link periodicPcoParamsFacetABI}__.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xFfbd1FF3cEc7B5Ae502f1E62c7E1291C3110Da8C)
 */
export function usePreparePeriodicPcoParamsFacetWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof periodicPcoParamsFacetABI,
      TFunctionName
    >,
    'abi' | 'address'
  > & { chainId?: keyof typeof periodicPcoParamsFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: periodicPcoParamsFacetABI,
    address:
      periodicPcoParamsFacetAddress[
        chainId as keyof typeof periodicPcoParamsFacetAddress
      ],
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof periodicPcoParamsFacetABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link periodicPcoParamsFacetABI}__ and `functionName` set to `"initializePCOParams"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xFfbd1FF3cEc7B5Ae502f1E62c7E1291C3110Da8C)
 */
export function usePreparePeriodicPcoParamsFacetInitializePcoParams(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof periodicPcoParamsFacetABI,
      'initializePCOParams'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof periodicPcoParamsFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: periodicPcoParamsFacetABI,
    address:
      periodicPcoParamsFacetAddress[
        chainId as keyof typeof periodicPcoParamsFacetAddress
      ],
    functionName: 'initializePCOParams',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof periodicPcoParamsFacetABI,
    'initializePCOParams'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link periodicPcoParamsFacetABI}__ and `functionName` set to `"setFeeDenominator"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xFfbd1FF3cEc7B5Ae502f1E62c7E1291C3110Da8C)
 */
export function usePreparePeriodicPcoParamsFacetSetFeeDenominator(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof periodicPcoParamsFacetABI,
      'setFeeDenominator'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof periodicPcoParamsFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: periodicPcoParamsFacetABI,
    address:
      periodicPcoParamsFacetAddress[
        chainId as keyof typeof periodicPcoParamsFacetAddress
      ],
    functionName: 'setFeeDenominator',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof periodicPcoParamsFacetABI,
    'setFeeDenominator'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link periodicPcoParamsFacetABI}__ and `functionName` set to `"setFeeNumerator"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xFfbd1FF3cEc7B5Ae502f1E62c7E1291C3110Da8C)
 */
export function usePreparePeriodicPcoParamsFacetSetFeeNumerator(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof periodicPcoParamsFacetABI,
      'setFeeNumerator'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof periodicPcoParamsFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: periodicPcoParamsFacetABI,
    address:
      periodicPcoParamsFacetAddress[
        chainId as keyof typeof periodicPcoParamsFacetAddress
      ],
    functionName: 'setFeeNumerator',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof periodicPcoParamsFacetABI,
    'setFeeNumerator'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link periodicPcoParamsFacetABI}__ and `functionName` set to `"setLicensePeriod"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xFfbd1FF3cEc7B5Ae502f1E62c7E1291C3110Da8C)
 */
export function usePreparePeriodicPcoParamsFacetSetLicensePeriod(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof periodicPcoParamsFacetABI,
      'setLicensePeriod'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof periodicPcoParamsFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: periodicPcoParamsFacetABI,
    address:
      periodicPcoParamsFacetAddress[
        chainId as keyof typeof periodicPcoParamsFacetAddress
      ],
    functionName: 'setLicensePeriod',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof periodicPcoParamsFacetABI,
    'setLicensePeriod'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link periodicPcoParamsFacetABI}__ and `functionName` set to `"setPCOParameters"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xFfbd1FF3cEc7B5Ae502f1E62c7E1291C3110Da8C)
 */
export function usePreparePeriodicPcoParamsFacetSetPcoParameters(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof periodicPcoParamsFacetABI,
      'setPCOParameters'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof periodicPcoParamsFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: periodicPcoParamsFacetABI,
    address:
      periodicPcoParamsFacetAddress[
        chainId as keyof typeof periodicPcoParamsFacetAddress
      ],
    functionName: 'setPCOParameters',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof periodicPcoParamsFacetABI,
    'setPCOParameters'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link periodicPcoParamsFacetABI}__.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xFfbd1FF3cEc7B5Ae502f1E62c7E1291C3110Da8C)
 */
export function usePeriodicPcoParamsFacetEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof periodicPcoParamsFacetABI, TEventName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof periodicPcoParamsFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: periodicPcoParamsFacetABI,
    address:
      periodicPcoParamsFacetAddress[
        chainId as keyof typeof periodicPcoParamsFacetAddress
      ],
    ...config,
  } as UseContractEventConfig<typeof periodicPcoParamsFacetABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link periodicPcoParamsFacetABI}__ and `eventName` set to `"FeeDenominatorSet"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xFfbd1FF3cEc7B5Ae502f1E62c7E1291C3110Da8C)
 */
export function usePeriodicPcoParamsFacetFeeDenominatorSetEvent(
  config: Omit<
    UseContractEventConfig<
      typeof periodicPcoParamsFacetABI,
      'FeeDenominatorSet'
    >,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof periodicPcoParamsFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: periodicPcoParamsFacetABI,
    address:
      periodicPcoParamsFacetAddress[
        chainId as keyof typeof periodicPcoParamsFacetAddress
      ],
    eventName: 'FeeDenominatorSet',
    ...config,
  } as UseContractEventConfig<
    typeof periodicPcoParamsFacetABI,
    'FeeDenominatorSet'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link periodicPcoParamsFacetABI}__ and `eventName` set to `"FeeNumeratorSet"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xFfbd1FF3cEc7B5Ae502f1E62c7E1291C3110Da8C)
 */
export function usePeriodicPcoParamsFacetFeeNumeratorSetEvent(
  config: Omit<
    UseContractEventConfig<typeof periodicPcoParamsFacetABI, 'FeeNumeratorSet'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof periodicPcoParamsFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: periodicPcoParamsFacetABI,
    address:
      periodicPcoParamsFacetAddress[
        chainId as keyof typeof periodicPcoParamsFacetAddress
      ],
    eventName: 'FeeNumeratorSet',
    ...config,
  } as UseContractEventConfig<
    typeof periodicPcoParamsFacetABI,
    'FeeNumeratorSet'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link periodicPcoParamsFacetABI}__ and `eventName` set to `"LicensePeriodSet"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xFfbd1FF3cEc7B5Ae502f1E62c7E1291C3110Da8C)
 */
export function usePeriodicPcoParamsFacetLicensePeriodSetEvent(
  config: Omit<
    UseContractEventConfig<
      typeof periodicPcoParamsFacetABI,
      'LicensePeriodSet'
    >,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof periodicPcoParamsFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: periodicPcoParamsFacetABI,
    address:
      periodicPcoParamsFacetAddress[
        chainId as keyof typeof periodicPcoParamsFacetAddress
      ],
    eventName: 'LicensePeriodSet',
    ...config,
  } as UseContractEventConfig<
    typeof periodicPcoParamsFacetABI,
    'LicensePeriodSet'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link periodicPcoParamsFacetABI}__ and `eventName` set to `"RoleAdminChanged"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xFfbd1FF3cEc7B5Ae502f1E62c7E1291C3110Da8C)
 */
export function usePeriodicPcoParamsFacetRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof periodicPcoParamsFacetABI,
      'RoleAdminChanged'
    >,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof periodicPcoParamsFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: periodicPcoParamsFacetABI,
    address:
      periodicPcoParamsFacetAddress[
        chainId as keyof typeof periodicPcoParamsFacetAddress
      ],
    eventName: 'RoleAdminChanged',
    ...config,
  } as UseContractEventConfig<
    typeof periodicPcoParamsFacetABI,
    'RoleAdminChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link periodicPcoParamsFacetABI}__ and `eventName` set to `"RoleGranted"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xFfbd1FF3cEc7B5Ae502f1E62c7E1291C3110Da8C)
 */
export function usePeriodicPcoParamsFacetRoleGrantedEvent(
  config: Omit<
    UseContractEventConfig<typeof periodicPcoParamsFacetABI, 'RoleGranted'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof periodicPcoParamsFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: periodicPcoParamsFacetABI,
    address:
      periodicPcoParamsFacetAddress[
        chainId as keyof typeof periodicPcoParamsFacetAddress
      ],
    eventName: 'RoleGranted',
    ...config,
  } as UseContractEventConfig<typeof periodicPcoParamsFacetABI, 'RoleGranted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link periodicPcoParamsFacetABI}__ and `eventName` set to `"RoleRevoked"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xFfbd1FF3cEc7B5Ae502f1E62c7E1291C3110Da8C)
 */
export function usePeriodicPcoParamsFacetRoleRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof periodicPcoParamsFacetABI, 'RoleRevoked'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof periodicPcoParamsFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: periodicPcoParamsFacetABI,
    address:
      periodicPcoParamsFacetAddress[
        chainId as keyof typeof periodicPcoParamsFacetAddress
      ],
    eventName: 'RoleRevoked',
    ...config,
  } as UseContractEventConfig<typeof periodicPcoParamsFacetABI, 'RoleRevoked'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wrappedErc721StewardLicenseFacetABI}__.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3e5D445B6C0F095121EBc91D55C386f195Ff1Af4)
 */
export function useWrappedErc721StewardLicenseFacetRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof wrappedErc721StewardLicenseFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof wrappedErc721StewardLicenseFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address'
  > & {
    chainId?: keyof typeof wrappedErc721StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: wrappedErc721StewardLicenseFacetABI,
    address:
      wrappedErc721StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc721StewardLicenseFacetAddress
      ],
    ...config,
  } as UseContractReadConfig<
    typeof wrappedErc721StewardLicenseFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wrappedErc721StewardLicenseFacetABI}__ and `functionName` set to `"balanceOf"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3e5D445B6C0F095121EBc91D55C386f195Ff1Af4)
 */
export function useWrappedErc721StewardLicenseFacetBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<
    typeof wrappedErc721StewardLicenseFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof wrappedErc721StewardLicenseFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & {
    chainId?: keyof typeof wrappedErc721StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: wrappedErc721StewardLicenseFacetABI,
    address:
      wrappedErc721StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc721StewardLicenseFacetAddress
      ],
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof wrappedErc721StewardLicenseFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wrappedErc721StewardLicenseFacetABI}__ and `functionName` set to `"exists"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3e5D445B6C0F095121EBc91D55C386f195Ff1Af4)
 */
export function useWrappedErc721StewardLicenseFacetExists<
  TFunctionName extends 'exists',
  TSelectData = ReadContractResult<
    typeof wrappedErc721StewardLicenseFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof wrappedErc721StewardLicenseFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & {
    chainId?: keyof typeof wrappedErc721StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: wrappedErc721StewardLicenseFacetABI,
    address:
      wrappedErc721StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc721StewardLicenseFacetAddress
      ],
    functionName: 'exists',
    ...config,
  } as UseContractReadConfig<
    typeof wrappedErc721StewardLicenseFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wrappedErc721StewardLicenseFacetABI}__ and `functionName` set to `"getApproved"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3e5D445B6C0F095121EBc91D55C386f195Ff1Af4)
 */
export function useWrappedErc721StewardLicenseFacetGetApproved<
  TFunctionName extends 'getApproved',
  TSelectData = ReadContractResult<
    typeof wrappedErc721StewardLicenseFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof wrappedErc721StewardLicenseFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & {
    chainId?: keyof typeof wrappedErc721StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: wrappedErc721StewardLicenseFacetABI,
    address:
      wrappedErc721StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc721StewardLicenseFacetAddress
      ],
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<
    typeof wrappedErc721StewardLicenseFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wrappedErc721StewardLicenseFacetABI}__ and `functionName` set to `"isApprovedForAll"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3e5D445B6C0F095121EBc91D55C386f195Ff1Af4)
 */
export function useWrappedErc721StewardLicenseFacetIsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<
    typeof wrappedErc721StewardLicenseFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof wrappedErc721StewardLicenseFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & {
    chainId?: keyof typeof wrappedErc721StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: wrappedErc721StewardLicenseFacetABI,
    address:
      wrappedErc721StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc721StewardLicenseFacetAddress
      ],
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof wrappedErc721StewardLicenseFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wrappedErc721StewardLicenseFacetABI}__ and `functionName` set to `"maxTokenCount"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3e5D445B6C0F095121EBc91D55C386f195Ff1Af4)
 */
export function useWrappedErc721StewardLicenseFacetMaxTokenCount<
  TFunctionName extends 'maxTokenCount',
  TSelectData = ReadContractResult<
    typeof wrappedErc721StewardLicenseFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof wrappedErc721StewardLicenseFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & {
    chainId?: keyof typeof wrappedErc721StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: wrappedErc721StewardLicenseFacetABI,
    address:
      wrappedErc721StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc721StewardLicenseFacetAddress
      ],
    functionName: 'maxTokenCount',
    ...config,
  } as UseContractReadConfig<
    typeof wrappedErc721StewardLicenseFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wrappedErc721StewardLicenseFacetABI}__ and `functionName` set to `"minter"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3e5D445B6C0F095121EBc91D55C386f195Ff1Af4)
 */
export function useWrappedErc721StewardLicenseFacetMinter<
  TFunctionName extends 'minter',
  TSelectData = ReadContractResult<
    typeof wrappedErc721StewardLicenseFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof wrappedErc721StewardLicenseFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & {
    chainId?: keyof typeof wrappedErc721StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: wrappedErc721StewardLicenseFacetABI,
    address:
      wrappedErc721StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc721StewardLicenseFacetAddress
      ],
    functionName: 'minter',
    ...config,
  } as UseContractReadConfig<
    typeof wrappedErc721StewardLicenseFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wrappedErc721StewardLicenseFacetABI}__ and `functionName` set to `"name"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3e5D445B6C0F095121EBc91D55C386f195Ff1Af4)
 */
export function useWrappedErc721StewardLicenseFacetName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<
    typeof wrappedErc721StewardLicenseFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof wrappedErc721StewardLicenseFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & {
    chainId?: keyof typeof wrappedErc721StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: wrappedErc721StewardLicenseFacetABI,
    address:
      wrappedErc721StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc721StewardLicenseFacetAddress
      ],
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<
    typeof wrappedErc721StewardLicenseFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wrappedErc721StewardLicenseFacetABI}__ and `functionName` set to `"onERC721Received"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3e5D445B6C0F095121EBc91D55C386f195Ff1Af4)
 */
export function useWrappedErc721StewardLicenseFacetOnErc721Received<
  TFunctionName extends 'onERC721Received',
  TSelectData = ReadContractResult<
    typeof wrappedErc721StewardLicenseFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof wrappedErc721StewardLicenseFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & {
    chainId?: keyof typeof wrappedErc721StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: wrappedErc721StewardLicenseFacetABI,
    address:
      wrappedErc721StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc721StewardLicenseFacetAddress
      ],
    functionName: 'onERC721Received',
    ...config,
  } as UseContractReadConfig<
    typeof wrappedErc721StewardLicenseFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wrappedErc721StewardLicenseFacetABI}__ and `functionName` set to `"ownerOf"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3e5D445B6C0F095121EBc91D55C386f195Ff1Af4)
 */
export function useWrappedErc721StewardLicenseFacetOwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<
    typeof wrappedErc721StewardLicenseFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof wrappedErc721StewardLicenseFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & {
    chainId?: keyof typeof wrappedErc721StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: wrappedErc721StewardLicenseFacetABI,
    address:
      wrappedErc721StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc721StewardLicenseFacetAddress
      ],
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<
    typeof wrappedErc721StewardLicenseFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wrappedErc721StewardLicenseFacetABI}__ and `functionName` set to `"supportsInterface"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3e5D445B6C0F095121EBc91D55C386f195Ff1Af4)
 */
export function useWrappedErc721StewardLicenseFacetSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<
    typeof wrappedErc721StewardLicenseFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof wrappedErc721StewardLicenseFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & {
    chainId?: keyof typeof wrappedErc721StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: wrappedErc721StewardLicenseFacetABI,
    address:
      wrappedErc721StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc721StewardLicenseFacetAddress
      ],
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof wrappedErc721StewardLicenseFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wrappedErc721StewardLicenseFacetABI}__ and `functionName` set to `"symbol"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3e5D445B6C0F095121EBc91D55C386f195Ff1Af4)
 */
export function useWrappedErc721StewardLicenseFacetSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<
    typeof wrappedErc721StewardLicenseFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof wrappedErc721StewardLicenseFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & {
    chainId?: keyof typeof wrappedErc721StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: wrappedErc721StewardLicenseFacetABI,
    address:
      wrappedErc721StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc721StewardLicenseFacetAddress
      ],
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<
    typeof wrappedErc721StewardLicenseFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wrappedErc721StewardLicenseFacetABI}__ and `functionName` set to `"tokenByIndex"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3e5D445B6C0F095121EBc91D55C386f195Ff1Af4)
 */
export function useWrappedErc721StewardLicenseFacetTokenByIndex<
  TFunctionName extends 'tokenByIndex',
  TSelectData = ReadContractResult<
    typeof wrappedErc721StewardLicenseFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof wrappedErc721StewardLicenseFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & {
    chainId?: keyof typeof wrappedErc721StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: wrappedErc721StewardLicenseFacetABI,
    address:
      wrappedErc721StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc721StewardLicenseFacetAddress
      ],
    functionName: 'tokenByIndex',
    ...config,
  } as UseContractReadConfig<
    typeof wrappedErc721StewardLicenseFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wrappedErc721StewardLicenseFacetABI}__ and `functionName` set to `"tokenOfOwnerByIndex"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3e5D445B6C0F095121EBc91D55C386f195Ff1Af4)
 */
export function useWrappedErc721StewardLicenseFacetTokenOfOwnerByIndex<
  TFunctionName extends 'tokenOfOwnerByIndex',
  TSelectData = ReadContractResult<
    typeof wrappedErc721StewardLicenseFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof wrappedErc721StewardLicenseFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & {
    chainId?: keyof typeof wrappedErc721StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: wrappedErc721StewardLicenseFacetABI,
    address:
      wrappedErc721StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc721StewardLicenseFacetAddress
      ],
    functionName: 'tokenOfOwnerByIndex',
    ...config,
  } as UseContractReadConfig<
    typeof wrappedErc721StewardLicenseFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wrappedErc721StewardLicenseFacetABI}__ and `functionName` set to `"tokenURI"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3e5D445B6C0F095121EBc91D55C386f195Ff1Af4)
 */
export function useWrappedErc721StewardLicenseFacetTokenUri<
  TFunctionName extends 'tokenURI',
  TSelectData = ReadContractResult<
    typeof wrappedErc721StewardLicenseFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof wrappedErc721StewardLicenseFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & {
    chainId?: keyof typeof wrappedErc721StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: wrappedErc721StewardLicenseFacetABI,
    address:
      wrappedErc721StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc721StewardLicenseFacetAddress
      ],
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<
    typeof wrappedErc721StewardLicenseFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wrappedErc721StewardLicenseFacetABI}__ and `functionName` set to `"totalSupply"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3e5D445B6C0F095121EBc91D55C386f195Ff1Af4)
 */
export function useWrappedErc721StewardLicenseFacetTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<
    typeof wrappedErc721StewardLicenseFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof wrappedErc721StewardLicenseFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & {
    chainId?: keyof typeof wrappedErc721StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: wrappedErc721StewardLicenseFacetABI,
    address:
      wrappedErc721StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc721StewardLicenseFacetAddress
      ],
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof wrappedErc721StewardLicenseFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link wrappedErc721StewardLicenseFacetABI}__.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3e5D445B6C0F095121EBc91D55C386f195Ff1Af4)
 */
export function useWrappedErc721StewardLicenseFacetWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof wrappedErc721StewardLicenseFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof wrappedErc721StewardLicenseFacetABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<
        typeof wrappedErc721StewardLicenseFacetABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof wrappedErc721StewardLicenseFacetABI,
    TFunctionName,
    TMode
  >({
    abi: wrappedErc721StewardLicenseFacetABI,
    address:
      wrappedErc721StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc721StewardLicenseFacetAddress
      ],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link wrappedErc721StewardLicenseFacetABI}__ and `functionName` set to `"addTokenToCollection"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3e5D445B6C0F095121EBc91D55C386f195Ff1Af4)
 */
export function useWrappedErc721StewardLicenseFacetAddTokenToCollection<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof wrappedErc721StewardLicenseFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof wrappedErc721StewardLicenseFacetABI,
          'addTokenToCollection'
        >['request']['abi'],
        'addTokenToCollection',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'addTokenToCollection'
      }
    : UseContractWriteConfig<
        typeof wrappedErc721StewardLicenseFacetABI,
        'addTokenToCollection',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'addTokenToCollection'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof wrappedErc721StewardLicenseFacetABI,
    'addTokenToCollection',
    TMode
  >({
    abi: wrappedErc721StewardLicenseFacetABI,
    address:
      wrappedErc721StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc721StewardLicenseFacetAddress
      ],
    functionName: 'addTokenToCollection',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link wrappedErc721StewardLicenseFacetABI}__ and `functionName` set to `"addTokensToCollection"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3e5D445B6C0F095121EBc91D55C386f195Ff1Af4)
 */
export function useWrappedErc721StewardLicenseFacetAddTokensToCollection<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof wrappedErc721StewardLicenseFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof wrappedErc721StewardLicenseFacetABI,
          'addTokensToCollection'
        >['request']['abi'],
        'addTokensToCollection',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'addTokensToCollection'
      }
    : UseContractWriteConfig<
        typeof wrappedErc721StewardLicenseFacetABI,
        'addTokensToCollection',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'addTokensToCollection'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof wrappedErc721StewardLicenseFacetABI,
    'addTokensToCollection',
    TMode
  >({
    abi: wrappedErc721StewardLicenseFacetABI,
    address:
      wrappedErc721StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc721StewardLicenseFacetAddress
      ],
    functionName: 'addTokensToCollection',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link wrappedErc721StewardLicenseFacetABI}__ and `functionName` set to `"addTokensWithBaseURIToCollection"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3e5D445B6C0F095121EBc91D55C386f195Ff1Af4)
 */
export function useWrappedErc721StewardLicenseFacetAddTokensWithBaseUriToCollection<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof wrappedErc721StewardLicenseFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof wrappedErc721StewardLicenseFacetABI,
          'addTokensWithBaseURIToCollection'
        >['request']['abi'],
        'addTokensWithBaseURIToCollection',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'addTokensWithBaseURIToCollection'
      }
    : UseContractWriteConfig<
        typeof wrappedErc721StewardLicenseFacetABI,
        'addTokensWithBaseURIToCollection',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'addTokensWithBaseURIToCollection'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof wrappedErc721StewardLicenseFacetABI,
    'addTokensWithBaseURIToCollection',
    TMode
  >({
    abi: wrappedErc721StewardLicenseFacetABI,
    address:
      wrappedErc721StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc721StewardLicenseFacetAddress
      ],
    functionName: 'addTokensWithBaseURIToCollection',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link wrappedErc721StewardLicenseFacetABI}__ and `functionName` set to `"approve"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3e5D445B6C0F095121EBc91D55C386f195Ff1Af4)
 */
export function useWrappedErc721StewardLicenseFacetApprove<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof wrappedErc721StewardLicenseFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof wrappedErc721StewardLicenseFacetABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'approve' }
    : UseContractWriteConfig<
        typeof wrappedErc721StewardLicenseFacetABI,
        'approve',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'approve'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof wrappedErc721StewardLicenseFacetABI,
    'approve',
    TMode
  >({
    abi: wrappedErc721StewardLicenseFacetABI,
    address:
      wrappedErc721StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc721StewardLicenseFacetAddress
      ],
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link wrappedErc721StewardLicenseFacetABI}__ and `functionName` set to `"initializeWrappedStewardLicense"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3e5D445B6C0F095121EBc91D55C386f195Ff1Af4)
 */
export function useWrappedErc721StewardLicenseFacetInitializeWrappedStewardLicense<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof wrappedErc721StewardLicenseFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof wrappedErc721StewardLicenseFacetABI,
          'initializeWrappedStewardLicense'
        >['request']['abi'],
        'initializeWrappedStewardLicense',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'initializeWrappedStewardLicense'
      }
    : UseContractWriteConfig<
        typeof wrappedErc721StewardLicenseFacetABI,
        'initializeWrappedStewardLicense',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'initializeWrappedStewardLicense'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof wrappedErc721StewardLicenseFacetABI,
    'initializeWrappedStewardLicense',
    TMode
  >({
    abi: wrappedErc721StewardLicenseFacetABI,
    address:
      wrappedErc721StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc721StewardLicenseFacetAddress
      ],
    functionName: 'initializeWrappedStewardLicense',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link wrappedErc721StewardLicenseFacetABI}__ and `functionName` set to `"mintToken"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3e5D445B6C0F095121EBc91D55C386f195Ff1Af4)
 */
export function useWrappedErc721StewardLicenseFacetMintToken<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof wrappedErc721StewardLicenseFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof wrappedErc721StewardLicenseFacetABI,
          'mintToken'
        >['request']['abi'],
        'mintToken',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'mintToken' }
    : UseContractWriteConfig<
        typeof wrappedErc721StewardLicenseFacetABI,
        'mintToken',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'mintToken'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof wrappedErc721StewardLicenseFacetABI,
    'mintToken',
    TMode
  >({
    abi: wrappedErc721StewardLicenseFacetABI,
    address:
      wrappedErc721StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc721StewardLicenseFacetAddress
      ],
    functionName: 'mintToken',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link wrappedErc721StewardLicenseFacetABI}__ and `functionName` set to `"safeTransferFrom"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3e5D445B6C0F095121EBc91D55C386f195Ff1Af4)
 */
export function useWrappedErc721StewardLicenseFacetSafeTransferFrom<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof wrappedErc721StewardLicenseFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof wrappedErc721StewardLicenseFacetABI,
          'safeTransferFrom'
        >['request']['abi'],
        'safeTransferFrom',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'safeTransferFrom'
      }
    : UseContractWriteConfig<
        typeof wrappedErc721StewardLicenseFacetABI,
        'safeTransferFrom',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof wrappedErc721StewardLicenseFacetABI,
    'safeTransferFrom',
    TMode
  >({
    abi: wrappedErc721StewardLicenseFacetABI,
    address:
      wrappedErc721StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc721StewardLicenseFacetAddress
      ],
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link wrappedErc721StewardLicenseFacetABI}__ and `functionName` set to `"setApprovalForAll"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3e5D445B6C0F095121EBc91D55C386f195Ff1Af4)
 */
export function useWrappedErc721StewardLicenseFacetSetApprovalForAll<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof wrappedErc721StewardLicenseFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof wrappedErc721StewardLicenseFacetABI,
          'setApprovalForAll'
        >['request']['abi'],
        'setApprovalForAll',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'setApprovalForAll'
      }
    : UseContractWriteConfig<
        typeof wrappedErc721StewardLicenseFacetABI,
        'setApprovalForAll',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof wrappedErc721StewardLicenseFacetABI,
    'setApprovalForAll',
    TMode
  >({
    abi: wrappedErc721StewardLicenseFacetABI,
    address:
      wrappedErc721StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc721StewardLicenseFacetAddress
      ],
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link wrappedErc721StewardLicenseFacetABI}__ and `functionName` set to `"transferFrom"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3e5D445B6C0F095121EBc91D55C386f195Ff1Af4)
 */
export function useWrappedErc721StewardLicenseFacetTransferFrom<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof wrappedErc721StewardLicenseFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof wrappedErc721StewardLicenseFacetABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'transferFrom'
      }
    : UseContractWriteConfig<
        typeof wrappedErc721StewardLicenseFacetABI,
        'transferFrom',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'transferFrom'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof wrappedErc721StewardLicenseFacetABI,
    'transferFrom',
    TMode
  >({
    abi: wrappedErc721StewardLicenseFacetABI,
    address:
      wrappedErc721StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc721StewardLicenseFacetAddress
      ],
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link wrappedErc721StewardLicenseFacetABI}__ and `functionName` set to `"triggerTransfer"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3e5D445B6C0F095121EBc91D55C386f195Ff1Af4)
 */
export function useWrappedErc721StewardLicenseFacetTriggerTransfer<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof wrappedErc721StewardLicenseFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof wrappedErc721StewardLicenseFacetABI,
          'triggerTransfer'
        >['request']['abi'],
        'triggerTransfer',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'triggerTransfer'
      }
    : UseContractWriteConfig<
        typeof wrappedErc721StewardLicenseFacetABI,
        'triggerTransfer',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'triggerTransfer'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof wrappedErc721StewardLicenseFacetABI,
    'triggerTransfer',
    TMode
  >({
    abi: wrappedErc721StewardLicenseFacetABI,
    address:
      wrappedErc721StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc721StewardLicenseFacetAddress
      ],
    functionName: 'triggerTransfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link wrappedErc721StewardLicenseFacetABI}__.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3e5D445B6C0F095121EBc91D55C386f195Ff1Af4)
 */
export function usePrepareWrappedErc721StewardLicenseFacetWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof wrappedErc721StewardLicenseFacetABI,
      TFunctionName
    >,
    'abi' | 'address'
  > & {
    chainId?: keyof typeof wrappedErc721StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: wrappedErc721StewardLicenseFacetABI,
    address:
      wrappedErc721StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc721StewardLicenseFacetAddress
      ],
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof wrappedErc721StewardLicenseFacetABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link wrappedErc721StewardLicenseFacetABI}__ and `functionName` set to `"addTokenToCollection"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3e5D445B6C0F095121EBc91D55C386f195Ff1Af4)
 */
export function usePrepareWrappedErc721StewardLicenseFacetAddTokenToCollection(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof wrappedErc721StewardLicenseFacetABI,
      'addTokenToCollection'
    >,
    'abi' | 'address' | 'functionName'
  > & {
    chainId?: keyof typeof wrappedErc721StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: wrappedErc721StewardLicenseFacetABI,
    address:
      wrappedErc721StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc721StewardLicenseFacetAddress
      ],
    functionName: 'addTokenToCollection',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof wrappedErc721StewardLicenseFacetABI,
    'addTokenToCollection'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link wrappedErc721StewardLicenseFacetABI}__ and `functionName` set to `"addTokensToCollection"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3e5D445B6C0F095121EBc91D55C386f195Ff1Af4)
 */
export function usePrepareWrappedErc721StewardLicenseFacetAddTokensToCollection(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof wrappedErc721StewardLicenseFacetABI,
      'addTokensToCollection'
    >,
    'abi' | 'address' | 'functionName'
  > & {
    chainId?: keyof typeof wrappedErc721StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: wrappedErc721StewardLicenseFacetABI,
    address:
      wrappedErc721StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc721StewardLicenseFacetAddress
      ],
    functionName: 'addTokensToCollection',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof wrappedErc721StewardLicenseFacetABI,
    'addTokensToCollection'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link wrappedErc721StewardLicenseFacetABI}__ and `functionName` set to `"addTokensWithBaseURIToCollection"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3e5D445B6C0F095121EBc91D55C386f195Ff1Af4)
 */
export function usePrepareWrappedErc721StewardLicenseFacetAddTokensWithBaseUriToCollection(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof wrappedErc721StewardLicenseFacetABI,
      'addTokensWithBaseURIToCollection'
    >,
    'abi' | 'address' | 'functionName'
  > & {
    chainId?: keyof typeof wrappedErc721StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: wrappedErc721StewardLicenseFacetABI,
    address:
      wrappedErc721StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc721StewardLicenseFacetAddress
      ],
    functionName: 'addTokensWithBaseURIToCollection',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof wrappedErc721StewardLicenseFacetABI,
    'addTokensWithBaseURIToCollection'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link wrappedErc721StewardLicenseFacetABI}__ and `functionName` set to `"approve"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3e5D445B6C0F095121EBc91D55C386f195Ff1Af4)
 */
export function usePrepareWrappedErc721StewardLicenseFacetApprove(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof wrappedErc721StewardLicenseFacetABI,
      'approve'
    >,
    'abi' | 'address' | 'functionName'
  > & {
    chainId?: keyof typeof wrappedErc721StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: wrappedErc721StewardLicenseFacetABI,
    address:
      wrappedErc721StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc721StewardLicenseFacetAddress
      ],
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof wrappedErc721StewardLicenseFacetABI,
    'approve'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link wrappedErc721StewardLicenseFacetABI}__ and `functionName` set to `"initializeWrappedStewardLicense"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3e5D445B6C0F095121EBc91D55C386f195Ff1Af4)
 */
export function usePrepareWrappedErc721StewardLicenseFacetInitializeWrappedStewardLicense(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof wrappedErc721StewardLicenseFacetABI,
      'initializeWrappedStewardLicense'
    >,
    'abi' | 'address' | 'functionName'
  > & {
    chainId?: keyof typeof wrappedErc721StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: wrappedErc721StewardLicenseFacetABI,
    address:
      wrappedErc721StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc721StewardLicenseFacetAddress
      ],
    functionName: 'initializeWrappedStewardLicense',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof wrappedErc721StewardLicenseFacetABI,
    'initializeWrappedStewardLicense'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link wrappedErc721StewardLicenseFacetABI}__ and `functionName` set to `"mintToken"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3e5D445B6C0F095121EBc91D55C386f195Ff1Af4)
 */
export function usePrepareWrappedErc721StewardLicenseFacetMintToken(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof wrappedErc721StewardLicenseFacetABI,
      'mintToken'
    >,
    'abi' | 'address' | 'functionName'
  > & {
    chainId?: keyof typeof wrappedErc721StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: wrappedErc721StewardLicenseFacetABI,
    address:
      wrappedErc721StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc721StewardLicenseFacetAddress
      ],
    functionName: 'mintToken',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof wrappedErc721StewardLicenseFacetABI,
    'mintToken'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link wrappedErc721StewardLicenseFacetABI}__ and `functionName` set to `"safeTransferFrom"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3e5D445B6C0F095121EBc91D55C386f195Ff1Af4)
 */
export function usePrepareWrappedErc721StewardLicenseFacetSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof wrappedErc721StewardLicenseFacetABI,
      'safeTransferFrom'
    >,
    'abi' | 'address' | 'functionName'
  > & {
    chainId?: keyof typeof wrappedErc721StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: wrappedErc721StewardLicenseFacetABI,
    address:
      wrappedErc721StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc721StewardLicenseFacetAddress
      ],
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof wrappedErc721StewardLicenseFacetABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link wrappedErc721StewardLicenseFacetABI}__ and `functionName` set to `"setApprovalForAll"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3e5D445B6C0F095121EBc91D55C386f195Ff1Af4)
 */
export function usePrepareWrappedErc721StewardLicenseFacetSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof wrappedErc721StewardLicenseFacetABI,
      'setApprovalForAll'
    >,
    'abi' | 'address' | 'functionName'
  > & {
    chainId?: keyof typeof wrappedErc721StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: wrappedErc721StewardLicenseFacetABI,
    address:
      wrappedErc721StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc721StewardLicenseFacetAddress
      ],
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof wrappedErc721StewardLicenseFacetABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link wrappedErc721StewardLicenseFacetABI}__ and `functionName` set to `"transferFrom"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3e5D445B6C0F095121EBc91D55C386f195Ff1Af4)
 */
export function usePrepareWrappedErc721StewardLicenseFacetTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof wrappedErc721StewardLicenseFacetABI,
      'transferFrom'
    >,
    'abi' | 'address' | 'functionName'
  > & {
    chainId?: keyof typeof wrappedErc721StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: wrappedErc721StewardLicenseFacetABI,
    address:
      wrappedErc721StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc721StewardLicenseFacetAddress
      ],
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof wrappedErc721StewardLicenseFacetABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link wrappedErc721StewardLicenseFacetABI}__ and `functionName` set to `"triggerTransfer"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3e5D445B6C0F095121EBc91D55C386f195Ff1Af4)
 */
export function usePrepareWrappedErc721StewardLicenseFacetTriggerTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof wrappedErc721StewardLicenseFacetABI,
      'triggerTransfer'
    >,
    'abi' | 'address' | 'functionName'
  > & {
    chainId?: keyof typeof wrappedErc721StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: wrappedErc721StewardLicenseFacetABI,
    address:
      wrappedErc721StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc721StewardLicenseFacetAddress
      ],
    functionName: 'triggerTransfer',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof wrappedErc721StewardLicenseFacetABI,
    'triggerTransfer'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link wrappedErc721StewardLicenseFacetABI}__.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3e5D445B6C0F095121EBc91D55C386f195Ff1Af4)
 */
export function useWrappedErc721StewardLicenseFacetEvent<
  TEventName extends string,
>(
  config: Omit<
    UseContractEventConfig<
      typeof wrappedErc721StewardLicenseFacetABI,
      TEventName
    >,
    'abi' | 'address'
  > & {
    chainId?: keyof typeof wrappedErc721StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: wrappedErc721StewardLicenseFacetABI,
    address:
      wrappedErc721StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc721StewardLicenseFacetAddress
      ],
    ...config,
  } as UseContractEventConfig<
    typeof wrappedErc721StewardLicenseFacetABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link wrappedErc721StewardLicenseFacetABI}__ and `eventName` set to `"Approval"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3e5D445B6C0F095121EBc91D55C386f195Ff1Af4)
 */
export function useWrappedErc721StewardLicenseFacetApprovalEvent(
  config: Omit<
    UseContractEventConfig<
      typeof wrappedErc721StewardLicenseFacetABI,
      'Approval'
    >,
    'abi' | 'address' | 'eventName'
  > & {
    chainId?: keyof typeof wrappedErc721StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: wrappedErc721StewardLicenseFacetABI,
    address:
      wrappedErc721StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc721StewardLicenseFacetAddress
      ],
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<
    typeof wrappedErc721StewardLicenseFacetABI,
    'Approval'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link wrappedErc721StewardLicenseFacetABI}__ and `eventName` set to `"ApprovalForAll"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3e5D445B6C0F095121EBc91D55C386f195Ff1Af4)
 */
export function useWrappedErc721StewardLicenseFacetApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<
      typeof wrappedErc721StewardLicenseFacetABI,
      'ApprovalForAll'
    >,
    'abi' | 'address' | 'eventName'
  > & {
    chainId?: keyof typeof wrappedErc721StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: wrappedErc721StewardLicenseFacetABI,
    address:
      wrappedErc721StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc721StewardLicenseFacetAddress
      ],
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<
    typeof wrappedErc721StewardLicenseFacetABI,
    'ApprovalForAll'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link wrappedErc721StewardLicenseFacetABI}__ and `eventName` set to `"RoleAdminChanged"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3e5D445B6C0F095121EBc91D55C386f195Ff1Af4)
 */
export function useWrappedErc721StewardLicenseFacetRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof wrappedErc721StewardLicenseFacetABI,
      'RoleAdminChanged'
    >,
    'abi' | 'address' | 'eventName'
  > & {
    chainId?: keyof typeof wrappedErc721StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: wrappedErc721StewardLicenseFacetABI,
    address:
      wrappedErc721StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc721StewardLicenseFacetAddress
      ],
    eventName: 'RoleAdminChanged',
    ...config,
  } as UseContractEventConfig<
    typeof wrappedErc721StewardLicenseFacetABI,
    'RoleAdminChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link wrappedErc721StewardLicenseFacetABI}__ and `eventName` set to `"RoleGranted"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3e5D445B6C0F095121EBc91D55C386f195Ff1Af4)
 */
export function useWrappedErc721StewardLicenseFacetRoleGrantedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof wrappedErc721StewardLicenseFacetABI,
      'RoleGranted'
    >,
    'abi' | 'address' | 'eventName'
  > & {
    chainId?: keyof typeof wrappedErc721StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: wrappedErc721StewardLicenseFacetABI,
    address:
      wrappedErc721StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc721StewardLicenseFacetAddress
      ],
    eventName: 'RoleGranted',
    ...config,
  } as UseContractEventConfig<
    typeof wrappedErc721StewardLicenseFacetABI,
    'RoleGranted'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link wrappedErc721StewardLicenseFacetABI}__ and `eventName` set to `"RoleRevoked"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3e5D445B6C0F095121EBc91D55C386f195Ff1Af4)
 */
export function useWrappedErc721StewardLicenseFacetRoleRevokedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof wrappedErc721StewardLicenseFacetABI,
      'RoleRevoked'
    >,
    'abi' | 'address' | 'eventName'
  > & {
    chainId?: keyof typeof wrappedErc721StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: wrappedErc721StewardLicenseFacetABI,
    address:
      wrappedErc721StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc721StewardLicenseFacetAddress
      ],
    eventName: 'RoleRevoked',
    ...config,
  } as UseContractEventConfig<
    typeof wrappedErc721StewardLicenseFacetABI,
    'RoleRevoked'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link wrappedErc721StewardLicenseFacetABI}__ and `eventName` set to `"Transfer"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x3e5D445B6C0F095121EBc91D55C386f195Ff1Af4)
 */
export function useWrappedErc721StewardLicenseFacetTransferEvent(
  config: Omit<
    UseContractEventConfig<
      typeof wrappedErc721StewardLicenseFacetABI,
      'Transfer'
    >,
    'abi' | 'address' | 'eventName'
  > & {
    chainId?: keyof typeof wrappedErc721StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: wrappedErc721StewardLicenseFacetABI,
    address:
      wrappedErc721StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc721StewardLicenseFacetAddress
      ],
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<
    typeof wrappedErc721StewardLicenseFacetABI,
    'Transfer'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wrappedErc1155StewardLicenseFacetABI}__.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc749Ac2EA598D55D43A2FfEcB1D0753D7a9Ec560)
 */
export function useWrappedErc1155StewardLicenseFacetRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof wrappedErc1155StewardLicenseFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof wrappedErc1155StewardLicenseFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address'
  > & {
    chainId?: keyof typeof wrappedErc1155StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: wrappedErc1155StewardLicenseFacetABI,
    address:
      wrappedErc1155StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc1155StewardLicenseFacetAddress
      ],
    ...config,
  } as UseContractReadConfig<
    typeof wrappedErc1155StewardLicenseFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wrappedErc1155StewardLicenseFacetABI}__ and `functionName` set to `"balanceOf"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc749Ac2EA598D55D43A2FfEcB1D0753D7a9Ec560)
 */
export function useWrappedErc1155StewardLicenseFacetBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<
    typeof wrappedErc1155StewardLicenseFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof wrappedErc1155StewardLicenseFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & {
    chainId?: keyof typeof wrappedErc1155StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: wrappedErc1155StewardLicenseFacetABI,
    address:
      wrappedErc1155StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc1155StewardLicenseFacetAddress
      ],
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof wrappedErc1155StewardLicenseFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wrappedErc1155StewardLicenseFacetABI}__ and `functionName` set to `"exists"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc749Ac2EA598D55D43A2FfEcB1D0753D7a9Ec560)
 */
export function useWrappedErc1155StewardLicenseFacetExists<
  TFunctionName extends 'exists',
  TSelectData = ReadContractResult<
    typeof wrappedErc1155StewardLicenseFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof wrappedErc1155StewardLicenseFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & {
    chainId?: keyof typeof wrappedErc1155StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: wrappedErc1155StewardLicenseFacetABI,
    address:
      wrappedErc1155StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc1155StewardLicenseFacetAddress
      ],
    functionName: 'exists',
    ...config,
  } as UseContractReadConfig<
    typeof wrappedErc1155StewardLicenseFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wrappedErc1155StewardLicenseFacetABI}__ and `functionName` set to `"getApproved"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc749Ac2EA598D55D43A2FfEcB1D0753D7a9Ec560)
 */
export function useWrappedErc1155StewardLicenseFacetGetApproved<
  TFunctionName extends 'getApproved',
  TSelectData = ReadContractResult<
    typeof wrappedErc1155StewardLicenseFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof wrappedErc1155StewardLicenseFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & {
    chainId?: keyof typeof wrappedErc1155StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: wrappedErc1155StewardLicenseFacetABI,
    address:
      wrappedErc1155StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc1155StewardLicenseFacetAddress
      ],
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<
    typeof wrappedErc1155StewardLicenseFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wrappedErc1155StewardLicenseFacetABI}__ and `functionName` set to `"isApprovedForAll"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc749Ac2EA598D55D43A2FfEcB1D0753D7a9Ec560)
 */
export function useWrappedErc1155StewardLicenseFacetIsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<
    typeof wrappedErc1155StewardLicenseFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof wrappedErc1155StewardLicenseFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & {
    chainId?: keyof typeof wrappedErc1155StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: wrappedErc1155StewardLicenseFacetABI,
    address:
      wrappedErc1155StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc1155StewardLicenseFacetAddress
      ],
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof wrappedErc1155StewardLicenseFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wrappedErc1155StewardLicenseFacetABI}__ and `functionName` set to `"maxTokenCount"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc749Ac2EA598D55D43A2FfEcB1D0753D7a9Ec560)
 */
export function useWrappedErc1155StewardLicenseFacetMaxTokenCount<
  TFunctionName extends 'maxTokenCount',
  TSelectData = ReadContractResult<
    typeof wrappedErc1155StewardLicenseFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof wrappedErc1155StewardLicenseFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & {
    chainId?: keyof typeof wrappedErc1155StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: wrappedErc1155StewardLicenseFacetABI,
    address:
      wrappedErc1155StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc1155StewardLicenseFacetAddress
      ],
    functionName: 'maxTokenCount',
    ...config,
  } as UseContractReadConfig<
    typeof wrappedErc1155StewardLicenseFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wrappedErc1155StewardLicenseFacetABI}__ and `functionName` set to `"minter"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc749Ac2EA598D55D43A2FfEcB1D0753D7a9Ec560)
 */
export function useWrappedErc1155StewardLicenseFacetMinter<
  TFunctionName extends 'minter',
  TSelectData = ReadContractResult<
    typeof wrappedErc1155StewardLicenseFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof wrappedErc1155StewardLicenseFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & {
    chainId?: keyof typeof wrappedErc1155StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: wrappedErc1155StewardLicenseFacetABI,
    address:
      wrappedErc1155StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc1155StewardLicenseFacetAddress
      ],
    functionName: 'minter',
    ...config,
  } as UseContractReadConfig<
    typeof wrappedErc1155StewardLicenseFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wrappedErc1155StewardLicenseFacetABI}__ and `functionName` set to `"name"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc749Ac2EA598D55D43A2FfEcB1D0753D7a9Ec560)
 */
export function useWrappedErc1155StewardLicenseFacetName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<
    typeof wrappedErc1155StewardLicenseFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof wrappedErc1155StewardLicenseFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & {
    chainId?: keyof typeof wrappedErc1155StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: wrappedErc1155StewardLicenseFacetABI,
    address:
      wrappedErc1155StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc1155StewardLicenseFacetAddress
      ],
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<
    typeof wrappedErc1155StewardLicenseFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wrappedErc1155StewardLicenseFacetABI}__ and `functionName` set to `"onERC1155BatchReceived"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc749Ac2EA598D55D43A2FfEcB1D0753D7a9Ec560)
 */
export function useWrappedErc1155StewardLicenseFacetOnErc1155BatchReceived<
  TFunctionName extends 'onERC1155BatchReceived',
  TSelectData = ReadContractResult<
    typeof wrappedErc1155StewardLicenseFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof wrappedErc1155StewardLicenseFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & {
    chainId?: keyof typeof wrappedErc1155StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: wrappedErc1155StewardLicenseFacetABI,
    address:
      wrappedErc1155StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc1155StewardLicenseFacetAddress
      ],
    functionName: 'onERC1155BatchReceived',
    ...config,
  } as UseContractReadConfig<
    typeof wrappedErc1155StewardLicenseFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wrappedErc1155StewardLicenseFacetABI}__ and `functionName` set to `"onERC1155Received"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc749Ac2EA598D55D43A2FfEcB1D0753D7a9Ec560)
 */
export function useWrappedErc1155StewardLicenseFacetOnErc1155Received<
  TFunctionName extends 'onERC1155Received',
  TSelectData = ReadContractResult<
    typeof wrappedErc1155StewardLicenseFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof wrappedErc1155StewardLicenseFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & {
    chainId?: keyof typeof wrappedErc1155StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: wrappedErc1155StewardLicenseFacetABI,
    address:
      wrappedErc1155StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc1155StewardLicenseFacetAddress
      ],
    functionName: 'onERC1155Received',
    ...config,
  } as UseContractReadConfig<
    typeof wrappedErc1155StewardLicenseFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wrappedErc1155StewardLicenseFacetABI}__ and `functionName` set to `"ownerOf"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc749Ac2EA598D55D43A2FfEcB1D0753D7a9Ec560)
 */
export function useWrappedErc1155StewardLicenseFacetOwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<
    typeof wrappedErc1155StewardLicenseFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof wrappedErc1155StewardLicenseFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & {
    chainId?: keyof typeof wrappedErc1155StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: wrappedErc1155StewardLicenseFacetABI,
    address:
      wrappedErc1155StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc1155StewardLicenseFacetAddress
      ],
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<
    typeof wrappedErc1155StewardLicenseFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wrappedErc1155StewardLicenseFacetABI}__ and `functionName` set to `"supportsInterface"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc749Ac2EA598D55D43A2FfEcB1D0753D7a9Ec560)
 */
export function useWrappedErc1155StewardLicenseFacetSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<
    typeof wrappedErc1155StewardLicenseFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof wrappedErc1155StewardLicenseFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & {
    chainId?: keyof typeof wrappedErc1155StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: wrappedErc1155StewardLicenseFacetABI,
    address:
      wrappedErc1155StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc1155StewardLicenseFacetAddress
      ],
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof wrappedErc1155StewardLicenseFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wrappedErc1155StewardLicenseFacetABI}__ and `functionName` set to `"symbol"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc749Ac2EA598D55D43A2FfEcB1D0753D7a9Ec560)
 */
export function useWrappedErc1155StewardLicenseFacetSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<
    typeof wrappedErc1155StewardLicenseFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof wrappedErc1155StewardLicenseFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & {
    chainId?: keyof typeof wrappedErc1155StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: wrappedErc1155StewardLicenseFacetABI,
    address:
      wrappedErc1155StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc1155StewardLicenseFacetAddress
      ],
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<
    typeof wrappedErc1155StewardLicenseFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wrappedErc1155StewardLicenseFacetABI}__ and `functionName` set to `"tokenByIndex"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc749Ac2EA598D55D43A2FfEcB1D0753D7a9Ec560)
 */
export function useWrappedErc1155StewardLicenseFacetTokenByIndex<
  TFunctionName extends 'tokenByIndex',
  TSelectData = ReadContractResult<
    typeof wrappedErc1155StewardLicenseFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof wrappedErc1155StewardLicenseFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & {
    chainId?: keyof typeof wrappedErc1155StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: wrappedErc1155StewardLicenseFacetABI,
    address:
      wrappedErc1155StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc1155StewardLicenseFacetAddress
      ],
    functionName: 'tokenByIndex',
    ...config,
  } as UseContractReadConfig<
    typeof wrappedErc1155StewardLicenseFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wrappedErc1155StewardLicenseFacetABI}__ and `functionName` set to `"tokenOfOwnerByIndex"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc749Ac2EA598D55D43A2FfEcB1D0753D7a9Ec560)
 */
export function useWrappedErc1155StewardLicenseFacetTokenOfOwnerByIndex<
  TFunctionName extends 'tokenOfOwnerByIndex',
  TSelectData = ReadContractResult<
    typeof wrappedErc1155StewardLicenseFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof wrappedErc1155StewardLicenseFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & {
    chainId?: keyof typeof wrappedErc1155StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: wrappedErc1155StewardLicenseFacetABI,
    address:
      wrappedErc1155StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc1155StewardLicenseFacetAddress
      ],
    functionName: 'tokenOfOwnerByIndex',
    ...config,
  } as UseContractReadConfig<
    typeof wrappedErc1155StewardLicenseFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wrappedErc1155StewardLicenseFacetABI}__ and `functionName` set to `"tokenURI"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc749Ac2EA598D55D43A2FfEcB1D0753D7a9Ec560)
 */
export function useWrappedErc1155StewardLicenseFacetTokenUri<
  TFunctionName extends 'tokenURI',
  TSelectData = ReadContractResult<
    typeof wrappedErc1155StewardLicenseFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof wrappedErc1155StewardLicenseFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & {
    chainId?: keyof typeof wrappedErc1155StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: wrappedErc1155StewardLicenseFacetABI,
    address:
      wrappedErc1155StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc1155StewardLicenseFacetAddress
      ],
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<
    typeof wrappedErc1155StewardLicenseFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wrappedErc1155StewardLicenseFacetABI}__ and `functionName` set to `"totalSupply"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc749Ac2EA598D55D43A2FfEcB1D0753D7a9Ec560)
 */
export function useWrappedErc1155StewardLicenseFacetTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<
    typeof wrappedErc1155StewardLicenseFacetABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof wrappedErc1155StewardLicenseFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & {
    chainId?: keyof typeof wrappedErc1155StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: wrappedErc1155StewardLicenseFacetABI,
    address:
      wrappedErc1155StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc1155StewardLicenseFacetAddress
      ],
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof wrappedErc1155StewardLicenseFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link wrappedErc1155StewardLicenseFacetABI}__.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc749Ac2EA598D55D43A2FfEcB1D0753D7a9Ec560)
 */
export function useWrappedErc1155StewardLicenseFacetWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof wrappedErc1155StewardLicenseFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof wrappedErc1155StewardLicenseFacetABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<
        typeof wrappedErc1155StewardLicenseFacetABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof wrappedErc1155StewardLicenseFacetABI,
    TFunctionName,
    TMode
  >({
    abi: wrappedErc1155StewardLicenseFacetABI,
    address:
      wrappedErc1155StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc1155StewardLicenseFacetAddress
      ],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link wrappedErc1155StewardLicenseFacetABI}__ and `functionName` set to `"addTokenToCollection"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc749Ac2EA598D55D43A2FfEcB1D0753D7a9Ec560)
 */
export function useWrappedErc1155StewardLicenseFacetAddTokenToCollection<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof wrappedErc1155StewardLicenseFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof wrappedErc1155StewardLicenseFacetABI,
          'addTokenToCollection'
        >['request']['abi'],
        'addTokenToCollection',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'addTokenToCollection'
      }
    : UseContractWriteConfig<
        typeof wrappedErc1155StewardLicenseFacetABI,
        'addTokenToCollection',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'addTokenToCollection'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof wrappedErc1155StewardLicenseFacetABI,
    'addTokenToCollection',
    TMode
  >({
    abi: wrappedErc1155StewardLicenseFacetABI,
    address:
      wrappedErc1155StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc1155StewardLicenseFacetAddress
      ],
    functionName: 'addTokenToCollection',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link wrappedErc1155StewardLicenseFacetABI}__ and `functionName` set to `"addTokensToCollection"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc749Ac2EA598D55D43A2FfEcB1D0753D7a9Ec560)
 */
export function useWrappedErc1155StewardLicenseFacetAddTokensToCollection<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof wrappedErc1155StewardLicenseFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof wrappedErc1155StewardLicenseFacetABI,
          'addTokensToCollection'
        >['request']['abi'],
        'addTokensToCollection',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'addTokensToCollection'
      }
    : UseContractWriteConfig<
        typeof wrappedErc1155StewardLicenseFacetABI,
        'addTokensToCollection',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'addTokensToCollection'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof wrappedErc1155StewardLicenseFacetABI,
    'addTokensToCollection',
    TMode
  >({
    abi: wrappedErc1155StewardLicenseFacetABI,
    address:
      wrappedErc1155StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc1155StewardLicenseFacetAddress
      ],
    functionName: 'addTokensToCollection',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link wrappedErc1155StewardLicenseFacetABI}__ and `functionName` set to `"addTokensWithBaseURIToCollection"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc749Ac2EA598D55D43A2FfEcB1D0753D7a9Ec560)
 */
export function useWrappedErc1155StewardLicenseFacetAddTokensWithBaseUriToCollection<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof wrappedErc1155StewardLicenseFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof wrappedErc1155StewardLicenseFacetABI,
          'addTokensWithBaseURIToCollection'
        >['request']['abi'],
        'addTokensWithBaseURIToCollection',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'addTokensWithBaseURIToCollection'
      }
    : UseContractWriteConfig<
        typeof wrappedErc1155StewardLicenseFacetABI,
        'addTokensWithBaseURIToCollection',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'addTokensWithBaseURIToCollection'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof wrappedErc1155StewardLicenseFacetABI,
    'addTokensWithBaseURIToCollection',
    TMode
  >({
    abi: wrappedErc1155StewardLicenseFacetABI,
    address:
      wrappedErc1155StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc1155StewardLicenseFacetAddress
      ],
    functionName: 'addTokensWithBaseURIToCollection',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link wrappedErc1155StewardLicenseFacetABI}__ and `functionName` set to `"approve"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc749Ac2EA598D55D43A2FfEcB1D0753D7a9Ec560)
 */
export function useWrappedErc1155StewardLicenseFacetApprove<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof wrappedErc1155StewardLicenseFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof wrappedErc1155StewardLicenseFacetABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'approve' }
    : UseContractWriteConfig<
        typeof wrappedErc1155StewardLicenseFacetABI,
        'approve',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'approve'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof wrappedErc1155StewardLicenseFacetABI,
    'approve',
    TMode
  >({
    abi: wrappedErc1155StewardLicenseFacetABI,
    address:
      wrappedErc1155StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc1155StewardLicenseFacetAddress
      ],
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link wrappedErc1155StewardLicenseFacetABI}__ and `functionName` set to `"initializeWrappedStewardLicense"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc749Ac2EA598D55D43A2FfEcB1D0753D7a9Ec560)
 */
export function useWrappedErc1155StewardLicenseFacetInitializeWrappedStewardLicense<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof wrappedErc1155StewardLicenseFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof wrappedErc1155StewardLicenseFacetABI,
          'initializeWrappedStewardLicense'
        >['request']['abi'],
        'initializeWrappedStewardLicense',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'initializeWrappedStewardLicense'
      }
    : UseContractWriteConfig<
        typeof wrappedErc1155StewardLicenseFacetABI,
        'initializeWrappedStewardLicense',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'initializeWrappedStewardLicense'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof wrappedErc1155StewardLicenseFacetABI,
    'initializeWrappedStewardLicense',
    TMode
  >({
    abi: wrappedErc1155StewardLicenseFacetABI,
    address:
      wrappedErc1155StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc1155StewardLicenseFacetAddress
      ],
    functionName: 'initializeWrappedStewardLicense',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link wrappedErc1155StewardLicenseFacetABI}__ and `functionName` set to `"mintToken"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc749Ac2EA598D55D43A2FfEcB1D0753D7a9Ec560)
 */
export function useWrappedErc1155StewardLicenseFacetMintToken<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof wrappedErc1155StewardLicenseFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof wrappedErc1155StewardLicenseFacetABI,
          'mintToken'
        >['request']['abi'],
        'mintToken',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'mintToken' }
    : UseContractWriteConfig<
        typeof wrappedErc1155StewardLicenseFacetABI,
        'mintToken',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'mintToken'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof wrappedErc1155StewardLicenseFacetABI,
    'mintToken',
    TMode
  >({
    abi: wrappedErc1155StewardLicenseFacetABI,
    address:
      wrappedErc1155StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc1155StewardLicenseFacetAddress
      ],
    functionName: 'mintToken',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link wrappedErc1155StewardLicenseFacetABI}__ and `functionName` set to `"safeTransferFrom"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc749Ac2EA598D55D43A2FfEcB1D0753D7a9Ec560)
 */
export function useWrappedErc1155StewardLicenseFacetSafeTransferFrom<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof wrappedErc1155StewardLicenseFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof wrappedErc1155StewardLicenseFacetABI,
          'safeTransferFrom'
        >['request']['abi'],
        'safeTransferFrom',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'safeTransferFrom'
      }
    : UseContractWriteConfig<
        typeof wrappedErc1155StewardLicenseFacetABI,
        'safeTransferFrom',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof wrappedErc1155StewardLicenseFacetABI,
    'safeTransferFrom',
    TMode
  >({
    abi: wrappedErc1155StewardLicenseFacetABI,
    address:
      wrappedErc1155StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc1155StewardLicenseFacetAddress
      ],
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link wrappedErc1155StewardLicenseFacetABI}__ and `functionName` set to `"setApprovalForAll"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc749Ac2EA598D55D43A2FfEcB1D0753D7a9Ec560)
 */
export function useWrappedErc1155StewardLicenseFacetSetApprovalForAll<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof wrappedErc1155StewardLicenseFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof wrappedErc1155StewardLicenseFacetABI,
          'setApprovalForAll'
        >['request']['abi'],
        'setApprovalForAll',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'setApprovalForAll'
      }
    : UseContractWriteConfig<
        typeof wrappedErc1155StewardLicenseFacetABI,
        'setApprovalForAll',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof wrappedErc1155StewardLicenseFacetABI,
    'setApprovalForAll',
    TMode
  >({
    abi: wrappedErc1155StewardLicenseFacetABI,
    address:
      wrappedErc1155StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc1155StewardLicenseFacetAddress
      ],
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link wrappedErc1155StewardLicenseFacetABI}__ and `functionName` set to `"transferFrom"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc749Ac2EA598D55D43A2FfEcB1D0753D7a9Ec560)
 */
export function useWrappedErc1155StewardLicenseFacetTransferFrom<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof wrappedErc1155StewardLicenseFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof wrappedErc1155StewardLicenseFacetABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'transferFrom'
      }
    : UseContractWriteConfig<
        typeof wrappedErc1155StewardLicenseFacetABI,
        'transferFrom',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'transferFrom'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof wrappedErc1155StewardLicenseFacetABI,
    'transferFrom',
    TMode
  >({
    abi: wrappedErc1155StewardLicenseFacetABI,
    address:
      wrappedErc1155StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc1155StewardLicenseFacetAddress
      ],
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link wrappedErc1155StewardLicenseFacetABI}__ and `functionName` set to `"triggerTransfer"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc749Ac2EA598D55D43A2FfEcB1D0753D7a9Ec560)
 */
export function useWrappedErc1155StewardLicenseFacetTriggerTransfer<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof wrappedErc1155StewardLicenseFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof wrappedErc1155StewardLicenseFacetABI,
          'triggerTransfer'
        >['request']['abi'],
        'triggerTransfer',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'triggerTransfer'
      }
    : UseContractWriteConfig<
        typeof wrappedErc1155StewardLicenseFacetABI,
        'triggerTransfer',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'triggerTransfer'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof wrappedErc1155StewardLicenseFacetABI,
    'triggerTransfer',
    TMode
  >({
    abi: wrappedErc1155StewardLicenseFacetABI,
    address:
      wrappedErc1155StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc1155StewardLicenseFacetAddress
      ],
    functionName: 'triggerTransfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link wrappedErc1155StewardLicenseFacetABI}__.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc749Ac2EA598D55D43A2FfEcB1D0753D7a9Ec560)
 */
export function usePrepareWrappedErc1155StewardLicenseFacetWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof wrappedErc1155StewardLicenseFacetABI,
      TFunctionName
    >,
    'abi' | 'address'
  > & {
    chainId?: keyof typeof wrappedErc1155StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: wrappedErc1155StewardLicenseFacetABI,
    address:
      wrappedErc1155StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc1155StewardLicenseFacetAddress
      ],
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof wrappedErc1155StewardLicenseFacetABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link wrappedErc1155StewardLicenseFacetABI}__ and `functionName` set to `"addTokenToCollection"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc749Ac2EA598D55D43A2FfEcB1D0753D7a9Ec560)
 */
export function usePrepareWrappedErc1155StewardLicenseFacetAddTokenToCollection(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof wrappedErc1155StewardLicenseFacetABI,
      'addTokenToCollection'
    >,
    'abi' | 'address' | 'functionName'
  > & {
    chainId?: keyof typeof wrappedErc1155StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: wrappedErc1155StewardLicenseFacetABI,
    address:
      wrappedErc1155StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc1155StewardLicenseFacetAddress
      ],
    functionName: 'addTokenToCollection',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof wrappedErc1155StewardLicenseFacetABI,
    'addTokenToCollection'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link wrappedErc1155StewardLicenseFacetABI}__ and `functionName` set to `"addTokensToCollection"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc749Ac2EA598D55D43A2FfEcB1D0753D7a9Ec560)
 */
export function usePrepareWrappedErc1155StewardLicenseFacetAddTokensToCollection(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof wrappedErc1155StewardLicenseFacetABI,
      'addTokensToCollection'
    >,
    'abi' | 'address' | 'functionName'
  > & {
    chainId?: keyof typeof wrappedErc1155StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: wrappedErc1155StewardLicenseFacetABI,
    address:
      wrappedErc1155StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc1155StewardLicenseFacetAddress
      ],
    functionName: 'addTokensToCollection',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof wrappedErc1155StewardLicenseFacetABI,
    'addTokensToCollection'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link wrappedErc1155StewardLicenseFacetABI}__ and `functionName` set to `"addTokensWithBaseURIToCollection"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc749Ac2EA598D55D43A2FfEcB1D0753D7a9Ec560)
 */
export function usePrepareWrappedErc1155StewardLicenseFacetAddTokensWithBaseUriToCollection(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof wrappedErc1155StewardLicenseFacetABI,
      'addTokensWithBaseURIToCollection'
    >,
    'abi' | 'address' | 'functionName'
  > & {
    chainId?: keyof typeof wrappedErc1155StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: wrappedErc1155StewardLicenseFacetABI,
    address:
      wrappedErc1155StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc1155StewardLicenseFacetAddress
      ],
    functionName: 'addTokensWithBaseURIToCollection',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof wrappedErc1155StewardLicenseFacetABI,
    'addTokensWithBaseURIToCollection'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link wrappedErc1155StewardLicenseFacetABI}__ and `functionName` set to `"approve"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc749Ac2EA598D55D43A2FfEcB1D0753D7a9Ec560)
 */
export function usePrepareWrappedErc1155StewardLicenseFacetApprove(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof wrappedErc1155StewardLicenseFacetABI,
      'approve'
    >,
    'abi' | 'address' | 'functionName'
  > & {
    chainId?: keyof typeof wrappedErc1155StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: wrappedErc1155StewardLicenseFacetABI,
    address:
      wrappedErc1155StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc1155StewardLicenseFacetAddress
      ],
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof wrappedErc1155StewardLicenseFacetABI,
    'approve'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link wrappedErc1155StewardLicenseFacetABI}__ and `functionName` set to `"initializeWrappedStewardLicense"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc749Ac2EA598D55D43A2FfEcB1D0753D7a9Ec560)
 */
export function usePrepareWrappedErc1155StewardLicenseFacetInitializeWrappedStewardLicense(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof wrappedErc1155StewardLicenseFacetABI,
      'initializeWrappedStewardLicense'
    >,
    'abi' | 'address' | 'functionName'
  > & {
    chainId?: keyof typeof wrappedErc1155StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: wrappedErc1155StewardLicenseFacetABI,
    address:
      wrappedErc1155StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc1155StewardLicenseFacetAddress
      ],
    functionName: 'initializeWrappedStewardLicense',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof wrappedErc1155StewardLicenseFacetABI,
    'initializeWrappedStewardLicense'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link wrappedErc1155StewardLicenseFacetABI}__ and `functionName` set to `"mintToken"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc749Ac2EA598D55D43A2FfEcB1D0753D7a9Ec560)
 */
export function usePrepareWrappedErc1155StewardLicenseFacetMintToken(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof wrappedErc1155StewardLicenseFacetABI,
      'mintToken'
    >,
    'abi' | 'address' | 'functionName'
  > & {
    chainId?: keyof typeof wrappedErc1155StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: wrappedErc1155StewardLicenseFacetABI,
    address:
      wrappedErc1155StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc1155StewardLicenseFacetAddress
      ],
    functionName: 'mintToken',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof wrappedErc1155StewardLicenseFacetABI,
    'mintToken'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link wrappedErc1155StewardLicenseFacetABI}__ and `functionName` set to `"safeTransferFrom"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc749Ac2EA598D55D43A2FfEcB1D0753D7a9Ec560)
 */
export function usePrepareWrappedErc1155StewardLicenseFacetSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof wrappedErc1155StewardLicenseFacetABI,
      'safeTransferFrom'
    >,
    'abi' | 'address' | 'functionName'
  > & {
    chainId?: keyof typeof wrappedErc1155StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: wrappedErc1155StewardLicenseFacetABI,
    address:
      wrappedErc1155StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc1155StewardLicenseFacetAddress
      ],
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof wrappedErc1155StewardLicenseFacetABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link wrappedErc1155StewardLicenseFacetABI}__ and `functionName` set to `"setApprovalForAll"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc749Ac2EA598D55D43A2FfEcB1D0753D7a9Ec560)
 */
export function usePrepareWrappedErc1155StewardLicenseFacetSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof wrappedErc1155StewardLicenseFacetABI,
      'setApprovalForAll'
    >,
    'abi' | 'address' | 'functionName'
  > & {
    chainId?: keyof typeof wrappedErc1155StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: wrappedErc1155StewardLicenseFacetABI,
    address:
      wrappedErc1155StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc1155StewardLicenseFacetAddress
      ],
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof wrappedErc1155StewardLicenseFacetABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link wrappedErc1155StewardLicenseFacetABI}__ and `functionName` set to `"transferFrom"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc749Ac2EA598D55D43A2FfEcB1D0753D7a9Ec560)
 */
export function usePrepareWrappedErc1155StewardLicenseFacetTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof wrappedErc1155StewardLicenseFacetABI,
      'transferFrom'
    >,
    'abi' | 'address' | 'functionName'
  > & {
    chainId?: keyof typeof wrappedErc1155StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: wrappedErc1155StewardLicenseFacetABI,
    address:
      wrappedErc1155StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc1155StewardLicenseFacetAddress
      ],
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof wrappedErc1155StewardLicenseFacetABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link wrappedErc1155StewardLicenseFacetABI}__ and `functionName` set to `"triggerTransfer"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc749Ac2EA598D55D43A2FfEcB1D0753D7a9Ec560)
 */
export function usePrepareWrappedErc1155StewardLicenseFacetTriggerTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof wrappedErc1155StewardLicenseFacetABI,
      'triggerTransfer'
    >,
    'abi' | 'address' | 'functionName'
  > & {
    chainId?: keyof typeof wrappedErc1155StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: wrappedErc1155StewardLicenseFacetABI,
    address:
      wrappedErc1155StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc1155StewardLicenseFacetAddress
      ],
    functionName: 'triggerTransfer',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof wrappedErc1155StewardLicenseFacetABI,
    'triggerTransfer'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link wrappedErc1155StewardLicenseFacetABI}__.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc749Ac2EA598D55D43A2FfEcB1D0753D7a9Ec560)
 */
export function useWrappedErc1155StewardLicenseFacetEvent<
  TEventName extends string,
>(
  config: Omit<
    UseContractEventConfig<
      typeof wrappedErc1155StewardLicenseFacetABI,
      TEventName
    >,
    'abi' | 'address'
  > & {
    chainId?: keyof typeof wrappedErc1155StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: wrappedErc1155StewardLicenseFacetABI,
    address:
      wrappedErc1155StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc1155StewardLicenseFacetAddress
      ],
    ...config,
  } as UseContractEventConfig<
    typeof wrappedErc1155StewardLicenseFacetABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link wrappedErc1155StewardLicenseFacetABI}__ and `eventName` set to `"Approval"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc749Ac2EA598D55D43A2FfEcB1D0753D7a9Ec560)
 */
export function useWrappedErc1155StewardLicenseFacetApprovalEvent(
  config: Omit<
    UseContractEventConfig<
      typeof wrappedErc1155StewardLicenseFacetABI,
      'Approval'
    >,
    'abi' | 'address' | 'eventName'
  > & {
    chainId?: keyof typeof wrappedErc1155StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: wrappedErc1155StewardLicenseFacetABI,
    address:
      wrappedErc1155StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc1155StewardLicenseFacetAddress
      ],
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<
    typeof wrappedErc1155StewardLicenseFacetABI,
    'Approval'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link wrappedErc1155StewardLicenseFacetABI}__ and `eventName` set to `"ApprovalForAll"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc749Ac2EA598D55D43A2FfEcB1D0753D7a9Ec560)
 */
export function useWrappedErc1155StewardLicenseFacetApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<
      typeof wrappedErc1155StewardLicenseFacetABI,
      'ApprovalForAll'
    >,
    'abi' | 'address' | 'eventName'
  > & {
    chainId?: keyof typeof wrappedErc1155StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: wrappedErc1155StewardLicenseFacetABI,
    address:
      wrappedErc1155StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc1155StewardLicenseFacetAddress
      ],
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<
    typeof wrappedErc1155StewardLicenseFacetABI,
    'ApprovalForAll'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link wrappedErc1155StewardLicenseFacetABI}__ and `eventName` set to `"RoleAdminChanged"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc749Ac2EA598D55D43A2FfEcB1D0753D7a9Ec560)
 */
export function useWrappedErc1155StewardLicenseFacetRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof wrappedErc1155StewardLicenseFacetABI,
      'RoleAdminChanged'
    >,
    'abi' | 'address' | 'eventName'
  > & {
    chainId?: keyof typeof wrappedErc1155StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: wrappedErc1155StewardLicenseFacetABI,
    address:
      wrappedErc1155StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc1155StewardLicenseFacetAddress
      ],
    eventName: 'RoleAdminChanged',
    ...config,
  } as UseContractEventConfig<
    typeof wrappedErc1155StewardLicenseFacetABI,
    'RoleAdminChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link wrappedErc1155StewardLicenseFacetABI}__ and `eventName` set to `"RoleGranted"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc749Ac2EA598D55D43A2FfEcB1D0753D7a9Ec560)
 */
export function useWrappedErc1155StewardLicenseFacetRoleGrantedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof wrappedErc1155StewardLicenseFacetABI,
      'RoleGranted'
    >,
    'abi' | 'address' | 'eventName'
  > & {
    chainId?: keyof typeof wrappedErc1155StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: wrappedErc1155StewardLicenseFacetABI,
    address:
      wrappedErc1155StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc1155StewardLicenseFacetAddress
      ],
    eventName: 'RoleGranted',
    ...config,
  } as UseContractEventConfig<
    typeof wrappedErc1155StewardLicenseFacetABI,
    'RoleGranted'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link wrappedErc1155StewardLicenseFacetABI}__ and `eventName` set to `"RoleRevoked"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc749Ac2EA598D55D43A2FfEcB1D0753D7a9Ec560)
 */
export function useWrappedErc1155StewardLicenseFacetRoleRevokedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof wrappedErc1155StewardLicenseFacetABI,
      'RoleRevoked'
    >,
    'abi' | 'address' | 'eventName'
  > & {
    chainId?: keyof typeof wrappedErc1155StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: wrappedErc1155StewardLicenseFacetABI,
    address:
      wrappedErc1155StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc1155StewardLicenseFacetAddress
      ],
    eventName: 'RoleRevoked',
    ...config,
  } as UseContractEventConfig<
    typeof wrappedErc1155StewardLicenseFacetABI,
    'RoleRevoked'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link wrappedErc1155StewardLicenseFacetABI}__ and `eventName` set to `"Transfer"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc749Ac2EA598D55D43A2FfEcB1D0753D7a9Ec560)
 */
export function useWrappedErc1155StewardLicenseFacetTransferEvent(
  config: Omit<
    UseContractEventConfig<
      typeof wrappedErc1155StewardLicenseFacetABI,
      'Transfer'
    >,
    'abi' | 'address' | 'eventName'
  > & {
    chainId?: keyof typeof wrappedErc1155StewardLicenseFacetAddress
  } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: wrappedErc1155StewardLicenseFacetABI,
    address:
      wrappedErc1155StewardLicenseFacetAddress[
        chainId as keyof typeof wrappedErc1155StewardLicenseFacetAddress
      ],
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<
    typeof wrappedErc1155StewardLicenseFacetABI,
    'Transfer'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlFacetABI}__.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc90eDF9848f8dcf557e83Bc2020B6F7d286321B5)
 */
export function useAccessControlFacetRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof accessControlFacetABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof accessControlFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address'
  > & { chainId?: keyof typeof accessControlFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: accessControlFacetABI,
    address:
      accessControlFacetAddress[
        chainId as keyof typeof accessControlFacetAddress
      ],
    ...config,
  } as UseContractReadConfig<
    typeof accessControlFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlFacetABI}__ and `functionName` set to `"getRoleAdmin"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc90eDF9848f8dcf557e83Bc2020B6F7d286321B5)
 */
export function useAccessControlFacetGetRoleAdmin<
  TFunctionName extends 'getRoleAdmin',
  TSelectData = ReadContractResult<typeof accessControlFacetABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof accessControlFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof accessControlFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: accessControlFacetABI,
    address:
      accessControlFacetAddress[
        chainId as keyof typeof accessControlFacetAddress
      ],
    functionName: 'getRoleAdmin',
    ...config,
  } as UseContractReadConfig<
    typeof accessControlFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlFacetABI}__ and `functionName` set to `"getRoleMember"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc90eDF9848f8dcf557e83Bc2020B6F7d286321B5)
 */
export function useAccessControlFacetGetRoleMember<
  TFunctionName extends 'getRoleMember',
  TSelectData = ReadContractResult<typeof accessControlFacetABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof accessControlFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof accessControlFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: accessControlFacetABI,
    address:
      accessControlFacetAddress[
        chainId as keyof typeof accessControlFacetAddress
      ],
    functionName: 'getRoleMember',
    ...config,
  } as UseContractReadConfig<
    typeof accessControlFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlFacetABI}__ and `functionName` set to `"getRoleMemberCount"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc90eDF9848f8dcf557e83Bc2020B6F7d286321B5)
 */
export function useAccessControlFacetGetRoleMemberCount<
  TFunctionName extends 'getRoleMemberCount',
  TSelectData = ReadContractResult<typeof accessControlFacetABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof accessControlFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof accessControlFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: accessControlFacetABI,
    address:
      accessControlFacetAddress[
        chainId as keyof typeof accessControlFacetAddress
      ],
    functionName: 'getRoleMemberCount',
    ...config,
  } as UseContractReadConfig<
    typeof accessControlFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlFacetABI}__ and `functionName` set to `"hasRole"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc90eDF9848f8dcf557e83Bc2020B6F7d286321B5)
 */
export function useAccessControlFacetHasRole<
  TFunctionName extends 'hasRole',
  TSelectData = ReadContractResult<typeof accessControlFacetABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof accessControlFacetABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof accessControlFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: accessControlFacetABI,
    address:
      accessControlFacetAddress[
        chainId as keyof typeof accessControlFacetAddress
      ],
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<
    typeof accessControlFacetABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlFacetABI}__.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc90eDF9848f8dcf557e83Bc2020B6F7d286321B5)
 */
export function useAccessControlFacetWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof accessControlFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof accessControlFacetABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<
        typeof accessControlFacetABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof accessControlFacetABI, TFunctionName, TMode>({
    abi: accessControlFacetABI,
    address:
      accessControlFacetAddress[
        chainId as keyof typeof accessControlFacetAddress
      ],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlFacetABI}__ and `functionName` set to `"grantRole"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc90eDF9848f8dcf557e83Bc2020B6F7d286321B5)
 */
export function useAccessControlFacetGrantRole<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof accessControlFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof accessControlFacetABI,
          'grantRole'
        >['request']['abi'],
        'grantRole',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'grantRole' }
    : UseContractWriteConfig<
        typeof accessControlFacetABI,
        'grantRole',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'grantRole'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof accessControlFacetABI, 'grantRole', TMode>({
    abi: accessControlFacetABI,
    address:
      accessControlFacetAddress[
        chainId as keyof typeof accessControlFacetAddress
      ],
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlFacetABI}__ and `functionName` set to `"initializeAccessControl"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc90eDF9848f8dcf557e83Bc2020B6F7d286321B5)
 */
export function useAccessControlFacetInitializeAccessControl<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof accessControlFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof accessControlFacetABI,
          'initializeAccessControl'
        >['request']['abi'],
        'initializeAccessControl',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'initializeAccessControl'
      }
    : UseContractWriteConfig<
        typeof accessControlFacetABI,
        'initializeAccessControl',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'initializeAccessControl'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof accessControlFacetABI,
    'initializeAccessControl',
    TMode
  >({
    abi: accessControlFacetABI,
    address:
      accessControlFacetAddress[
        chainId as keyof typeof accessControlFacetAddress
      ],
    functionName: 'initializeAccessControl',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlFacetABI}__ and `functionName` set to `"renounceRole"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc90eDF9848f8dcf557e83Bc2020B6F7d286321B5)
 */
export function useAccessControlFacetRenounceRole<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof accessControlFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof accessControlFacetABI,
          'renounceRole'
        >['request']['abi'],
        'renounceRole',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'renounceRole'
      }
    : UseContractWriteConfig<
        typeof accessControlFacetABI,
        'renounceRole',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'renounceRole'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof accessControlFacetABI, 'renounceRole', TMode>({
    abi: accessControlFacetABI,
    address:
      accessControlFacetAddress[
        chainId as keyof typeof accessControlFacetAddress
      ],
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlFacetABI}__ and `functionName` set to `"revokeRole"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc90eDF9848f8dcf557e83Bc2020B6F7d286321B5)
 */
export function useAccessControlFacetRevokeRole<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof accessControlFacetAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof accessControlFacetABI,
          'revokeRole'
        >['request']['abi'],
        'revokeRole',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'revokeRole' }
    : UseContractWriteConfig<
        typeof accessControlFacetABI,
        'revokeRole',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'revokeRole'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof accessControlFacetABI, 'revokeRole', TMode>({
    abi: accessControlFacetABI,
    address:
      accessControlFacetAddress[
        chainId as keyof typeof accessControlFacetAddress
      ],
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlFacetABI}__.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc90eDF9848f8dcf557e83Bc2020B6F7d286321B5)
 */
export function usePrepareAccessControlFacetWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accessControlFacetABI, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof accessControlFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: accessControlFacetABI,
    address:
      accessControlFacetAddress[
        chainId as keyof typeof accessControlFacetAddress
      ],
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof accessControlFacetABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlFacetABI}__ and `functionName` set to `"grantRole"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc90eDF9848f8dcf557e83Bc2020B6F7d286321B5)
 */
export function usePrepareAccessControlFacetGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accessControlFacetABI, 'grantRole'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof accessControlFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: accessControlFacetABI,
    address:
      accessControlFacetAddress[
        chainId as keyof typeof accessControlFacetAddress
      ],
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accessControlFacetABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlFacetABI}__ and `functionName` set to `"initializeAccessControl"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc90eDF9848f8dcf557e83Bc2020B6F7d286321B5)
 */
export function usePrepareAccessControlFacetInitializeAccessControl(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof accessControlFacetABI,
      'initializeAccessControl'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof accessControlFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: accessControlFacetABI,
    address:
      accessControlFacetAddress[
        chainId as keyof typeof accessControlFacetAddress
      ],
    functionName: 'initializeAccessControl',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof accessControlFacetABI,
    'initializeAccessControl'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlFacetABI}__ and `functionName` set to `"renounceRole"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc90eDF9848f8dcf557e83Bc2020B6F7d286321B5)
 */
export function usePrepareAccessControlFacetRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accessControlFacetABI, 'renounceRole'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof accessControlFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: accessControlFacetABI,
    address:
      accessControlFacetAddress[
        chainId as keyof typeof accessControlFacetAddress
      ],
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof accessControlFacetABI,
    'renounceRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlFacetABI}__ and `functionName` set to `"revokeRole"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc90eDF9848f8dcf557e83Bc2020B6F7d286321B5)
 */
export function usePrepareAccessControlFacetRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accessControlFacetABI, 'revokeRole'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof accessControlFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: accessControlFacetABI,
    address:
      accessControlFacetAddress[
        chainId as keyof typeof accessControlFacetAddress
      ],
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof accessControlFacetABI,
    'revokeRole'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlFacetABI}__.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc90eDF9848f8dcf557e83Bc2020B6F7d286321B5)
 */
export function useAccessControlFacetEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof accessControlFacetABI, TEventName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof accessControlFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: accessControlFacetABI,
    address:
      accessControlFacetAddress[
        chainId as keyof typeof accessControlFacetAddress
      ],
    ...config,
  } as UseContractEventConfig<typeof accessControlFacetABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlFacetABI}__ and `eventName` set to `"RoleAdminChanged"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc90eDF9848f8dcf557e83Bc2020B6F7d286321B5)
 */
export function useAccessControlFacetRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof accessControlFacetABI, 'RoleAdminChanged'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof accessControlFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: accessControlFacetABI,
    address:
      accessControlFacetAddress[
        chainId as keyof typeof accessControlFacetAddress
      ],
    eventName: 'RoleAdminChanged',
    ...config,
  } as UseContractEventConfig<typeof accessControlFacetABI, 'RoleAdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlFacetABI}__ and `eventName` set to `"RoleGranted"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc90eDF9848f8dcf557e83Bc2020B6F7d286321B5)
 */
export function useAccessControlFacetRoleGrantedEvent(
  config: Omit<
    UseContractEventConfig<typeof accessControlFacetABI, 'RoleGranted'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof accessControlFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: accessControlFacetABI,
    address:
      accessControlFacetAddress[
        chainId as keyof typeof accessControlFacetAddress
      ],
    eventName: 'RoleGranted',
    ...config,
  } as UseContractEventConfig<typeof accessControlFacetABI, 'RoleGranted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlFacetABI}__ and `eventName` set to `"RoleRevoked"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xc90eDF9848f8dcf557e83Bc2020B6F7d286321B5)
 */
export function useAccessControlFacetRoleRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof accessControlFacetABI, 'RoleRevoked'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof accessControlFacetAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: accessControlFacetABI,
    address:
      accessControlFacetAddress[
        chainId as keyof typeof accessControlFacetAddress
      ],
    eventName: 'RoleRevoked',
    ...config,
  } as UseContractEventConfig<typeof accessControlFacetABI, 'RoleRevoked'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link singleCutDiamondFactoryABI}__.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x44FC178BA2361b25f3C6D6FDcAc20F80d0961FB0)
 */
export function useSingleCutDiamondFactoryWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof singleCutDiamondFactoryAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof singleCutDiamondFactoryABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<
        typeof singleCutDiamondFactoryABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof singleCutDiamondFactoryABI,
    TFunctionName,
    TMode
  >({
    abi: singleCutDiamondFactoryABI,
    address:
      singleCutDiamondFactoryAddress[
        chainId as keyof typeof singleCutDiamondFactoryAddress
      ],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link singleCutDiamondFactoryABI}__ and `functionName` set to `"createDiamond"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x44FC178BA2361b25f3C6D6FDcAc20F80d0961FB0)
 */
export function useSingleCutDiamondFactoryCreateDiamond<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof singleCutDiamondFactoryAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof singleCutDiamondFactoryABI,
          'createDiamond'
        >['request']['abi'],
        'createDiamond',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'createDiamond'
      }
    : UseContractWriteConfig<
        typeof singleCutDiamondFactoryABI,
        'createDiamond',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'createDiamond'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof singleCutDiamondFactoryABI,
    'createDiamond',
    TMode
  >({
    abi: singleCutDiamondFactoryABI,
    address:
      singleCutDiamondFactoryAddress[
        chainId as keyof typeof singleCutDiamondFactoryAddress
      ],
    functionName: 'createDiamond',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link singleCutDiamondFactoryABI}__.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x44FC178BA2361b25f3C6D6FDcAc20F80d0961FB0)
 */
export function usePrepareSingleCutDiamondFactoryWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof singleCutDiamondFactoryABI,
      TFunctionName
    >,
    'abi' | 'address'
  > & { chainId?: keyof typeof singleCutDiamondFactoryAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: singleCutDiamondFactoryABI,
    address:
      singleCutDiamondFactoryAddress[
        chainId as keyof typeof singleCutDiamondFactoryAddress
      ],
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof singleCutDiamondFactoryABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link singleCutDiamondFactoryABI}__ and `functionName` set to `"createDiamond"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x44FC178BA2361b25f3C6D6FDcAc20F80d0961FB0)
 */
export function usePrepareSingleCutDiamondFactoryCreateDiamond(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof singleCutDiamondFactoryABI,
      'createDiamond'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof singleCutDiamondFactoryAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: singleCutDiamondFactoryABI,
    address:
      singleCutDiamondFactoryAddress[
        chainId as keyof typeof singleCutDiamondFactoryAddress
      ],
    functionName: 'createDiamond',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof singleCutDiamondFactoryABI,
    'createDiamond'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link singleCutDiamondFactoryABI}__.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x44FC178BA2361b25f3C6D6FDcAc20F80d0961FB0)
 */
export function useSingleCutDiamondFactoryEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof singleCutDiamondFactoryABI, TEventName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof singleCutDiamondFactoryAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: singleCutDiamondFactoryABI,
    address:
      singleCutDiamondFactoryAddress[
        chainId as keyof typeof singleCutDiamondFactoryAddress
      ],
    ...config,
  } as UseContractEventConfig<typeof singleCutDiamondFactoryABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link singleCutDiamondFactoryABI}__ and `eventName` set to `"DiamondCreated"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0x44FC178BA2361b25f3C6D6FDcAc20F80d0961FB0)
 */
export function useSingleCutDiamondFactoryDiamondCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof singleCutDiamondFactoryABI, 'DiamondCreated'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof singleCutDiamondFactoryAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: singleCutDiamondFactoryABI,
    address:
      singleCutDiamondFactoryAddress[
        chainId as keyof typeof singleCutDiamondFactoryAddress
      ],
    eventName: 'DiamondCreated',
    ...config,
  } as UseContractEventConfig<
    typeof singleCutDiamondFactoryABI,
    'DiamondCreated'
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableDiamondFactoryAbiABI}__.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xd75292Ce17Ed419C6231FBc73E54356F30803e5F)
 */
export function useOwnableDiamondFactoryAbiWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof ownableDiamondFactoryAbiAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ownableDiamondFactoryAbiABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<
        typeof ownableDiamondFactoryAbiABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof ownableDiamondFactoryAbiABI,
    TFunctionName,
    TMode
  >({
    abi: ownableDiamondFactoryAbiABI,
    address:
      ownableDiamondFactoryAbiAddress[
        chainId as keyof typeof ownableDiamondFactoryAbiAddress
      ],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableDiamondFactoryAbiABI}__ and `functionName` set to `"createDiamond"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xd75292Ce17Ed419C6231FBc73E54356F30803e5F)
 */
export function useOwnableDiamondFactoryAbiCreateDiamond<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof ownableDiamondFactoryAbiAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ownableDiamondFactoryAbiABI,
          'createDiamond'
        >['request']['abi'],
        'createDiamond',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'createDiamond'
      }
    : UseContractWriteConfig<
        typeof ownableDiamondFactoryAbiABI,
        'createDiamond',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'createDiamond'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof ownableDiamondFactoryAbiABI,
    'createDiamond',
    TMode
  >({
    abi: ownableDiamondFactoryAbiABI,
    address:
      ownableDiamondFactoryAbiAddress[
        chainId as keyof typeof ownableDiamondFactoryAbiAddress
      ],
    functionName: 'createDiamond',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableDiamondFactoryAbiABI}__.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xd75292Ce17Ed419C6231FBc73E54356F30803e5F)
 */
export function usePrepareOwnableDiamondFactoryAbiWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ownableDiamondFactoryAbiABI,
      TFunctionName
    >,
    'abi' | 'address'
  > & { chainId?: keyof typeof ownableDiamondFactoryAbiAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: ownableDiamondFactoryAbiABI,
    address:
      ownableDiamondFactoryAbiAddress[
        chainId as keyof typeof ownableDiamondFactoryAbiAddress
      ],
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ownableDiamondFactoryAbiABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableDiamondFactoryAbiABI}__ and `functionName` set to `"createDiamond"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xd75292Ce17Ed419C6231FBc73E54356F30803e5F)
 */
export function usePrepareOwnableDiamondFactoryAbiCreateDiamond(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ownableDiamondFactoryAbiABI,
      'createDiamond'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof ownableDiamondFactoryAbiAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: ownableDiamondFactoryAbiABI,
    address:
      ownableDiamondFactoryAbiAddress[
        chainId as keyof typeof ownableDiamondFactoryAbiAddress
      ],
    functionName: 'createDiamond',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ownableDiamondFactoryAbiABI,
    'createDiamond'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableDiamondFactoryAbiABI}__.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xd75292Ce17Ed419C6231FBc73E54356F30803e5F)
 */
export function useOwnableDiamondFactoryAbiEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ownableDiamondFactoryAbiABI, TEventName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof ownableDiamondFactoryAbiAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: ownableDiamondFactoryAbiABI,
    address:
      ownableDiamondFactoryAbiAddress[
        chainId as keyof typeof ownableDiamondFactoryAbiAddress
      ],
    ...config,
  } as UseContractEventConfig<typeof ownableDiamondFactoryAbiABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableDiamondFactoryAbiABI}__ and `eventName` set to `"DiamondCreated"`.
 *
 * [__View Contract on Gnosis Gnosis Chain Explorer__](https://blockscout.com/xdai/mainnet//address/0xd75292Ce17Ed419C6231FBc73E54356F30803e5F)
 */
export function useOwnableDiamondFactoryAbiDiamondCreatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof ownableDiamondFactoryAbiABI,
      'DiamondCreated'
    >,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof ownableDiamondFactoryAbiAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: ownableDiamondFactoryAbiABI,
    address:
      ownableDiamondFactoryAbiAddress[
        chainId as keyof typeof ownableDiamondFactoryAbiAddress
      ],
    eventName: 'DiamondCreated',
    ...config,
  } as UseContractEventConfig<
    typeof ownableDiamondFactoryAbiABI,
    'DiamondCreated'
  >)
}
